{"title":"Qt的线程同步 - QMutex and QMutexLocker","slug":"Qt的线程同步-QMutex-and-QMutexLocker","date":"2020-07-01T12:40:18.000Z","updated":"2020-07-01T12:41:54.463Z","comments":true,"path":"api/articles/Qt的线程同步-QMutex-and-QMutexLocker.json","excerpt":null,"covers":null,"content":"<h1 id=\"QMutex\"><a href=\"#QMutex\" class=\"headerlink\" title=\"QMutex\"></a>QMutex</h1><p>锁是多线程同步常用的方法<br>Qt的锁 - QMutex。<br>C++的锁 - std::mutex;<br>QMutex可以手动调用Lock跟UnLock来加锁跟解锁。<br>但是既然我们都写C++的，还是充分利用C++的RAII的来进行资源管理，避免线程意外停止，发生死锁。</p>\n<h1 id=\"QMutexLocker\"><a href=\"#QMutexLocker\" class=\"headerlink\" title=\"QMutexLocker\"></a>QMutexLocker</h1><p>可以看下Qt中QMutexLocker的实现</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token operator\">~</span><span class=\"token function\">QMutexLocker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>在QMutex锁的生命周期结束以后，自动解锁。</p>\n<p>对应C++的类就是 </p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>lock_guard：方便线程对互斥量上锁。\nstd<span class=\"token operator\">::</span>unique_lock：方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。</code></pre>\n<p>普通的线程同步，使用QMutexLocker就可以。</p>\n<p>这时候可以上栗子了</p>\n<h1 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h1><p>两个线程，依次输出12345678。。。</p>\n<p>我这里用QThread举例，你当然可以用继承QObject的方式来实现。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">namespace</span>\n<span class=\"token punctuation\">{</span>\n QMutex mutex<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkerThread</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QThread\n<span class=\"token punctuation\">{</span>\n Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n <span class=\"token function\">WorkerThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setObjectName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WorkerThread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n   QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   index <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">&lt;&lt;</span>index<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkerThread1</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QThread\n<span class=\"token punctuation\">{</span>\n Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n <span class=\"token function\">WorkerThread1</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setObjectName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WorkerThread1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n   QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   index <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">&lt;&lt;</span>index<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>然后这样调用</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"> WorkerThread thread<span class=\"token punctuation\">;</span>\n WorkerThread1 thread1<span class=\"token punctuation\">;</span>\n thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n thread<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n thread1<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>我这里贴上输出</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token string\">\"WorkerThread\"</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">1</span> \n\n<span class=\"token string\">\"WorkerThread1\"</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">2</span> \n\n<span class=\"token string\">\"WorkerThread\"</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">3</span> \n\n<span class=\"token string\">\"WorkerThread1\"</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">4</span> \n\n<span class=\"token string\">\"WorkerThread\"</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">5</span> \n。。。</code></pre>\n<p>代码很简单，工程代码在这里</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread4\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread4\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread4</a></p>\n","more":"<h1 id=\"QMutex\"><a href=\"#QMutex\" class=\"headerlink\" title=\"QMutex\"></a>QMutex</h1><p>锁是多线程同步常用的方法<br>Qt的锁 - QMutex。<br>C++的锁 - std::mutex;<br>QMutex可以手动调用Lock跟UnLock来加锁跟解锁。<br>但是既然我们都写C++的，还是充分利用C++的RAII的来进行资源管理，避免线程意外停止，发生死锁。</p>\n<h1 id=\"QMutexLocker\"><a href=\"#QMutexLocker\" class=\"headerlink\" title=\"QMutexLocker\"></a>QMutexLocker</h1><p>可以看下Qt中QMutexLocker的实现</p>\n<pre><code class=\"cpp\">inline ~QMutexLocker() { unlock(); }</code></pre>\n<p>在QMutex锁的生命周期结束以后，自动解锁。</p>\n<p>对应C++的类就是 </p>\n<pre><code class=\"cpp\">std::lock_guard：方便线程对互斥量上锁。\nstd::unique_lock：方便线程对互斥量上锁，但提供了更好的上锁和解锁控制。</code></pre>\n<p>普通的线程同步，使用QMutexLocker就可以。</p>\n<p>这时候可以上栗子了</p>\n<h1 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h1><p>两个线程，依次输出12345678。。。</p>\n<p>我这里用QThread举例，你当然可以用继承QObject的方式来实现。</p>\n<pre><code class=\"cpp\">namespace\n{\n QMutex mutex;\n static int index = 0;\n}\n\nclass WorkerThread : public QThread\n{\n Q_OBJECT\npublic:\n WorkerThread(QObject *parent = 0)\n  : QThread(parent)\n {\n  setObjectName(&quot;WorkerThread&quot;);\n }\nprotected:\n void run()\n {\n  while(true)\n  {\n   QMutexLocker locker(&amp;mutex);\n   index ++;\n   Sleep(2000);\n   qDebug()&lt;&lt;this-&gt;objectName()&lt;&lt;&quot;---&quot;&lt;&lt;index&lt;&lt;endl;\n  }\n }\n};\n\nclass WorkerThread1 : public QThread\n{\n Q_OBJECT\npublic:\n WorkerThread1(QObject *parent = 0)\n  : QThread(parent)\n {\n  setObjectName(&quot;WorkerThread1&quot;);\n }\nprotected:\n void run()\n {\n  while(true)\n  {\n   QMutexLocker locker(&amp;mutex);\n   index ++;\n   Sleep(2000);\n   qDebug()&lt;&lt;this-&gt;objectName()&lt;&lt;&quot;---&quot;&lt;&lt;index&lt;&lt;endl;\n  }\n }\n};</code></pre>\n<p>然后这样调用</p>\n<pre><code class=\"cpp\"> WorkerThread thread;\n WorkerThread1 thread1;\n thread.start();\n thread1.start();\n\n thread.wait();\n thread1.wait();</code></pre>\n<p>我这里贴上输出</p>\n<pre><code class=\"cpp\">&quot;WorkerThread&quot; --- 1 \n\n&quot;WorkerThread1&quot; --- 2 \n\n&quot;WorkerThread&quot; --- 3 \n\n&quot;WorkerThread1&quot; --- 4 \n\n&quot;WorkerThread&quot; --- 5 \n。。。</code></pre>\n<p>代码很简单，工程代码在这里</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread4\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread4\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread4</a></p>\n","categories":[{"name":"Qt","path":"api/categories/Qt.json"},{"name":"Qt基础教程","path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"QThread","path":"api/tags/QThread.json"},{"name":"Qt线程","path":"api/tags/Qt线程.json"},{"name":"QMutex","path":"api/tags/QMutex.json"},{"name":"QMutexLocker","path":"api/tags/QMutexLocker.json"}]}