{"title":"QThread线程官方的推荐的写法","slug":"QThread线程官方的推荐的写法","date":"2020-06-30T13:50:16.000Z","updated":"2020-06-30T13:52:33.999Z","comments":true,"path":"api/articles/QThread线程官方的推荐的写法.json","excerpt":null,"covers":null,"content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>直接重写QThread是没有问题的，但是重写QThread这种方式不太灵活，对于重写的Thread来讲，只有run函数才会在新的线程中。对于重写的QThread是可以带出来对应的数据得，但是自己响应自己的槽函数的话，就不太灵活了，Qt的老版本代码中甚至写了这样的代码。</p>\n<pre><code>    WorkerThread(QObject *parent = 0)\n        : QThread(parent)\n    {\n           moveToThread(this);\n    }</code></pre><p>这种写法是非常不清真的。包括Qt的QThread介绍中，都不推荐这样写了。<br>今天给大家介绍新的实现方式，这种实现方式相当灵活，可以任意的启动，暂停之类的操作，都是通过Qt的信号槽来实现。我们先继续实现上一个例子。这次使用新的实现方式。</p>\n<p>重写QObject，move到新的线程中。</p>\n<p>这样是QObject自己的消息循环放到了新的线程中，跨线程之间信号槽就随随便便的使用了。</p>\n<p>上代码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkThread</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QObject\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span>QObject<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">start1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsignals<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">workFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">workStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//cpp</span>\nWorkThread<span class=\"token operator\">::</span><span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span>QObject<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nWorkThread<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">start1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    emit <span class=\"token function\">workStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    emit <span class=\"token function\">workFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后上逻辑代码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">    m_workerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    WorkThread<span class=\"token operator\">*</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    worker<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>m_workerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//开始线程</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>pushButton<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>ThreadStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_workerThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QThread<span class=\"token operator\">::</span>started<span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkThread<span class=\"token operator\">::</span>start1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//销毁线程</span>\n    <span class=\"token comment\" spellcheck=\"true\">//等工作的QObject结束，让线程停止结束</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkThread<span class=\"token operator\">::</span>workFinished<span class=\"token punctuation\">,</span> m_workerThread<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        m_workerThread<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m_workerThread<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//线程停止发给QObject让他自己销毁。</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_workerThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QThread<span class=\"token operator\">::</span>finished<span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkThread<span class=\"token operator\">::</span>deleteLater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// QObject销毁之后，让线程自己销毁。</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkThread<span class=\"token operator\">::</span>destroyed<span class=\"token punctuation\">,</span> m_workerThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QThread<span class=\"token operator\">::</span>deleteLater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>直接看connect，一个个解释</p>\n<ol>\n<li>connect绑定按钮，点击线程启动</li>\n<li>线程启动，Object中的work函数开始工作，输出1-1000</li>\n<li>Object输出结束，线程停止</li>\n<li>线程停止，QObject自己销毁自己</li>\n<li>QObject销毁之后，通知Thread销毁自己</li>\n</ol>\n<p>完美释放了QThread的资源。</p>\n<p>当然有人问你这样的操作太复杂了，没必要。其实对于简单的逻辑来讲，这样确实没必要。但是对于颗粒度控制来讲，这种更有优势，下一篇。我会针对这个代码通过信号槽做一些控制的操作。</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread2\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread2\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread2</a></p>\n","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>直接重写QThread是没有问题的，但是重写QThread这种方式不太灵活，对于重写的Thread来讲，只有run函数才会在新的线程中。对于重写的QThread是可以带出来对应的数据得，但是自己响应自己的槽函数的话，就不太灵活了，Qt的老版本代码中甚至写了这样的代码。</p>\n<pre><code>    WorkerThread(QObject *parent = 0)\n        : QThread(parent)\n    {\n           moveToThread(this);\n    }</code></pre><p>这种写法是非常不清真的。包括Qt的QThread介绍中，都不推荐这样写了。<br>今天给大家介绍新的实现方式，这种实现方式相当灵活，可以任意的启动，暂停之类的操作，都是通过Qt的信号槽来实现。我们先继续实现上一个例子。这次使用新的实现方式。</p>\n<p>重写QObject，move到新的线程中。</p>\n<p>这样是QObject自己的消息循环放到了新的线程中，跨线程之间信号槽就随随便便的使用了。</p>\n<p>上代码</p>\n<pre><code class=\"cpp\">class WorkThread : public QObject\n{\n    Q_OBJECT\npublic:\n    WorkThread(QObject* parent = nullptr);\n    ~WorkThread();\npublic slots:\n    void start1();\n    void doWork();\nsignals:\n    void workFinished();\n    void workStart();\n};\n\n//cpp\nWorkThread::WorkThread(QObject* parent) : QObject (parent)\n{\n}\nWorkThread::~WorkThread()\n{\n}\nvoid WorkThread::start1()\n{\n    emit workStart();\n    doWork();\n}\nvoid WorkThread::doWork()\n{\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        qDebug()&lt;&lt;i&lt;&lt;endl;\n    }\n    emit workFinished();\n}\n</code></pre>\n<p>然后上逻辑代码</p>\n<pre><code class=\"cpp\">    m_workerThread = new QThread();\n    WorkThread* worker = new WorkThread();\n    worker-&gt;moveToThread(m_workerThread);\n\n    //开始线程\n    connect(ui-&gt;pushButton, &amp;QPushButton::clicked, this, &amp;MainWindow::ThreadStart);\n    connect(m_workerThread, &amp;QThread::started, worker, &amp;WorkThread::start1);\n\n    //销毁线程\n    //等工作的QObject结束，让线程停止结束\n    connect(worker, &amp;WorkThread::workFinished, m_workerThread, [this]()\n    {\n        m_workerThread-&gt;quit();\n        m_workerThread-&gt;wait();\n    });\n\n    //线程停止发给QObject让他自己销毁。\n    connect(m_workerThread, &amp;QThread::finished, worker, &amp;WorkThread::deleteLater);\n\n    // QObject销毁之后，让线程自己销毁。\n    connect(worker, &amp;WorkThread::destroyed, m_workerThread, &amp;QThread::deleteLater);</code></pre>\n<p>直接看connect，一个个解释</p>\n<ol>\n<li>connect绑定按钮，点击线程启动</li>\n<li>线程启动，Object中的work函数开始工作，输出1-1000</li>\n<li>Object输出结束，线程停止</li>\n<li>线程停止，QObject自己销毁自己</li>\n<li>QObject销毁之后，通知Thread销毁自己</li>\n</ol>\n<p>完美释放了QThread的资源。</p>\n<p>当然有人问你这样的操作太复杂了，没必要。其实对于简单的逻辑来讲，这样确实没必要。但是对于颗粒度控制来讲，这种更有优势，下一篇。我会针对这个代码通过信号槽做一些控制的操作。</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread2\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread2\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread2</a></p>\n","categories":[{"name":"Qt","path":"api/categories/Qt.json"},{"name":"Qt基础教程","path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt基础教程","path":"api/tags/Qt基础教程.json"},{"name":"QThread","path":"api/tags/QThread.json"},{"name":"QObject","path":"api/tags/QObject.json"}]}