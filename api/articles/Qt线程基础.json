{"title":"Qt线程基础","slug":"Qt线程基础","date":"2020-06-14T02:32:26.000Z","updated":"2020-06-14T02:50:59.676Z","comments":true,"path":"api/articles/Qt线程基础.json","excerpt":null,"covers":null,"content":"<h1 id=\"线程的概念\"><a href=\"#线程的概念\" class=\"headerlink\" title=\"线程的概念\"></a>线程的概念</h1><h2 id=\"WIKI：\"><a href=\"#WIKI：\" class=\"headerlink\" title=\"WIKI：\"></a>WIKI：</h2><blockquote>\n<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br>一个进程可以有很多线程，每条线程并行执行不同的任务。<br>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p>\n</blockquote>\n<h1 id=\"Qt中的线程\"><a href=\"#Qt中的线程\" class=\"headerlink\" title=\"Qt中的线程\"></a>Qt中的线程</h1><p>Qt中的线程类是QThread。</p>\n<p>一个QThread对象管理程序中的一个控制线程。QThreads开始在run()中执行。默认情况下，run()通过调用exec()启动事件循环，并在线程内部运行Qt事件循环。</p>\n<p>跟C++标准库中的thread不一样，Qt中的QThread是默认自带一个事件循环的。也就是你可以通过信号槽来进行线程之间的通信（这样就不需要写各种回调函数了）。这大大的简便了线程通信的复杂逻辑。</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>先上一个简单的例子，点击按钮，开启一个新的线程，线程中输出从1-1000,结束之后发送信号workfinished</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkerThread</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QThread\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">WorkerThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        emit <span class=\"token function\">workFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\nsignals<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">workFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMainWindow<span class=\"token operator\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token operator\">::</span>MainWindow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ui<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    WorkerThread<span class=\"token operator\">*</span> workThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">WorkerThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>pushButton<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        workThread<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>workThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkerThread<span class=\"token operator\">::</span>workFinished<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"workfinished\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这个例子很简单，点击按钮，线程启动。结束之后发送一个信号出来。</p>\n<p>官方已经不推荐这种写法，这种写法只有run()函数才会在新的线程中。自己线程发的信号槽如果不注意的话，线程的槽函数也不会响应的。</p>\n<p>下面介绍新的写法，重写QObject，move到新的线程中。</p>\n<p>样例代码 </p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1</a></p>\n","more":"<h1 id=\"线程的概念\"><a href=\"#线程的概念\" class=\"headerlink\" title=\"线程的概念\"></a>线程的概念</h1><h2 id=\"WIKI：\"><a href=\"#WIKI：\" class=\"headerlink\" title=\"WIKI：\"></a>WIKI：</h2><blockquote>\n<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br>一个进程可以有很多线程，每条线程并行执行不同的任务。<br>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p>\n</blockquote>\n<h1 id=\"Qt中的线程\"><a href=\"#Qt中的线程\" class=\"headerlink\" title=\"Qt中的线程\"></a>Qt中的线程</h1><p>Qt中的线程类是QThread。</p>\n<p>一个QThread对象管理程序中的一个控制线程。QThreads开始在run()中执行。默认情况下，run()通过调用exec()启动事件循环，并在线程内部运行Qt事件循环。</p>\n<p>跟C++标准库中的thread不一样，Qt中的QThread是默认自带一个事件循环的。也就是你可以通过信号槽来进行线程之间的通信（这样就不需要写各种回调函数了）。这大大的简便了线程通信的复杂逻辑。</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>先上一个简单的例子，点击按钮，开启一个新的线程，线程中输出从1-1000,结束之后发送信号workfinished</p>\n<pre><code class=\"cpp\">class WorkerThread : public QThread\n{\n    Q_OBJECT\npublic:\n    WorkerThread(QObject *parent = 0)\n        : QThread(parent)\n    {\n    }\nprotected:\n    void run()\n    {\n        for (int i = 0; i &lt; 1000; i++)\n        {\n            qDebug()&lt;&lt;i&lt;&lt;endl;\n        }\n        emit workFinished();\n    }\nsignals:\n    void workFinished();\n};\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui-&gt;setupUi(this);\n\n    WorkerThread* workThread = new WorkerThread(NULL);\n    connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()\n    {\n        workThread-&gt;start();\n    });\n\n    connect(workThread, &amp;WorkerThread::workFinished, [&amp;]()\n    {\n        qDebug()&lt;&lt;&quot;workfinished&quot;&lt;&lt;endl;\n    });\n}\n</code></pre>\n<p>这个例子很简单，点击按钮，线程启动。结束之后发送一个信号出来。</p>\n<p>官方已经不推荐这种写法，这种写法只有run()函数才会在新的线程中。自己线程发的信号槽如果不注意的话，线程的槽函数也不会响应的。</p>\n<p>下面介绍新的写法，重写QObject，move到新的线程中。</p>\n<p>样例代码 </p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1</a></p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt多线程","path":"api/tags/Qt多线程.json"},{"name":"Qt基础教程","path":"api/tags/Qt基础教程.json"}]}