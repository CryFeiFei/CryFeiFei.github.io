{"title":"QFileSystemWatcher源码剖析(Linux)_1","slug":"QFileSystemWatcher源码剖析-Linux-1","date":"2020-06-27T04:39:52.000Z","updated":"2020-06-27T04:41:16.845Z","comments":true,"path":"api/articles/QFileSystemWatcher源码剖析-Linux-1.json","excerpt":null,"covers":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上一篇讲了QFileSystemWatcher来检测文件夹的变化，里边的实现有两个</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 这个用于检测文件类型的变化</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QInotifyFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n\n<span class=\"token comment\" spellcheck=\"true\">// 这个用于监控Dir的变化</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QDnotifyFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n</code></pre>\n<p>QFileSystemWatcher中这两个类监视文件夹的变化还有一个小小的缺点，就是无法监视连接到服务器的位置，一般挂载到服务器到Linux本地的路径是这里</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">/run/user/1000/gvfs</code></pre>\n<p>这个目录下的。没有办法只能自己暂时实现了。</p>\n<h2 id=\"多线程-定时器\"><a href=\"#多线程-定时器\" class=\"headerlink\" title=\"多线程 + 定时器\"></a>多线程 + 定时器</h2><p>实际上一开始准备自己实现的，但是发现QFileSystemWatcher里边已经有一个类是对应的实现了。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span> PollingInterval <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QPollingFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInfo</span>\n    <span class=\"token punctuation\">{</span>\n        uint ownerId<span class=\"token punctuation\">;</span>\n        uint groupId<span class=\"token punctuation\">;</span>\n        QFile<span class=\"token operator\">::</span>Permissions permissions<span class=\"token punctuation\">;</span>\n        QDateTime lastModified<span class=\"token punctuation\">;</span>\n        QStringList entries<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">FileInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QFileInfo <span class=\"token operator\">&amp;</span>fileInfo<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">:</span> <span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">isDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                entries <span class=\"token operator\">=</span> fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">absoluteDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entryList</span><span class=\"token punctuation\">(</span>QDir<span class=\"token operator\">::</span>AllEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        FileInfo <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QFileInfo <span class=\"token operator\">&amp;</span>fileInfo<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token function\">FileInfo</span><span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QFileInfo <span class=\"token operator\">&amp;</span>fileInfo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">isDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> entries <span class=\"token operator\">!=</span> fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">absoluteDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entryList</span><span class=\"token punctuation\">(</span>QDir<span class=\"token operator\">::</span>AllEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ownerId <span class=\"token operator\">!=</span> fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> groupId <span class=\"token operator\">!=</span> fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> permissions <span class=\"token operator\">!=</span> fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> lastModified <span class=\"token operator\">!=</span> fileInfo<span class=\"token punctuation\">.</span><span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mutable</span> QMutex mutex<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> FileInfo<span class=\"token operator\">></span> files<span class=\"token punctuation\">,</span> directories<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">QPollingFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList <span class=\"token function\">addPaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList <span class=\"token function\">removePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> Q_SLOTS<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--cpp</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"filewatcher.h\"</span></span>\nQPollingFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">QPollingFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> QT_NO_THREAD</span>\n    <span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QPollingFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QTimer timer<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>PollingInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQStringList QPollingFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">addPaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span>\n                                                      QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span>\n                                                      QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList p <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">;</span>\n    QMutableListIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QString path <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QFileInfo <span class=\"token function\">fi</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">isDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">QLatin1Char</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                fi <span class=\"token operator\">=</span> <span class=\"token function\">QFileInfo</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">+</span> <span class=\"token function\">QLatin1Char</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>directories<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>files<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQStringList QPollingFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">removePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span>\n                                                         QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span>\n                                                         QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList p <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">;</span>\n    QMutableListIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QString path <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>directories<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>files<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>files<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>directories<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        locker<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QPollingFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMetaObject<span class=\"token operator\">::</span><span class=\"token function\">invokeMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QPollingFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QMutableHashIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> FileInfo<span class=\"token operator\">></span> <span class=\"token function\">fit</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fit<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QHash<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> FileInfo<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator x <span class=\"token operator\">=</span> fit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QString path <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QFileInfo <span class=\"token function\">fi</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fit<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            emit <span class=\"token function\">fileChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> fi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            x<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">;</span>\n            emit <span class=\"token function\">fileChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    QMutableHashIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> FileInfo<span class=\"token operator\">></span> <span class=\"token function\">dit</span><span class=\"token punctuation\">(</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>dit<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QHash<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> FileInfo<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator x <span class=\"token operator\">=</span> dit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QString path <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QFileInfo <span class=\"token function\">fi</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">QLatin1Char</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            fi <span class=\"token operator\">=</span> <span class=\"token function\">QFileInfo</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">+</span> <span class=\"token function\">QLatin1Char</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dit<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            emit <span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> fi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fi<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dit<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                emit <span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                x<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">;</span>\n                emit <span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QPollingFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine</code></pre>\n<p>这个类Qt没有对外接口暴露，实际上看QFileSystemWatcher的实现</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//poller在这里初始化</span>\n<span class=\"token keyword\">void</span> QFileSystemWatcherPrivate<span class=\"token operator\">::</span><span class=\"token function\">initPollerEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poller<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Q_Q</span><span class=\"token punctuation\">(</span>QFileSystemWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    poller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QPollingFileSystemWatcherEngine<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// that was a mouthful</span>\n    QObject<span class=\"token operator\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>poller<span class=\"token punctuation\">,</span>\n                     <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">fileChanged</span><span class=\"token punctuation\">(</span>QString<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                     q<span class=\"token punctuation\">,</span>\n                     <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">_q_fileChanged</span><span class=\"token punctuation\">(</span>QString<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QObject<span class=\"token operator\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>poller<span class=\"token punctuation\">,</span>\n                     <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>QString<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                     q<span class=\"token punctuation\">,</span>\n                     <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">_q_directoryChanged</span><span class=\"token punctuation\">(</span>QString<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//在这里调用</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">QLatin1String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_qt_autotest_force_engine_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\" spellcheck=\"true\">//这里也就是</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Normal runtime case - search intelligently for best engine</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-</span><span class=\"token operator\">></span>native<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            engine <span class=\"token operator\">=</span> d<span class=\"token operator\">-</span><span class=\"token operator\">></span>native<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">d_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">initPollerEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//这里初始化，否则就走上边两个无法监视服务器的实现</span>\n            engine <span class=\"token operator\">=</span> d<span class=\"token operator\">-</span><span class=\"token operator\">></span>poller<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>发现QFileSystemWatcher设置objectName为<em>qt_autotest_force_engine</em> 就可以使用了。<br>然后接着</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">    QFileSystemWatcher<span class=\"token operator\">*</span> fileSystemWatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QFileSystemWatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileSystemWatcher<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setObjectName</span><span class=\"token punctuation\">(</span><span class=\"token function\">QLatin1String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_qt_autotest_force_engine_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>这样就可以监视</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">/run/user/1000/gvfs</code></pre>\n<p>目录下的文件，也就是服务器挂载到Linux本地下的文件变化了。</p>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上一篇讲了QFileSystemWatcher来检测文件夹的变化，里边的实现有两个</p>\n<pre><code class=\"cpp\">// 这个用于检测文件类型的变化\nclass QInotifyFileSystemWatcherEngine : public QFileSystemWatcherEngine\n\n// 这个用于监控Dir的变化\nclass QDnotifyFileSystemWatcherEngine : public QFileSystemWatcherEngine\n</code></pre>\n<p>QFileSystemWatcher中这两个类监视文件夹的变化还有一个小小的缺点，就是无法监视连接到服务器的位置，一般挂载到服务器到Linux本地的路径是这里</p>\n<pre><code class=\"shell\">/run/user/1000/gvfs</code></pre>\n<p>这个目录下的。没有办法只能自己暂时实现了。</p>\n<h2 id=\"多线程-定时器\"><a href=\"#多线程-定时器\" class=\"headerlink\" title=\"多线程 + 定时器\"></a>多线程 + 定时器</h2><p>实际上一开始准备自己实现的，但是发现QFileSystemWatcher里边已经有一个类是对应的实现了。</p>\n<pre><code class=\"cpp\">enum { PollingInterval = 1000 };\nclass QPollingFileSystemWatcherEngine : public QFileSystemWatcherEngine\n{\n    Q_OBJECT\n    class FileInfo\n    {\n        uint ownerId;\n        uint groupId;\n        QFile::Permissions permissions;\n        QDateTime lastModified;\n        QStringList entries;\n    public:\n        FileInfo(const QFileInfo &amp;fileInfo)\n            : ownerId(fileInfo.ownerId()),\n              groupId(fileInfo.groupId()),\n              permissions(fileInfo.permissions()),\n              lastModified(fileInfo.lastModified())\n        {\n            if (fileInfo.isDir()) {\n                entries = fileInfo.absoluteDir().entryList(QDir::AllEntries);\n            }\n        }\n        FileInfo &amp;operator=(const QFileInfo &amp;fileInfo)\n        {\n            *this = FileInfo(fileInfo);\n            return *this;\n        }\n        bool operator!=(const QFileInfo &amp;fileInfo) const\n        {\n            if (fileInfo.isDir() &amp;&amp; entries != fileInfo.absoluteDir().entryList(QDir::AllEntries))\n                return true;\n            return (ownerId != fileInfo.ownerId()\n                    || groupId != fileInfo.groupId()\n                    || permissions != fileInfo.permissions()\n                    || lastModified != fileInfo.lastModified());\n        }\n    };\n    mutable QMutex mutex;\n    QHash&lt;QString, FileInfo&gt; files, directories;\npublic:\n    QPollingFileSystemWatcherEngine();\n    void run();\n    QStringList addPaths(const QStringList &amp;paths, QStringList *files, QStringList *directories);\n    QStringList removePaths(const QStringList &amp;paths, QStringList *files, QStringList *directories);\n    void stop();\nprivate Q_SLOTS:\n    void timeout();\n};\n\n//--cpp\n#include &quot;filewatcher.h&quot;\nQPollingFileSystemWatcherEngine::QPollingFileSystemWatcherEngine()\n{\n#ifndef QT_NO_THREAD\n    moveToThread(this);\n#endif\n}\nvoid QPollingFileSystemWatcherEngine::run()\n{\n    QTimer timer;\n    connect(&amp;timer, SIGNAL(timeout()), SLOT(timeout()));\n    timer.start(PollingInterval);\n    (void) exec();\n}\nQStringList QPollingFileSystemWatcherEngine::addPaths(const QStringList &amp;paths,\n                                                      QStringList *files,\n                                                      QStringList *directories)\n{\n    QMutexLocker locker(&amp;mutex);\n    QStringList p = paths;\n    QMutableListIterator&lt;QString&gt; it(p);\n    while (it.hasNext()) {\n        QString path = it.next();\n        QFileInfo fi(path);\n        if (!fi.exists())\n            continue;\n        if (fi.isDir()) {\n            if (!directories-&gt;contains(path))\n                directories-&gt;append(path);\n            if (!path.endsWith(QLatin1Char(&#39;/&#39;)))\n                fi = QFileInfo(path + QLatin1Char(&#39;/&#39;));\n            this-&gt;directories.insert(path, fi);\n        } else {\n            if (!files-&gt;contains(path))\n                files-&gt;append(path);\n            this-&gt;files.insert(path, fi);\n        }\n        it.remove();\n    }\n    start();\n    return p;\n}\nQStringList QPollingFileSystemWatcherEngine::removePaths(const QStringList &amp;paths,\n                                                         QStringList *files,\n                                                         QStringList *directories)\n{\n    QMutexLocker locker(&amp;mutex);\n    QStringList p = paths;\n    QMutableListIterator&lt;QString&gt; it(p);\n    while (it.hasNext()) {\n        QString path = it.next();\n        if (this-&gt;directories.remove(path)) {\n            directories-&gt;removeAll(path);\n            it.remove();\n        } else if (this-&gt;files.remove(path)) {\n            files-&gt;removeAll(path);\n            it.remove();\n        }\n    }\n    if (this-&gt;files.isEmpty() &amp;&amp; this-&gt;directories.isEmpty()) {\n        locker.unlock();\n        stop();\n        wait();\n    }\n    return p;\n}\nvoid QPollingFileSystemWatcherEngine::stop()\n{\n    QMetaObject::invokeMethod(this, &quot;quit&quot;);\n}\nvoid QPollingFileSystemWatcherEngine::timeout()\n{\n    QMutexLocker locker(&amp;mutex);\n    QMutableHashIterator&lt;QString, FileInfo&gt; fit(files);\n    while (fit.hasNext()) {\n        QHash&lt;QString, FileInfo&gt;::iterator x = fit.next();\n        QString path = x.key();\n        QFileInfo fi(path);\n        if (!fi.exists()) {\n            fit.remove();\n            emit fileChanged(path, true);\n        } else if (x.value() != fi) {\n            x.value() = fi;\n            emit fileChanged(path, false);\n        }\n    }\n    QMutableHashIterator&lt;QString, FileInfo&gt; dit(directories);\n    while (dit.hasNext()) {\n        QHash&lt;QString, FileInfo&gt;::iterator x = dit.next();\n        QString path = x.key();\n        QFileInfo fi(path);\n        if (!path.endsWith(QLatin1Char(&#39;/&#39;)))\n            fi = QFileInfo(path + QLatin1Char(&#39;/&#39;));\n        if (!fi.exists()) {\n            dit.remove();\n            emit directoryChanged(path, true);\n        } else if (x.value() != fi) {\n            fi.refresh();\n            if (!fi.exists()) {\n                dit.remove();\n                emit directoryChanged(path, true);\n            } else {\n                x.value() = fi;\n                emit directoryChanged(path, false);\n            }\n        }\n    }\n}</code></pre>\n<pre><code class=\"cpp\">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到\nclass QPollingFileSystemWatcherEngine : public QFileSystemWatcherEngine</code></pre>\n<p>这个类Qt没有对外接口暴露，实际上看QFileSystemWatcher的实现</p>\n<pre><code class=\"cpp\">//poller在这里初始化\nvoid QFileSystemWatcherPrivate::initPollerEngine()\n{\n    if(poller)\n        return;\n    Q_Q(QFileSystemWatcher);\n    poller = new QPollingFileSystemWatcherEngine; // that was a mouthful\n    QObject::connect(poller,\n                     SIGNAL(fileChanged(QString,bool)),\n                     q,\n                     SLOT(_q_fileChanged(QString,bool)));\n    QObject::connect(poller,\n                     SIGNAL(directoryChanged(QString,bool)),\n                     q,\n                     SLOT(_q_directoryChanged(QString,bool)));\n}\n\n//在这里调用\n    if(!objectName().startsWith(QLatin1String(&quot;_qt_autotest_force_engine_&quot;))) {   //这里也就是\n        // Normal runtime case - search intelligently for best engine\n        if(d-&gt;native) {\n            engine = d-&gt;native;\n        } else {\n            d_func()-&gt;initPollerEngine();       //这里初始化，否则就走上边两个无法监视服务器的实现\n            engine = d-&gt;poller;\n        }\n</code></pre>\n<p>发现QFileSystemWatcher设置objectName为<em>qt_autotest_force_engine</em> 就可以使用了。<br>然后接着</p>\n<pre><code class=\"cpp\">    QFileSystemWatcher* fileSystemWatcher = new QFileSystemWatcher(this);\n    fileSystemWatcher-&gt;setObjectName(QLatin1String(&quot;_qt_autotest_force_engine_&quot;));</code></pre>\n<p>这样就可以监视</p>\n<pre><code class=\"shell\">/run/user/1000/gvfs</code></pre>\n<p>目录下的文件，也就是服务器挂载到Linux本地下的文件变化了。</p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt源码","path":"api/tags/Qt源码.json"},{"name":"Qt源码剖析","path":"api/tags/Qt源码剖析.json"}]}