{"title":"Qt元对象(Meta-Object)系统","slug":"Qt元对象-Meta-Object-系统","date":"2020-06-27T07:42:58.000Z","updated":"2020-06-27T07:43:52.579Z","comments":true,"path":"api/articles/Qt元对象-Meta-Object-系统.json","excerpt":null,"covers":null,"content":"<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p> -在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。[1]用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。</p>\n<p>要注意术语“反射”和“内省”（type introspection）的关系。内省（或称“自省”）机制仅指程序在运行时对自身信息（称为元数据）的检测；反射机制不仅包括要能在运行时对程序自身信息进行检测，还要求程序能进一步根据这些信息改变程序状态或结构。</p>\n<h2 id=\"C-的反射\"><a href=\"#C-的反射\" class=\"headerlink\" title=\"C++的反射\"></a>C++的反射</h2><p>C++的标准语法是不提供反射的特性的，不过随着C++17的定稿，估计这个关键词不会加到标准中了。不过这个我们可以用template来实现，这次就不写template了。今天主要是讲的是Qt。</p>\n<h2 id=\"Qt的反射\"><a href=\"#Qt的反射\" class=\"headerlink\" title=\"Qt的反射\"></a>Qt的反射</h2><p>Qt最大的特点就是增加了moc的过程，个人理解，Qt扩展了C++的语法，以及增强了自己的基本库。</p>\n<blockquote>\n<p>Meta Object System is a part of Qt framework core provided to support Qt extensions to C++ like signals/slots for inter-object communication, run-time type information, and the dynamic property system.[1]<br>Architecture<br>The Meta object system consists of 3 things: QObject class, Q_OBJECT macro and a tool called moc (Meta-Object Compiler). QObject is the base class for all Qt classes, Q_OBJECT macro is used to enable meta-object features in classes and finally moc is a preprocessor that changes Q_OBJECT macro instances to C++ source code to enable meta object system mechanism in the class in which it is used.[2]<br>Using the meta object system has brought some criticism. In Qt documentation, several reasons have been given for the use of the meta object system, including benefits of code generation, dynamism of GUIs, automatic binding to scripting languages, not adding limitations and also reasonable performance in signal/slot implementation with moc.[3] There are some efforts to make Qt needless of a preprocessor. These efforts include re-implementing Qt moc using libclang.[4] </p>\n</blockquote>\n<p>moc可以理解将Qt中的一些关键词，比如Q_Object ，Q_PROPERTY等转化为c++的基本语法，所以我们在编译Qt的工程时，首先要qmake-&gt;make。</p>\n<p>个人认为Qt有两个我比较看重的特点。</p>\n<ul>\n<li>STL基础库的扩展。</li>\n<li>C++基本语法与特性的扩展。</li>\n</ul>\n<p>尤其是基本语法的扩展，比如信号槽，元对象系统，让C++一个静态语言有了动态语言的特性（当然你也可以用template来实现，但是这玩意儿一般人又用不起，而且写起来也比较恶心）。这一点我就可以吹爆了。</p>\n<p>下边开始讲Qt的反射。Qt的反射是基于Qt的元对象系统的。当然Qt还不能做到像java那样通过类名来创建一个对象，这个需要我们自己写一个工厂模式。个人认为，除了这一点，与java中的反射没有啥区别了。都可以动态的去访问其成员变量，成员函数，以及设置属性。当然必须加上Qt自己的语法。</p>\n<p>举个栗子</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//1 .继承 QObject </span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QObject\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT <span class=\"token comment\" spellcheck=\"true\">// 2.声明Q_OBJECT</span>\n    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString text READ text WRITE setText NOTIFY textChange<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//3. Q_PROPERTY 注册成员变量</span>\n    <span class=\"token function\">Q_PROPERTY</span><span class=\"token punctuation\">(</span>QString text MEMBER m_text NOTIFY textChange<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//4. 注册的成员变量能够响应自定义的signals textChange</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">TestObject</span><span class=\"token punctuation\">(</span>QObject<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//------</span>\n    Q_INVOKABLE QString <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//5.注册类的成员函数</span>\n    Q_INVOKABLE <span class=\"token keyword\">void</span> <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QString<span class=\"token operator\">&amp;</span> strText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//5.注册类的成员函数</span>\n    QString m_text<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//类的成员变量</span>\nsignals<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">textChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//自定义的signals</span>\n<span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">textslot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"textslot\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">//自定义的signals响应的槽函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//cpp</span>\nTestObject<span class=\"token operator\">::</span><span class=\"token function\">TestObject</span><span class=\"token punctuation\">(</span>QObject<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setObjectName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">textChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">textslot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nTestObject<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> TestObject<span class=\"token operator\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"*********************\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"init\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQString TestObject<span class=\"token operator\">::</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> m_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> TestObject<span class=\"token operator\">::</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QString<span class=\"token operator\">&amp;</span> strText<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_text <span class=\"token operator\">==</span> strText<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    m_text <span class=\"token operator\">=</span> strText<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    emit textChange(); //有了第四条这个语句已经不需要了。</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这里看调用方法</p>\n<pre><code>    TestObject* obj = new TestObject(this);  // new一个对象\n\n    qDebug()&lt;&lt;obj-&gt;objectName()&lt;&lt;endl; //输出对象的名字\n    // custom object property\n    obj-&gt;setProperty(&quot;text&quot;, &quot;hahaha&quot;);    //设置对象的属性\n    qDebug()&lt;&lt;obj-&gt;property(&quot;text&quot;).toString()&lt;&lt;endl; //输出对象的属性\n\n    //得到注册的类成员函数\n    qDebug()&lt;&lt;&quot;begin--------------------custom class method&quot;&lt;&lt;endl;\n    const QMetaObject* mobj = obj-&gt;metaObject();\n\n    qDebug()&lt;&lt;mobj-&gt;methodCount()&lt;&lt;endl;\n    for(int i = 0; i &lt; mobj-&gt;methodCount(); i++)\n    {\n        QMetaMethod mMethod = mobj-&gt;method(i);\n        QByteArray byteArray = mMethod.name();\n        //输出函数类型与函数名称\n        qDebug()&lt;&lt;mMethod.typeName()&lt;&lt;&quot;-&gt;&quot;&lt;&lt;QString(byteArray)&lt;&lt;endl; \n    }\n    qDebug()&lt;&lt;&quot;end----------------------custom class method&quot;&lt;&lt;endl;\n\n    //调用注册的成员函数，通过Q_RETURN_ARG来获取返回值\n    qDebug()&lt;&lt;&quot;begin    QMetaObject::invokeMethod&quot;&lt;&lt;endl;\n    QString invokeString;\n    //调用类的成员函数\n    QMetaObject::invokeMethod(obj, &quot;text&quot;, Qt::DirectConnection, Q_RETURN_ARG(QString, invokeString));\n    qDebug()&lt;&lt;invokeString&lt;&lt;endl;\n    qDebug()&lt;&lt;&quot;end            QMetaObject::invokeMethod&quot;&lt;&lt;endl;\n\n    // 再次设置text值，可以响应这个信号，可以参考4\n    obj-&gt;setProperty(&quot;text&quot;, &quot;luelueluelue&quot;);</code></pre><p>看上边的代码，C++能够随时获取当前类的成员变量与成员函数以及调用。(并不是通过C++的type id)这就是反射。反射在写GUI的时候是非常有用的。也就是我们可以随时获取当前对象的任何我们想要的属性以及想要调用的函数。静态语言有了动态语言的特性。这就是Qt强大的地方。</p>\n<h2 id=\"Qt通过类名来实现真正的反射\"><a href=\"#Qt通过类名来实现真正的反射\" class=\"headerlink\" title=\"Qt通过类名来实现真正的反射\"></a>Qt通过类名来实现真正的反射</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QByteArray></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMetaObject></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QHash></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> OBJECTFACTORY_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OBJECTFACTORY_H</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectFactory</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> T<span class=\"token operator\">::</span>staticMetaObject<span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>constructorHelper<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> QObject<span class=\"token operator\">*</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> QByteArray<span class=\"token operator\">&amp;</span> className<span class=\"token punctuation\">,</span> QObject<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Constructor constructor <span class=\"token operator\">=</span> <span class=\"token function\">constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span> className <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> constructor <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> parent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> QObject<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> QObject<span class=\"token operator\">*</span> parent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n    <span class=\"token keyword\">static</span> QObject<span class=\"token operator\">*</span> <span class=\"token function\">constructorHelper</span><span class=\"token punctuation\">(</span> QObject<span class=\"token operator\">*</span> parent <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span> parent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> QHash<span class=\"token operator\">&lt;</span>QByteArray<span class=\"token punctuation\">,</span> Constructor<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> QHash<span class=\"token operator\">&lt;</span>QByteArray<span class=\"token punctuation\">,</span> Constructor<span class=\"token operator\">></span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\" spellcheck=\"true\">// OBJECTFACTORY_H</span></code></pre>\n<p>下边是使用方法。todo ，这个东西应该写成单例模式的。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//使用方法</span>\n    ObjectFactory fac<span class=\"token punctuation\">;</span>\n    fac<span class=\"token punctuation\">.</span>registerClass<span class=\"token operator\">&lt;</span>TestObject<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"begin-------------------------------\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    TestObject<span class=\"token operator\">*</span> object <span class=\"token operator\">=</span> qobject_cast<span class=\"token operator\">&lt;</span>TestObject<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"TestObject\"</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    object<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"template factory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>object<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></code></pre>\n","more":"<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p> -在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。[1]用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。</p>\n<p>要注意术语“反射”和“内省”（type introspection）的关系。内省（或称“自省”）机制仅指程序在运行时对自身信息（称为元数据）的检测；反射机制不仅包括要能在运行时对程序自身信息进行检测，还要求程序能进一步根据这些信息改变程序状态或结构。</p>\n<h2 id=\"C-的反射\"><a href=\"#C-的反射\" class=\"headerlink\" title=\"C++的反射\"></a>C++的反射</h2><p>C++的标准语法是不提供反射的特性的，不过随着C++17的定稿，估计这个关键词不会加到标准中了。不过这个我们可以用template来实现，这次就不写template了。今天主要是讲的是Qt。</p>\n<h2 id=\"Qt的反射\"><a href=\"#Qt的反射\" class=\"headerlink\" title=\"Qt的反射\"></a>Qt的反射</h2><p>Qt最大的特点就是增加了moc的过程，个人理解，Qt扩展了C++的语法，以及增强了自己的基本库。</p>\n<blockquote>\n<p>Meta Object System is a part of Qt framework core provided to support Qt extensions to C++ like signals/slots for inter-object communication, run-time type information, and the dynamic property system.[1]<br>Architecture<br>The Meta object system consists of 3 things: QObject class, Q_OBJECT macro and a tool called moc (Meta-Object Compiler). QObject is the base class for all Qt classes, Q_OBJECT macro is used to enable meta-object features in classes and finally moc is a preprocessor that changes Q_OBJECT macro instances to C++ source code to enable meta object system mechanism in the class in which it is used.[2]<br>Using the meta object system has brought some criticism. In Qt documentation, several reasons have been given for the use of the meta object system, including benefits of code generation, dynamism of GUIs, automatic binding to scripting languages, not adding limitations and also reasonable performance in signal/slot implementation with moc.[3] There are some efforts to make Qt needless of a preprocessor. These efforts include re-implementing Qt moc using libclang.[4] </p>\n</blockquote>\n<p>moc可以理解将Qt中的一些关键词，比如Q_Object ，Q_PROPERTY等转化为c++的基本语法，所以我们在编译Qt的工程时，首先要qmake-&gt;make。</p>\n<p>个人认为Qt有两个我比较看重的特点。</p>\n<ul>\n<li>STL基础库的扩展。</li>\n<li>C++基本语法与特性的扩展。</li>\n</ul>\n<p>尤其是基本语法的扩展，比如信号槽，元对象系统，让C++一个静态语言有了动态语言的特性（当然你也可以用template来实现，但是这玩意儿一般人又用不起，而且写起来也比较恶心）。这一点我就可以吹爆了。</p>\n<p>下边开始讲Qt的反射。Qt的反射是基于Qt的元对象系统的。当然Qt还不能做到像java那样通过类名来创建一个对象，这个需要我们自己写一个工厂模式。个人认为，除了这一点，与java中的反射没有啥区别了。都可以动态的去访问其成员变量，成员函数，以及设置属性。当然必须加上Qt自己的语法。</p>\n<p>举个栗子</p>\n<pre><code class=\"cpp\">//1 .继承 QObject \nclass TestObject : public QObject\n{\n    Q_OBJECT // 2.声明Q_OBJECT\n    Q_PROPERTY(QString text READ text WRITE setText NOTIFY textChange) //3. Q_PROPERTY 注册成员变量\n    Q_PROPERTY(QString text MEMBER m_text NOTIFY textChange) //4. 注册的成员变量能够响应自定义的signals textChange\npublic:\n    TestObject(QObject* parent);\n    ~TestObject();\n    void init();\n    //------\n    Q_INVOKABLE QString text(); //5.注册类的成员函数\n    Q_INVOKABLE void setText(const QString&amp; strText); //5.注册类的成员函数\n    QString m_text; //类的成员变量\nsignals:\n    void textChange(); //自定义的signals\npublic slots:\n    void textslot(){qDebug()&lt;&lt;&quot;textslot&quot;&lt;&lt;endl;} //自定义的signals响应的槽函数\n};\n\n//cpp\nTestObject::TestObject(QObject* parent) : QObject (parent)\n{\n    this-&gt;setObjectName(&quot;TestObject&quot;);\n    connect(this, SIGNAL(textChange()),this, SLOT(textslot()));\n}\nTestObject::~TestObject()\n{\n}\nvoid TestObject::init()\n{\n    qDebug()&lt;&lt;&quot;*********************&quot;&lt;&lt;endl;\n    qDebug()&lt;&lt;&quot;init&quot;&lt;&lt;endl;\n}\nQString TestObject::text()\n{\n    return m_text;\n}\nvoid TestObject::setText(const QString&amp; strText)\n{\n    if (m_text == strText)\n        return;\n    m_text = strText;\n//    emit textChange(); //有了第四条这个语句已经不需要了。\n}</code></pre>\n<p>这里看调用方法</p>\n<pre><code>    TestObject* obj = new TestObject(this);  // new一个对象\n\n    qDebug()&lt;&lt;obj-&gt;objectName()&lt;&lt;endl; //输出对象的名字\n    // custom object property\n    obj-&gt;setProperty(&quot;text&quot;, &quot;hahaha&quot;);    //设置对象的属性\n    qDebug()&lt;&lt;obj-&gt;property(&quot;text&quot;).toString()&lt;&lt;endl; //输出对象的属性\n\n    //得到注册的类成员函数\n    qDebug()&lt;&lt;&quot;begin--------------------custom class method&quot;&lt;&lt;endl;\n    const QMetaObject* mobj = obj-&gt;metaObject();\n\n    qDebug()&lt;&lt;mobj-&gt;methodCount()&lt;&lt;endl;\n    for(int i = 0; i &lt; mobj-&gt;methodCount(); i++)\n    {\n        QMetaMethod mMethod = mobj-&gt;method(i);\n        QByteArray byteArray = mMethod.name();\n        //输出函数类型与函数名称\n        qDebug()&lt;&lt;mMethod.typeName()&lt;&lt;&quot;-&gt;&quot;&lt;&lt;QString(byteArray)&lt;&lt;endl; \n    }\n    qDebug()&lt;&lt;&quot;end----------------------custom class method&quot;&lt;&lt;endl;\n\n    //调用注册的成员函数，通过Q_RETURN_ARG来获取返回值\n    qDebug()&lt;&lt;&quot;begin    QMetaObject::invokeMethod&quot;&lt;&lt;endl;\n    QString invokeString;\n    //调用类的成员函数\n    QMetaObject::invokeMethod(obj, &quot;text&quot;, Qt::DirectConnection, Q_RETURN_ARG(QString, invokeString));\n    qDebug()&lt;&lt;invokeString&lt;&lt;endl;\n    qDebug()&lt;&lt;&quot;end            QMetaObject::invokeMethod&quot;&lt;&lt;endl;\n\n    // 再次设置text值，可以响应这个信号，可以参考4\n    obj-&gt;setProperty(&quot;text&quot;, &quot;luelueluelue&quot;);</code></pre><p>看上边的代码，C++能够随时获取当前类的成员变量与成员函数以及调用。(并不是通过C++的type id)这就是反射。反射在写GUI的时候是非常有用的。也就是我们可以随时获取当前对象的任何我们想要的属性以及想要调用的函数。静态语言有了动态语言的特性。这就是Qt强大的地方。</p>\n<h2 id=\"Qt通过类名来实现真正的反射\"><a href=\"#Qt通过类名来实现真正的反射\" class=\"headerlink\" title=\"Qt通过类名来实现真正的反射\"></a>Qt通过类名来实现真正的反射</h2><pre><code class=\"cpp\">#include &lt;QByteArray&gt;\n#include &lt;QMetaObject&gt;\n#include &lt;QHash&gt;\n\n#ifndef OBJECTFACTORY_H\n#define OBJECTFACTORY_H\n\nclass ObjectFactory\n{\npublic:\n    template&lt;typename T&gt;\n    static void registerClass()\n    {\n        constructors().insert( T::staticMetaObject.className(), &amp;constructorHelper&lt;T&gt; );\n    }\n\n    static QObject* createObject( const QByteArray&amp; className, QObject* parent = NULL )\n    {\n        Constructor constructor = constructors().value( className );\n        if ( constructor == NULL )\n            return NULL;\n        return (*constructor)( parent );\n    }\n\nprivate:\n    typedef QObject* (*Constructor)( QObject* parent );\n\n    template&lt;typename T&gt;\n    static QObject* constructorHelper( QObject* parent )\n    {\n        return new T( parent );\n    }\n\n    static QHash&lt;QByteArray, Constructor&gt;&amp; constructors()\n    {\n        static QHash&lt;QByteArray, Constructor&gt; instance;\n        return instance;\n    }\n};\n\n#endif // OBJECTFACTORY_H</code></pre>\n<p>下边是使用方法。todo ，这个东西应该写成单例模式的。</p>\n<pre><code class=\"cpp\">//使用方法\n    ObjectFactory fac;\n    fac.registerClass&lt;TestObject&gt;();\n    qDebug()&lt;&lt;&quot;begin-------------------------------&quot;&lt;&lt;endl;\n    TestObject* object = qobject_cast&lt;TestObject*&gt;(fac.createObject( &quot;TestObject&quot; , this));\n    object-&gt;setText(&quot;template factory&quot;);\n    qDebug()&lt;&lt;object-&gt;text()&lt;&lt;endl;</code></pre>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"元对象","path":"api/tags/元对象.json"},{"name":"反射","path":"api/tags/反射.json"}]}