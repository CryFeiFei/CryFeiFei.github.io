{"title":"Linux下使用inotify监控文件动作","slug":"linux-inotify","date":"2020-06-27T15:03:06.000Z","updated":"2020-06-28T12:23:51.823Z","comments":true,"path":"api/articles/linux-inotify.json","excerpt":null,"covers":null,"content":"<h2 id=\"Linux下使用inotify监控文件动作\"><a href=\"#Linux下使用inotify监控文件动作\" class=\"headerlink\" title=\"Linux下使用inotify监控文件动作\"></a>Linux下使用inotify监控文件动作</h2><h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>在日常应用中，常常会遇到以下场景，监控文件夹A，若文件夹中的B文件发生变化，则执行C命令。Linux下可以通过inotify完成该功能。<br>自从Linux kernel 2.6.13起，inotify以作为内核的一部份，同时需要glibc 2.4以上版本。</p>\n<h4 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h4><ul>\n<li><p>inotify_init() – 创建一个inotify实例</p>\n</li>\n<li><p>inotify_add_watch(int fd, const char *pathname, uint32_t mask) – 加入文件或目录到inotify进行监测</p>\n</li>\n<li><p>inotify_rm_watch(int fd, int wd) – 移除一个watcher</p>\n</li>\n</ul>\n<h4 id=\"相关结构\"><a href=\"#相关结构\" class=\"headerlink\" title=\"相关结构\"></a>相关结构</h4><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> inotify_event <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span>      wd<span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">/* Watch descriptor */</span>\n    uint32_t mask<span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">/* Mask of events */</span>\n    uint32_t cookie<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">/* Unique cookie associating related\n                                     events (for rename(2)) */</span>\n    uint32_t len<span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">/* Size of name field */</span>\n    <span class=\"token keyword\">char</span>     name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">/* Optional null-terminated name */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"3-Mask\"><a href=\"#3-Mask\" class=\"headerlink\" title=\"3 Mask\"></a>3 Mask</h4><p>适用于 inotify_add_watch mask 与 read 返回的inotify_event中mask</p>\n<table>\n<thead>\n<tr>\n<th>mask</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN_ACCESS</td>\n<td>文件被访问</td>\n</tr>\n<tr>\n<td>IN_ATTRIB</td>\n<td>文件属性发生变化</td>\n</tr>\n<tr>\n<td>IN_CLOSE_WRITE</td>\n<td>以write方式打开文件并关闭</td>\n</tr>\n<tr>\n<td>IN_CLOSE_NOWRITE</td>\n<td>以非write方式打开文件并关闭</td>\n</tr>\n<tr>\n<td>IN_CREATE</td>\n<td>文件或目录被创建</td>\n</tr>\n<tr>\n<td>IN_DELETE</td>\n<td>文件或目录被删除（被监测的文件夹A中B文件被删除）</td>\n</tr>\n<tr>\n<td>IN_DELETE_SELF</td>\n<td>被监测的文件或目录被删除（被监测的文件夹A被删除）</td>\n</tr>\n<tr>\n<td>IN_MODIFY</td>\n<td>文件被修改</td>\n</tr>\n<tr>\n<td>IN_MOVE_SELF</td>\n<td>被监测的文件或目录移动</td>\n</tr>\n<tr>\n<td>IN_MOVED_FROM</td>\n<td>文件移出被监测的目录</td>\n</tr>\n<tr>\n<td>IN_MOVED_TO</td>\n<td>文件移入被监测的目录</td>\n</tr>\n<tr>\n<td>IN_OPEN</td>\n<td>文件被打开</td>\n</tr>\n<tr>\n<td>上述flag的集合</td>\n<td></td>\n</tr>\n<tr>\n<td>IN_ALL_EVENTS</td>\n<td>以上所有flag的集合</td>\n</tr>\n<tr>\n<td>IN_MOVE</td>\n<td>IN_MOVED_TO</td>\n</tr>\n<tr>\n<td>IN_CLOSE</td>\n<td>IN_CLOSE_WRITE</td>\n</tr>\n<tr>\n<td>不常用的flag</td>\n<td></td>\n</tr>\n<tr>\n<td>IN_DONT_FOLLOW</td>\n<td>不follow符号链接 (since 2.6.15)</td>\n</tr>\n<tr>\n<td>IN_EXCL_UNLINK</td>\n<td>当文件从监测目中unlink后，则不再报告该文件的相关event，比如监控/tmp使用 (since 2.6.36)</td>\n</tr>\n<tr>\n<td>IN_MASK_ADD</td>\n<td>追打MASK到被监测的pathname</td>\n</tr>\n<tr>\n<td>IN_ONESHOT</td>\n<td>只监测一次</td>\n</tr>\n<tr>\n<td>IN_ONLYDIR</td>\n<td>只监测目录</td>\n</tr>\n</tbody></table>\n<p>仅由read返回</p>\n<table>\n<thead>\n<tr>\n<th>mask</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN_IGNORED</td>\n<td>inotify_rm_watch，文件被删除或者文件系统被umount</td>\n</tr>\n<tr>\n<td>IN_ISDIR</td>\n<td>发生事件的是一个目录</td>\n</tr>\n<tr>\n<td>IN_Q_OVERFLOW</td>\n<td>Event队列溢出</td>\n</tr>\n<tr>\n<td>IN_UNMOUNT</td>\n<td>文件系统unmount</td>\n</tr>\n</tbody></table>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>用途：监测指定文件或目录（或不指定则为当前目录）的一切动作。<br>使用：inotify </p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span>  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/inotify.h></span>  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span>  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;error.h></span>  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span>  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span>  </span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ERROR(text) error(1, errno, \"%s\", text)  </span>\n\n<span class=\"token keyword\">struct</span> EventMask <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">int</span>        flag<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>  \n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">freadsome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> size_t remain<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>file<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>remain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> remain<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n\n        remain <span class=\"token operator\">-</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>  \n        offset <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>target<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        target <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n        target <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n    EventMask event_masks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n           <span class=\"token punctuation\">{</span>IN_ACCESS        <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_ACCESS\"</span><span class=\"token punctuation\">}</span>        <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_ATTRIB        <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_ATTRIB\"</span><span class=\"token punctuation\">}</span>        <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_CLOSE_WRITE   <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_CLOSE_WRITE\"</span><span class=\"token punctuation\">}</span>   <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_CLOSE_NOWRITE <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_CLOSE_NOWRITE\"</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_CREATE        <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_CREATE\"</span><span class=\"token punctuation\">}</span>        <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_DELETE        <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_DELETE\"</span><span class=\"token punctuation\">}</span>        <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_DELETE_SELF   <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_DELETE_SELF\"</span><span class=\"token punctuation\">}</span>   <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_MODIFY        <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_MODIFY\"</span><span class=\"token punctuation\">}</span>        <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_MOVE_SELF     <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_MOVE_SELF\"</span><span class=\"token punctuation\">}</span>     <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_MOVED_FROM    <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_MOVED_FROM\"</span><span class=\"token punctuation\">}</span>    <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_MOVED_TO      <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_MOVED_TO\"</span><span class=\"token punctuation\">}</span>      <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_OPEN          <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_OPEN\"</span><span class=\"token punctuation\">}</span>          <span class=\"token punctuation\">,</span>    \n\n           <span class=\"token punctuation\">{</span>IN_DONT_FOLLOW   <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_DONT_FOLLOW\"</span><span class=\"token punctuation\">}</span>   <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_EXCL_UNLINK   <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_EXCL_UNLINK\"</span><span class=\"token punctuation\">}</span>   <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_MASK_ADD      <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_MASK_ADD\"</span><span class=\"token punctuation\">}</span>      <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_ONESHOT       <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_ONESHOT\"</span><span class=\"token punctuation\">}</span>       <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_ONLYDIR       <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_ONLYDIR\"</span><span class=\"token punctuation\">}</span>       <span class=\"token punctuation\">,</span>    \n\n           <span class=\"token punctuation\">{</span>IN_IGNORED       <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_IGNORED\"</span><span class=\"token punctuation\">}</span>       <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_ISDIR         <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_ISDIR\"</span><span class=\"token punctuation\">}</span>         <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_Q_OVERFLOW    <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_Q_OVERFLOW\"</span><span class=\"token punctuation\">}</span>    <span class=\"token punctuation\">,</span>    \n           <span class=\"token punctuation\">{</span>IN_UNMOUNT       <span class=\"token punctuation\">,</span> <span class=\"token string\">\"IN_UNMOUNT\"</span><span class=\"token punctuation\">}</span>       <span class=\"token punctuation\">,</span>    \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token keyword\">int</span> monitor <span class=\"token operator\">=</span> <span class=\"token function\">inotify_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> monitor <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token function\">ERROR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"monitor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n    <span class=\"token keyword\">int</span> watcher <span class=\"token operator\">=</span> <span class=\"token function\">inotify_add_watch</span><span class=\"token punctuation\">(</span>monitor<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> IN_ALL_EVENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> watcher  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token function\">ERROR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inotify_add_watch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n    FILE <span class=\"token operator\">*</span>monitor_file <span class=\"token operator\">=</span> <span class=\"token function\">fdopen</span><span class=\"token punctuation\">(</span>monitor<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">char</span> last_name<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token comment\" spellcheck=\"true\">/* event:inotify_event -> name:char[event.len] */</span>  \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        inotify_event event<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token function\">freadsome</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> monitor_file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token function\">ERROR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"freadsome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token function\">freadsome</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span> monitor_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FD: %d\\n\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>wd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>last_name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n\n        <span class=\"token comment\" spellcheck=\"true\">/* 显示event的mask的含义 */</span>  \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>event_masks<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>EventMask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">&amp;</span> event_masks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t%s\\n\"</span><span class=\"token punctuation\">,</span> event_masks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  </code></pre>\n<p>运行结果： vim 中 对监测目录中的 inotify.cc 进行保存</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token number\">4913</span>\n    IN_CREATE\n    IN_OPEN\n    IN_ATTRIB\n    IN_CLOSE_WRITE\n    IN_DELETE\ninotify<span class=\"token punctuation\">.</span>cc\n    IN_MOVED_FROM\ninotify<span class=\"token punctuation\">.</span>cc<span class=\"token operator\">~</span>\n    IN_MOVED_TO\ninotify<span class=\"token punctuation\">.</span>cc\n    IN_CREATE\n    IN_OPEN\n    IN_MODIFY\n    IN_CLOSE_WRITE\n    IN_ATTRIB\ninotify<span class=\"token punctuation\">.</span>cc<span class=\"token operator\">~</span>\n    IN_DELETE</code></pre>\n<p>可以看到，vim保存文件的流程为<br>创建一个4913文件用于检测vim对目录的控制权限<br>把inotify.cc更名为inotify.cc~<br>新建inotify.cc，并写入buffer<br>删除inotify.cc</p>\n<h1 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h1><p><a href=\"http://man7.org/linux/man-pages/man7/inotify.7.html\" target=\"_blank\" rel=\"noopener\" title=\"http://man7.org/linux/man-pages/man7/inotify.7.html\">http://man7.org/linux/man-pages/man7/inotify.7.html</a></p>\n","more":"<h2 id=\"Linux下使用inotify监控文件动作\"><a href=\"#Linux下使用inotify监控文件动作\" class=\"headerlink\" title=\"Linux下使用inotify监控文件动作\"></a>Linux下使用inotify监控文件动作</h2><h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>在日常应用中，常常会遇到以下场景，监控文件夹A，若文件夹中的B文件发生变化，则执行C命令。Linux下可以通过inotify完成该功能。<br>自从Linux kernel 2.6.13起，inotify以作为内核的一部份，同时需要glibc 2.4以上版本。</p>\n<h4 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h4><ul>\n<li><p>inotify_init() – 创建一个inotify实例</p>\n</li>\n<li><p>inotify_add_watch(int fd, const char *pathname, uint32_t mask) – 加入文件或目录到inotify进行监测</p>\n</li>\n<li><p>inotify_rm_watch(int fd, int wd) – 移除一个watcher</p>\n</li>\n</ul>\n<h4 id=\"相关结构\"><a href=\"#相关结构\" class=\"headerlink\" title=\"相关结构\"></a>相关结构</h4><pre><code class=\"cpp\">struct inotify_event {\n    int      wd;       /* Watch descriptor */\n    uint32_t mask;     /* Mask of events */\n    uint32_t cookie;   /* Unique cookie associating related\n                                     events (for rename(2)) */\n    uint32_t len;      /* Size of name field */\n    char     name[];   /* Optional null-terminated name */\n};\n</code></pre>\n<h4 id=\"3-Mask\"><a href=\"#3-Mask\" class=\"headerlink\" title=\"3 Mask\"></a>3 Mask</h4><p>适用于 inotify_add_watch mask 与 read 返回的inotify_event中mask</p>\n<table>\n<thead>\n<tr>\n<th>mask</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN_ACCESS</td>\n<td>文件被访问</td>\n</tr>\n<tr>\n<td>IN_ATTRIB</td>\n<td>文件属性发生变化</td>\n</tr>\n<tr>\n<td>IN_CLOSE_WRITE</td>\n<td>以write方式打开文件并关闭</td>\n</tr>\n<tr>\n<td>IN_CLOSE_NOWRITE</td>\n<td>以非write方式打开文件并关闭</td>\n</tr>\n<tr>\n<td>IN_CREATE</td>\n<td>文件或目录被创建</td>\n</tr>\n<tr>\n<td>IN_DELETE</td>\n<td>文件或目录被删除（被监测的文件夹A中B文件被删除）</td>\n</tr>\n<tr>\n<td>IN_DELETE_SELF</td>\n<td>被监测的文件或目录被删除（被监测的文件夹A被删除）</td>\n</tr>\n<tr>\n<td>IN_MODIFY</td>\n<td>文件被修改</td>\n</tr>\n<tr>\n<td>IN_MOVE_SELF</td>\n<td>被监测的文件或目录移动</td>\n</tr>\n<tr>\n<td>IN_MOVED_FROM</td>\n<td>文件移出被监测的目录</td>\n</tr>\n<tr>\n<td>IN_MOVED_TO</td>\n<td>文件移入被监测的目录</td>\n</tr>\n<tr>\n<td>IN_OPEN</td>\n<td>文件被打开</td>\n</tr>\n<tr>\n<td>上述flag的集合</td>\n<td></td>\n</tr>\n<tr>\n<td>IN_ALL_EVENTS</td>\n<td>以上所有flag的集合</td>\n</tr>\n<tr>\n<td>IN_MOVE</td>\n<td>IN_MOVED_TO</td>\n</tr>\n<tr>\n<td>IN_CLOSE</td>\n<td>IN_CLOSE_WRITE</td>\n</tr>\n<tr>\n<td>不常用的flag</td>\n<td></td>\n</tr>\n<tr>\n<td>IN_DONT_FOLLOW</td>\n<td>不follow符号链接 (since 2.6.15)</td>\n</tr>\n<tr>\n<td>IN_EXCL_UNLINK</td>\n<td>当文件从监测目中unlink后，则不再报告该文件的相关event，比如监控/tmp使用 (since 2.6.36)</td>\n</tr>\n<tr>\n<td>IN_MASK_ADD</td>\n<td>追打MASK到被监测的pathname</td>\n</tr>\n<tr>\n<td>IN_ONESHOT</td>\n<td>只监测一次</td>\n</tr>\n<tr>\n<td>IN_ONLYDIR</td>\n<td>只监测目录</td>\n</tr>\n</tbody></table>\n<p>仅由read返回</p>\n<table>\n<thead>\n<tr>\n<th>mask</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN_IGNORED</td>\n<td>inotify_rm_watch，文件被删除或者文件系统被umount</td>\n</tr>\n<tr>\n<td>IN_ISDIR</td>\n<td>发生事件的是一个目录</td>\n</tr>\n<tr>\n<td>IN_Q_OVERFLOW</td>\n<td>Event队列溢出</td>\n</tr>\n<tr>\n<td>IN_UNMOUNT</td>\n<td>文件系统unmount</td>\n</tr>\n</tbody></table>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>用途：监测指定文件或目录（或不指定则为当前目录）的一切动作。<br>使用：inotify </p>\n<pre><code class=\"c\">#include &lt;unistd.h&gt;  \n#include &lt;sys/inotify.h&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;error.h&gt;  \n#include &lt;errno.h&gt;  \n#include &lt;string.h&gt;  \n\n#define ERROR(text) error(1, errno, &quot;%s&quot;, text)  \n\nstruct EventMask {  \n    int        flag;  \n    const char *name;  \n\n};  \n\nint freadsome(void *dest, size_t remain, FILE *file)  \n{  \n    char *offset = (char*)dest;  \n    while (remain) {  \n        int n = fread(offset, 1, remain, file);  \n        if (n==0) {  \n            return -1;  \n        }  \n\n        remain -= n;  \n        offset += n;  \n    }  \n    return 0;  \n}  \n\nint main(int argc, char *argv[])  \n{  \n    const char *target;  \n    if (argc == 1) {  \n        target = &quot;.&quot;;  \n    } else {  \n        target = argv[1];  \n    }  \n\n    EventMask event_masks[] = {  \n           {IN_ACCESS        , &quot;IN_ACCESS&quot;}        ,    \n           {IN_ATTRIB        , &quot;IN_ATTRIB&quot;}        ,    \n           {IN_CLOSE_WRITE   , &quot;IN_CLOSE_WRITE&quot;}   ,    \n           {IN_CLOSE_NOWRITE , &quot;IN_CLOSE_NOWRITE&quot;} ,    \n           {IN_CREATE        , &quot;IN_CREATE&quot;}        ,    \n           {IN_DELETE        , &quot;IN_DELETE&quot;}        ,    \n           {IN_DELETE_SELF   , &quot;IN_DELETE_SELF&quot;}   ,    \n           {IN_MODIFY        , &quot;IN_MODIFY&quot;}        ,    \n           {IN_MOVE_SELF     , &quot;IN_MOVE_SELF&quot;}     ,    \n           {IN_MOVED_FROM    , &quot;IN_MOVED_FROM&quot;}    ,    \n           {IN_MOVED_TO      , &quot;IN_MOVED_TO&quot;}      ,    \n           {IN_OPEN          , &quot;IN_OPEN&quot;}          ,    \n\n           {IN_DONT_FOLLOW   , &quot;IN_DONT_FOLLOW&quot;}   ,    \n           {IN_EXCL_UNLINK   , &quot;IN_EXCL_UNLINK&quot;}   ,    \n           {IN_MASK_ADD      , &quot;IN_MASK_ADD&quot;}      ,    \n           {IN_ONESHOT       , &quot;IN_ONESHOT&quot;}       ,    \n           {IN_ONLYDIR       , &quot;IN_ONLYDIR&quot;}       ,    \n\n           {IN_IGNORED       , &quot;IN_IGNORED&quot;}       ,    \n           {IN_ISDIR         , &quot;IN_ISDIR&quot;}         ,    \n           {IN_Q_OVERFLOW    , &quot;IN_Q_OVERFLOW&quot;}    ,    \n           {IN_UNMOUNT       , &quot;IN_UNMOUNT&quot;}       ,    \n    };  \n\n    int monitor = inotify_init();  \n    if ( -1 == monitor ) {  \n        ERROR(&quot;monitor&quot;);  \n    }  \n\n    int watcher = inotify_add_watch(monitor, target, IN_ALL_EVENTS);  \n    if ( -1 == watcher  ) {  \n        ERROR(&quot;inotify_add_watch&quot;);  \n    }  \n\n    FILE *monitor_file = fdopen(monitor, &quot;r&quot;);  \n    char last_name[1024];  \n    char name[1024];  \n\n    /* event:inotify_event -&gt; name:char[event.len] */  \n    while (true) {  \n        inotify_event event;  \n        if ( -1 == freadsome(&amp;event, sizeof(event), monitor_file) ) {  \n            ERROR(&quot;freadsome&quot;);  \n        }  \n        if (event.len) {  \n            freadsome(name, event.len, monitor_file);  \n        } else {  \n            sprintf(name, &quot;FD: %d\\n&quot;, event.wd);  \n        }  \n\n        if (strcmp(name, last_name) != 0) {  \n            puts(name);  \n            strcpy(last_name, name);  \n        }  \n\n        /* 显示event的mask的含义 */  \n        for (int i=0; i&lt;sizeof(event_masks)/sizeof(EventMask); ++i) {  \n            if (event.mask &amp; event_masks[i].flag) {  \n                printf(&quot;\\t%s\\n&quot;, event_masks[i].name);  \n            }  \n        }  \n    }  \n    return 0;  \n}  </code></pre>\n<p>运行结果： vim 中 对监测目录中的 inotify.cc 进行保存</p>\n<pre><code class=\"c\">4913\n    IN_CREATE\n    IN_OPEN\n    IN_ATTRIB\n    IN_CLOSE_WRITE\n    IN_DELETE\ninotify.cc\n    IN_MOVED_FROM\ninotify.cc~\n    IN_MOVED_TO\ninotify.cc\n    IN_CREATE\n    IN_OPEN\n    IN_MODIFY\n    IN_CLOSE_WRITE\n    IN_ATTRIB\ninotify.cc~\n    IN_DELETE</code></pre>\n<p>可以看到，vim保存文件的流程为<br>创建一个4913文件用于检测vim对目录的控制权限<br>把inotify.cc更名为inotify.cc~<br>新建inotify.cc，并写入buffer<br>删除inotify.cc</p>\n<h1 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h1><p><a href=\"http://man7.org/linux/man-pages/man7/inotify.7.html\" target=\"_blank\" rel=\"noopener\" title=\"http://man7.org/linux/man-pages/man7/inotify.7.html\">http://man7.org/linux/man-pages/man7/inotify.7.html</a></p>\n","categories":[],"tags":[{"name":"Linux","path":"api/tags/Linux.json"},{"name":"inotify","path":"api/tags/inotify.json"}]}