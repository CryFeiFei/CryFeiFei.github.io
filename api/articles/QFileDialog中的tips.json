{"title":"QFileDialog中的tips","slug":"QFileDialog中的tips","date":"2020-06-26T03:56:25.000Z","updated":"2020-06-26T03:57:36.277Z","comments":true,"path":"api/articles/QFileDialog中的tips.json","excerpt":null,"covers":null,"content":"<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>最近看QFileDialog的实现比较多，也对比了几家操作系统厂商跟Qt的QFileDialog中的实现，也自己造了个小轮子。也学到了一些东西，特意来分享下。</p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p>可以将类型诸如这种的格式</p>\n<pre><code>WPS文字 文件(*.wps)  提取成这种 *.wps</code></pre><p>本来打算自己写正则表达式的，生怕自己写的效率比较低，就从QFileDialog的源码中扣取出来了。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//from QFileDialog</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>qt_file_dialog_filter_reg_exp <span class=\"token operator\">=</span>\n<span class=\"token string\">\"^(.*)\\\\(([a-zA-Z0-9_.*? +;#\\\\-\\\\[\\\\]@\\\\{\\\\}/!&lt;>\\\\$%&amp;=^~:\\\\|]*)\\\\)$\"</span><span class=\"token punctuation\">;</span>\nQStringList <span class=\"token function\">qt_clean_filter_list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QString <span class=\"token operator\">&amp;</span>filter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QRegExp <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>QString<span class=\"token operator\">::</span><span class=\"token function\">fromLatin1</span><span class=\"token punctuation\">(</span>qt_file_dialog_filter_reg_exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QString f <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> regexp<span class=\"token punctuation\">.</span><span class=\"token function\">indexIn</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        f <span class=\"token operator\">=</span> regexp<span class=\"token punctuation\">.</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token function\">QLatin1Char</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QString<span class=\"token operator\">::</span>SkipEmptyParts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"QFileInfo的新奇使用方法\"><a href=\"#QFileInfo的新奇使用方法\" class=\"headerlink\" title=\"QFileInfo的新奇使用方法\"></a>QFileInfo的新奇使用方法</h3><p>实际上我又遇到了一个源码中关于QFileInfo一个原来没有用过的用法。</p>\n<p>直接将</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>wps </code></pre>\n<p>这种字符当做QString放进了QFileInfo来获取其basename（文件名）跟 suffix（后缀），或者使用其它的函数。一般我都是传个文件路径的，没想到还能用这种方法解析字符串。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//这时候可以用QFileInfo把一些复杂的字符串的什么前缀，后缀名全都解析出来了，包括*.tar.gz这种复杂的，QFileInfo都有函数来提取</span>\nQFileInfo <span class=\"token function\">fileInfo</span><span class=\"token punctuation\">(</span><span class=\"token function\">QString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.wps\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>我本来想自己解析这个字符串的，发现QFileDialog的源码中还有这种用法，真的很神奇。</p>\n<h3 id=\"文件管理器的吐槽\"><a href=\"#文件管理器的吐槽\" class=\"headerlink\" title=\"文件管理器的吐槽\"></a>文件管理器的吐槽</h3><p>最近看了看KDE的dolphin文件管理器代码的实现，还有深度的文件管理器的实现，还有一些乱七八糟第三方的，还有Qt自带的QFileDialog。就属KDE的dolphin做的最厉害，交互最好，优化的最好。</p>\n<p>深度的文件管理器跟Qt自带QFileDialog遇到复杂的网络文件以及延迟都会卡死，也没有任何交互。QFileDialog我理解这个东西一开始就不是给网络文件用的，卡死我还是可以接受的，但是深度作为操作系统厂商做成这样就有点不太合适了。大概扫了下源码，也跟QFileDialog一样重写了model，model这里交互还是得好好优化下啊。这就是自己造轮子的坏处。</p>\n<p>从一个开发的角度，简单的吐槽一下，反正给他们官方反馈了。因为deepin的文件管理器的bug实在太多了=。=。</p>\n<p>嗯，KDE大法好！话说，一开始的设计可以从借鉴（copy）KDE的实现嘛，都这么多年了…</p>\n<p>造轮子不要对自己太自信…实时上我自己造的小轮子也有这个问题=。=。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>这是我前年的时候看各个厂商以及调研QFileDialog总结出来一点小结论。去年年底我又把这部分捡起来了。现在已经优化到加载千万级别的数据，界面不会卡住的地步了。有时间把这部分东西写出来</p>\n","more":"<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>最近看QFileDialog的实现比较多，也对比了几家操作系统厂商跟Qt的QFileDialog中的实现，也自己造了个小轮子。也学到了一些东西，特意来分享下。</p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p>可以将类型诸如这种的格式</p>\n<pre><code>WPS文字 文件(*.wps)  提取成这种 *.wps</code></pre><p>本来打算自己写正则表达式的，生怕自己写的效率比较低，就从QFileDialog的源码中扣取出来了。</p>\n<pre><code class=\"cpp\">//from QFileDialog\nconst char *qt_file_dialog_filter_reg_exp =\n&quot;^(.*)\\\\(([a-zA-Z0-9_.*? +;#\\\\-\\\\[\\\\]@\\\\{\\\\}/!&lt;&gt;\\\\$%&amp;=^~:\\\\|]*)\\\\)$&quot;;\nQStringList qt_clean_filter_list(const QString &amp;filter)\n{\n    QRegExp regexp(QString::fromLatin1(qt_file_dialog_filter_reg_exp));\n    QString f = filter;\n    int i = regexp.indexIn(f);\n    if (i &gt;= 0)\n        f = regexp.cap(2);\n    return f.split(QLatin1Char(&#39; &#39;), QString::SkipEmptyParts);\n}</code></pre>\n<h3 id=\"QFileInfo的新奇使用方法\"><a href=\"#QFileInfo的新奇使用方法\" class=\"headerlink\" title=\"QFileInfo的新奇使用方法\"></a>QFileInfo的新奇使用方法</h3><p>实际上我又遇到了一个源码中关于QFileInfo一个原来没有用过的用法。</p>\n<p>直接将</p>\n<pre><code class=\"cpp\">*.wps </code></pre>\n<p>这种字符当做QString放进了QFileInfo来获取其basename（文件名）跟 suffix（后缀），或者使用其它的函数。一般我都是传个文件路径的，没想到还能用这种方法解析字符串。</p>\n<pre><code class=\"cpp\">//这时候可以用QFileInfo把一些复杂的字符串的什么前缀，后缀名全都解析出来了，包括*.tar.gz这种复杂的，QFileInfo都有函数来提取\nQFileInfo fileInfo(QString(&quot;*.wps&quot;));</code></pre>\n<p>我本来想自己解析这个字符串的，发现QFileDialog的源码中还有这种用法，真的很神奇。</p>\n<h3 id=\"文件管理器的吐槽\"><a href=\"#文件管理器的吐槽\" class=\"headerlink\" title=\"文件管理器的吐槽\"></a>文件管理器的吐槽</h3><p>最近看了看KDE的dolphin文件管理器代码的实现，还有深度的文件管理器的实现，还有一些乱七八糟第三方的，还有Qt自带的QFileDialog。就属KDE的dolphin做的最厉害，交互最好，优化的最好。</p>\n<p>深度的文件管理器跟Qt自带QFileDialog遇到复杂的网络文件以及延迟都会卡死，也没有任何交互。QFileDialog我理解这个东西一开始就不是给网络文件用的，卡死我还是可以接受的，但是深度作为操作系统厂商做成这样就有点不太合适了。大概扫了下源码，也跟QFileDialog一样重写了model，model这里交互还是得好好优化下啊。这就是自己造轮子的坏处。</p>\n<p>从一个开发的角度，简单的吐槽一下，反正给他们官方反馈了。因为deepin的文件管理器的bug实在太多了=。=。</p>\n<p>嗯，KDE大法好！话说，一开始的设计可以从借鉴（copy）KDE的实现嘛，都这么多年了…</p>\n<p>造轮子不要对自己太自信…实时上我自己造的小轮子也有这个问题=。=。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>这是我前年的时候看各个厂商以及调研QFileDialog总结出来一点小结论。去年年底我又把这部分捡起来了。现在已经优化到加载千万级别的数据，界面不会卡住的地步了。有时间把这部分东西写出来</p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt源码","path":"api/tags/Qt源码.json"},{"name":"QFileDialog","path":"api/tags/QFileDialog.json"}]}