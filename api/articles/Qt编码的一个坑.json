{"title":"Qt编码的一个坑","slug":"Qt编码的一个坑","date":"2020-06-27T10:16:07.000Z","updated":"2020-06-27T10:16:56.911Z","comments":true,"path":"api/articles/Qt编码的一个坑.json","excerpt":null,"covers":null,"content":"<h1 id=\"编码编码\"><a href=\"#编码编码\" class=\"headerlink\" title=\"编码编码\"></a>编码编码</h1><p>虽说上班这么多年了，昨天修复一个bug的时候还是被屎一样的代码给坑了</p>\n<p>先说逻辑<br>业务本质是想把 Unicode编码转成GBK编码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">    QTextCodec<span class=\"token operator\">*</span> codec <span class=\"token operator\">=</span> QTextCodec<span class=\"token operator\">::</span><span class=\"token function\">codecForName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ushort ss <span class=\"token operator\">=</span> <span class=\"token number\">23435</span><span class=\"token punctuation\">;</span>\n    QString strUn <span class=\"token operator\">=</span> QString<span class=\"token operator\">::</span><span class=\"token function\">fromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ss<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>codec <span class=\"token operator\">&amp;&amp;</span> codec<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">canEncode</span><span class=\"token punctuation\">(</span>strUn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        QString gStr <span class=\"token operator\">=</span> codec<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">fromUnicode</span><span class=\"token punctuation\">(</span>strUn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token operator\">::</span>string <span class=\"token operator\">=</span> gStr<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在某些unix环境中，这个gStr就已经是空的了。<br>原因是 codec-&gt;fromUnicode(strUn); 返回的是QByteArray。</p>\n<p>QByteArray转QString是调用的Qt的fromAscii_helper这个函数，也就是本次是gdk又强转了一次latin的编码，导致丢数据。</p>\n<p>Qt中的转化代码是走的这里。 敲重点，目前QByteArray是gbk编码，但是这样强转会当做Ascii来解析，所以出现了丢数据。<br>Qt源码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">QString<span class=\"token operator\">::</span>Data <span class=\"token operator\">*</span>QString<span class=\"token operator\">::</span><span class=\"token function\">fromAscii_helper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>具体到WPS的某个功能的话我就懒得吐槽了，反正这么多年windows也一直没事儿。逃)</p>\n<h1 id=\"toStdString\"><a href=\"#toStdString\" class=\"headerlink\" title=\"toStdString\"></a>toStdString</h1><p>这个函数也慎用，不管你是啥编码的QString，这样导出最后也是会当做ascii来转，也会出现乱码或者丢数据，慎用慎用！</p>\n","more":"<h1 id=\"编码编码\"><a href=\"#编码编码\" class=\"headerlink\" title=\"编码编码\"></a>编码编码</h1><p>虽说上班这么多年了，昨天修复一个bug的时候还是被屎一样的代码给坑了</p>\n<p>先说逻辑<br>业务本质是想把 Unicode编码转成GBK编码</p>\n<pre><code class=\"cpp\">    QTextCodec* codec = QTextCodec::codecForName(&quot;GBK&quot;);\n    ushort ss = 23435;\n    QString strUn = QString::fromUtf16(&amp;ss, 1);\n\n    if (codec &amp;&amp; codec-&gt;canEncode(strUn))\n    {\n        QString gStr = codec-&gt;fromUnicode(strUn);\n        std::string = gStr.toStdString();\n    }\n</code></pre>\n<p>在某些unix环境中，这个gStr就已经是空的了。<br>原因是 codec-&gt;fromUnicode(strUn); 返回的是QByteArray。</p>\n<p>QByteArray转QString是调用的Qt的fromAscii_helper这个函数，也就是本次是gdk又强转了一次latin的编码，导致丢数据。</p>\n<p>Qt中的转化代码是走的这里。 敲重点，目前QByteArray是gbk编码，但是这样强转会当做Ascii来解析，所以出现了丢数据。<br>Qt源码</p>\n<pre><code class=\"cpp\">QString::Data *QString::fromAscii_helper(const char *str, int size)\n</code></pre>\n<p>具体到WPS的某个功能的话我就懒得吐槽了，反正这么多年windows也一直没事儿。逃)</p>\n<h1 id=\"toStdString\"><a href=\"#toStdString\" class=\"headerlink\" title=\"toStdString\"></a>toStdString</h1><p>这个函数也慎用，不管你是啥编码的QString，这样导出最后也是会当做ascii来转，也会出现乱码或者丢数据，慎用慎用！</p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"编码","path":"api/tags/编码.json"}]}