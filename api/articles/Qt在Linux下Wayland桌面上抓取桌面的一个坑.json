{"title":"Qt在Linux下Wayland桌面上抓取桌面的一个坑","slug":"Qt在Linux下Wayland桌面上抓取桌面的一个坑","date":"2020-06-27T09:57:10.000Z","updated":"2020-06-27T10:00:00.582Z","comments":true,"path":"api/articles/Qt在Linux下Wayland桌面上抓取桌面的一个坑.json","excerpt":null,"covers":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近WPS在适配了下Wayland的桌面环境，不得不说Gnome下的wayland比KDE的wayland的要稳定的多，然而，还是遇到了一些小坑，这里记录下。</p>\n<blockquote>\n<p>Wayland只是一个协议（Protocol），就像X Window当前的协议——X11一样，它只定义了如何与内核通讯、如何与Client通讯，具体的策略，依然是交给开发者自己。所以Wayland依然 是贯彻“提供机制，而非策略”的Unix程序。</p>\n</blockquote>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>先说问题，我这边发现调用Qt的抓屏函数<code>screen-&gt;grabWindow</code>，发现截图出来是黑的。具体表现就是WPS的截图功能无效；</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>由于安全原因，Wayland下不支持非系统的软件截桌面的图</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>但是我这边看过一个开源的截图工具，在wayland下的解决方案是调用系统的<br><a href=\"https://github.com/lupoDharkael/flameshot/blob/b0326bcb6cb5ed5048e5574c682fce75cbfa7bbe/src/utils/screengrabber.cpp#L47\" target=\"_blank\" rel=\"noopener\">https://github.com/lupoDharkael/flameshot/blob/b0326bcb6cb5ed5048e5574c682fce75cbfa7bbe/src/utils/screengrabber.cpp#L47</a></p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> Q_OS_LINUX</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_info<span class=\"token punctuation\">.</span><span class=\"token function\">waylandDectected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QPixmap res<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// handle screenshot based on DE</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_info<span class=\"token punctuation\">.</span><span class=\"token function\">windowManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> DesktopInfo<span class=\"token operator\">::</span>GNOME<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// https://github.com/GNOME/gnome-shell/blob/695bfb96160033be55cfb5ac41c121998f98c328/data/org.gnome.Shell.Screenshot.xml</span>\n            QString path <span class=\"token operator\">=</span> <span class=\"token function\">FileNameHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateAbsolutePath</span><span class=\"token punctuation\">(</span>QDir<span class=\"token operator\">::</span><span class=\"token function\">tempPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">;</span>\n            QDBusInterface <span class=\"token function\">gnomeInterface</span><span class=\"token punctuation\">(</span><span class=\"token function\">QStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.gnome.Shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                          <span class=\"token function\">QStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/org/gnome/Shell/Screenshot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                          <span class=\"token function\">QStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.gnome.Shell.Screenshot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            QDBusReply<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> reply <span class=\"token operator\">=</span> gnomeInterface<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Screenshot\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res <span class=\"token operator\">=</span> <span class=\"token function\">QPixmap</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                ok <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">case</span> DesktopInfo<span class=\"token operator\">::</span>KDE<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// https://github.com/KDE/spectacle/blob/517a7baf46a4ca0a45f32fd3f2b1b7210b180134/src/PlatformBackends/KWinWaylandImageGrabber.cpp#L145</span>\n            QDBusInterface <span class=\"token function\">kwinInterface</span><span class=\"token punctuation\">(</span><span class=\"token function\">QStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.kde.KWin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                         <span class=\"token function\">QStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Screenshot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                         <span class=\"token function\">QStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.kde.kwin.Screenshot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            QDBusReply<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> reply <span class=\"token operator\">=</span> kwinInterface<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"screenshotFullscreen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">QPixmap</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            ok <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SystemNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">tr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to capture screen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近WPS在适配了下Wayland的桌面环境，不得不说Gnome下的wayland比KDE的wayland的要稳定的多，然而，还是遇到了一些小坑，这里记录下。</p>\n<blockquote>\n<p>Wayland只是一个协议（Protocol），就像X Window当前的协议——X11一样，它只定义了如何与内核通讯、如何与Client通讯，具体的策略，依然是交给开发者自己。所以Wayland依然 是贯彻“提供机制，而非策略”的Unix程序。</p>\n</blockquote>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>先说问题，我这边发现调用Qt的抓屏函数<code>screen-&gt;grabWindow</code>，发现截图出来是黑的。具体表现就是WPS的截图功能无效；</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>由于安全原因，Wayland下不支持非系统的软件截桌面的图</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>但是我这边看过一个开源的截图工具，在wayland下的解决方案是调用系统的<br><a href=\"https://github.com/lupoDharkael/flameshot/blob/b0326bcb6cb5ed5048e5574c682fce75cbfa7bbe/src/utils/screengrabber.cpp#L47\" target=\"_blank\" rel=\"noopener\">https://github.com/lupoDharkael/flameshot/blob/b0326bcb6cb5ed5048e5574c682fce75cbfa7bbe/src/utils/screengrabber.cpp#L47</a></p>\n<pre><code class=\"cpp\">#ifdef Q_OS_LINUX\n    if(m_info.waylandDectected()) {\n        QPixmap res;\n        // handle screenshot based on DE\n        switch (m_info.windowManager()) {\n        case DesktopInfo::GNOME: {\n            // https://github.com/GNOME/gnome-shell/blob/695bfb96160033be55cfb5ac41c121998f98c328/data/org.gnome.Shell.Screenshot.xml\n            QString path = FileNameHandler().generateAbsolutePath(QDir::tempPath()) + &quot;.png&quot;;\n            QDBusInterface gnomeInterface(QStringLiteral(&quot;org.gnome.Shell&quot;),\n                                          QStringLiteral(&quot;/org/gnome/Shell/Screenshot&quot;),\n                                          QStringLiteral(&quot;org.gnome.Shell.Screenshot&quot;));\n            QDBusReply&lt;bool&gt; reply = gnomeInterface.call(&quot;Screenshot&quot;, false, false, path);\n            if (reply.value()) {\n                res = QPixmap(path);\n            } else {\n                ok = false;\n            }\n            break;\n        } case DesktopInfo::KDE: {\n            // https://github.com/KDE/spectacle/blob/517a7baf46a4ca0a45f32fd3f2b1b7210b180134/src/PlatformBackends/KWinWaylandImageGrabber.cpp#L145\n            QDBusInterface kwinInterface(QStringLiteral(&quot;org.kde.KWin&quot;),\n                                         QStringLiteral(&quot;/Screenshot&quot;),\n                                         QStringLiteral(&quot;org.kde.kwin.Screenshot&quot;));\n            QDBusReply&lt;QString&gt; reply = kwinInterface.call(&quot;screenshotFullscreen&quot;);\n            res = QPixmap(reply.value());\n            break;\n        } default:\n            ok = false;\n            break;\n        }\n        if (!ok) {\n            SystemNotification().sendMessage(tr(&quot;Unable to capture screen&quot;));\n        }\n        return res;\n    }\n#endif</code></pre>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Linux","path":"api/tags/Linux.json"},{"name":"Wayland","path":"api/tags/Wayland.json"}]}