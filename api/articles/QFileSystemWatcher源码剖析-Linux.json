{"title":"QFileSystemWatcher源码剖析(Linux)","slug":"QFileSystemWatcher源码剖析-Linux","date":"2020-06-27T04:25:45.000Z","updated":"2020-06-27T04:37:37.292Z","comments":true,"path":"api/articles/QFileSystemWatcher源码剖析-Linux.json","excerpt":null,"covers":null,"content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>QFileSystemWatcher的作用是监视本地文件夹的变化以及文件的变化。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>QFileSystemWatcher的实现类是QFileSystemWatcherPrivate。 其中QFileSystemWatcherPrivate中的关键成员变量QFileSystemWatcherEngine用于监视目录以及文件的变化，发送信号给QFileystemWatcher。其中QFileSystemWatcherEngine派生了三个类。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">QFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QThread</code></pre>\n<p>其派生的子类三种类型分别为</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 这个用于监控Dir的变化</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QDnotifyFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n\n<span class=\"token comment\" spellcheck=\"true\">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QPollingFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n\n<span class=\"token comment\" spellcheck=\"true\">// 这个用于检测文件类型的变化</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QInotifyFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine</code></pre>\n<h2 id=\"QInotifyFileSystemWatcherEngine\"><a href=\"#QInotifyFileSystemWatcherEngine\" class=\"headerlink\" title=\"QInotifyFileSystemWatcherEngine\"></a>QInotifyFileSystemWatcherEngine</h2><p>QInotifyFileSystemWatcherEngine用于监视文件的变化。</p>\n<p>// 太长可以忽略，这是详细实现</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//media/zhangpf/workspace1/Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/corelib/io/qfilesystemwatcher_inotify_p.h</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"qfilesystemwatcher_p.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> QT_NO_FILESYSTEMWATCHER</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;qhash.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;qmutex.h></span></span>\nQT_BEGIN_NAMESPACE\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QInotifyFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">QInotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> QInotifyFileSystemWatcherEngine <span class=\"token operator\">*</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//单例模式</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList <span class=\"token function\">addPaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList <span class=\"token function\">removePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> Q_SLOTS<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">readFromInotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">QInotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> inotifyFd<span class=\"token punctuation\">;</span>\n    QMutex mutex<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pathToID<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> QString<span class=\"token operator\">></span> idToPath<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nQT_END_NAMESPACE\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\" spellcheck=\"true\">// QT_NO_FILESYSTEMWATCHER</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\" spellcheck=\"true\">// QFILESYSTEMWATCHER_INOTIFY_P_H</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// cpp</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/inotify.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\nQT_BEGIN_NAMESPACE\nQInotifyFileSystemWatcherEngine <span class=\"token operator\">*</span>QInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> IN_CLOEXEC</span>\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">inotify_init1</span><span class=\"token punctuation\">(</span>IN_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fd <span class=\"token operator\">=</span> <span class=\"token function\">inotify_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> F_SETFD<span class=\"token punctuation\">,</span> FD_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QInotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">QInotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">inotifyFd</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> F_SETFD<span class=\"token punctuation\">,</span> FD_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">QInotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> pathToID<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">inotify_rm_watch</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>id <span class=\"token operator\">:</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QSocketNotifier <span class=\"token function\">sn</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> QSocketNotifier<span class=\"token operator\">::</span>Read<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//通过socket来监视文件的变化，替代thread一个很好的方式</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sn<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">activated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">readFromInotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQStringList QInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">addPaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span>\n                                                      QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span>\n                                                      QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList p <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">;</span>\n    QMutableListIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QString path <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QFileInfo <span class=\"token function\">fi</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> isDir <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">isDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> wd <span class=\"token operator\">=</span> <span class=\"token function\">inotify_add_watch</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span>\n                                   QFile<span class=\"token operator\">::</span><span class=\"token function\">encodeName</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                   <span class=\"token punctuation\">(</span>isDir\n                                    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>\n                                       <span class=\"token operator\">|</span> IN_ATTRIB\n                                       <span class=\"token operator\">|</span> IN_MOVE\n                                       <span class=\"token operator\">|</span> IN_CREATE\n                                       <span class=\"token operator\">|</span> IN_DELETE\n                                       <span class=\"token operator\">|</span> IN_DELETE_SELF\n                                       <span class=\"token punctuation\">)</span>\n                                    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>\n                                       <span class=\"token operator\">|</span> IN_ATTRIB\n                                       <span class=\"token operator\">|</span> IN_MODIFY\n                                       <span class=\"token operator\">|</span> IN_MOVE\n                                       <span class=\"token operator\">|</span> IN_MOVE_SELF\n                                       <span class=\"token operator\">|</span> IN_DELETE_SELF\n                                       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wd <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QInotifyFileSystemWatcherEngine::addPaths: inotify_add_watch failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> isDir <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>wd <span class=\"token operator\">:</span> wd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        pathToID<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        idToPath<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQStringList QInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">removePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span>\n                                                         QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span>\n                                                         QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList p <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">;</span>\n    QMutableListIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QString path <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> pathToID<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QString x <span class=\"token operator\">=</span> idToPath<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">!=</span> path<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> wd <span class=\"token operator\">=</span> id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>id <span class=\"token operator\">:</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// qDebug() &lt;&lt; \"removing watch for path\" &lt;&lt; path &lt;&lt; \"wd\" &lt;&lt; wd;</span>\n        <span class=\"token function\">inotify_rm_watch</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> wd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QInotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">readFromInotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//主要是通过unix库函数来获取文件对应的详细信息。再跟addpath实现中缓存下来的信息做对比，来检测文件的变化。</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// qDebug() &lt;&lt; \"QInotifyFileSystemWatcherEngine::readFromInotify\";</span>\n    <span class=\"token keyword\">int</span> buffSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> FIONREAD<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>buffSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QVarLengthArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token operator\">></span> <span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buffSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buffSize <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>at <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> at <span class=\"token operator\">+</span> buffSize<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> inotify_event <span class=\"token operator\">*</span><span class=\"token operator\">></span> eventForId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>at <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        inotify_event <span class=\"token operator\">*</span>event <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span>inotify_event <span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventForId<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span>wd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            eventForId<span class=\"token punctuation\">[</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span>wd<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> event<span class=\"token operator\">-</span><span class=\"token operator\">></span>mask<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            eventForId<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span>wd<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        at <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>inotify_event<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> event<span class=\"token operator\">-</span><span class=\"token operator\">></span>len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> inotify_event <span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator it <span class=\"token operator\">=</span> eventForId<span class=\"token punctuation\">.</span><span class=\"token function\">constBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> eventForId<span class=\"token punctuation\">.</span><span class=\"token function\">constEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> inotify_event <span class=\"token operator\">&amp;</span>event <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// qDebug() &lt;&lt; \"inotify event, wd\" &lt;&lt; event.wd &lt;&lt; \"mask\" &lt;&lt; hex &lt;&lt; event.mask;</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>wd<span class=\"token punctuation\">;</span>\n        QString path <span class=\"token operator\">=</span> idToPath<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// perhaps a directory?</span>\n            id <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>id<span class=\"token punctuation\">;</span>\n            path <span class=\"token operator\">=</span> idToPath<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// qDebug() &lt;&lt; \"event for path\" &lt;&lt; path;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>IN_DELETE_SELF <span class=\"token operator\">|</span> IN_MOVE_SELF <span class=\"token operator\">|</span> IN_UNMOUNT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pathToID<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            idToPath<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">inotify_rm_watch</span><span class=\"token punctuation\">(</span>inotifyFd<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>wd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                emit <span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                emit <span class=\"token function\">fileChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                emit <span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                emit <span class=\"token function\">fileChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nQT_END_NAMESPACE\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\" spellcheck=\"true\">// QT_NO_FILESYSTEMWATCHER</span></code></pre>\n<p>这是一个单例模式，里边的核心代码其实就是讲的是Inotify相关的函数。其中的关键的点，我已经打上备注。这个类中的主要实现是Linux下的Inotify的使用相关。</p>\n<h2 id=\"Inotify\"><a href=\"#Inotify\" class=\"headerlink\" title=\"Inotify\"></a>Inotify</h2><p>Inotify简单的来讲是在Linux下监视文件与文件夹的相关机制，本来想自己写这一部分教程的，可是有一篇文章写的太好了，忍不住给大家分享了。<br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-inotify/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/linux/l-inotify/</a> 看完这一篇文章之后我觉得你对Linux下如何监视文件应该有了解了，甚至可以自己封装一个类给大家用。</p>\n<h1 id=\"文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine\"><a href=\"#文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine\" class=\"headerlink\" title=\"文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine\"></a>文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine</h1><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">QDnotifyFileSystemWatcherEngine</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QFileSystemWatcherEngine\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">QDnotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> QDnotifyFileSystemWatcherEngine <span class=\"token operator\">*</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList <span class=\"token function\">addPaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList <span class=\"token function\">removePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> Q_SLOTS<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">//这个结构体比较关键</span>\n    <span class=\"token keyword\">struct</span> Directory <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">fd</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parentFd</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isMonitored</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Directory <span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">path</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">fd</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">parentFd</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>parentFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">isMonitored</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>isMonitored<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">files</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        QString path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> parentFd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> isMonitored<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//这个结构体也比较关键</span>\n        <span class=\"token keyword\">struct</span> File <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> File <span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">path</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>ownerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>groupId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>permissions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">lastWrite</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>lastWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            QString path<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> <span class=\"token function\">updateInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            uint ownerId<span class=\"token punctuation\">;</span>\n            uint groupId<span class=\"token punctuation\">;</span>\n            QFile<span class=\"token operator\">::</span>Permissions permissions<span class=\"token punctuation\">;</span>\n            QDateTime lastWrite<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        QList<span class=\"token operator\">&lt;</span>File<span class=\"token operator\">></span> files<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">QDnotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QMutex mutex<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span>QString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pathToFD<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Directory<span class=\"token operator\">></span> fdToDirectory<span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> parentToFD<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//cpp</span>\nQDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token function\">QDnotifySignalThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span> <span class=\"token function\">isExecing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qt_safe_pipe</span><span class=\"token punctuation\">(</span>qfswd_fileChanged_pipe<span class=\"token punctuation\">,</span> O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> sigaction oldAction<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> sigaction action<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>action<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    action<span class=\"token punctuation\">.</span>sa_sigaction <span class=\"token operator\">=</span> qfswd_sigio_monitor<span class=\"token punctuation\">;</span>\n    action<span class=\"token punctuation\">.</span>sa_flags <span class=\"token operator\">=</span> SA_SIGINFO<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">::</span><span class=\"token function\">sigaction</span><span class=\"token punctuation\">(</span>SIGIO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>action<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oldAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>oldAction<span class=\"token punctuation\">.</span>sa_flags <span class=\"token operator\">&amp;</span> SA_SIGINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        qfswd_old_sigio_handler <span class=\"token operator\">=</span> oldAction<span class=\"token punctuation\">.</span>sa_handler<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        qfswd_old_sigio_action <span class=\"token operator\">=</span> oldAction<span class=\"token punctuation\">.</span>sa_sigaction<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">QDnotifySignalThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QThread<span class=\"token operator\">::</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">bool</span> QDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token function\">event</span><span class=\"token punctuation\">(</span>QEvent <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> QEvent<span class=\"token operator\">::</span>User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        isExecing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        wait<span class=\"token punctuation\">.</span><span class=\"token function\">wakeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> QThread<span class=\"token operator\">::</span><span class=\"token function\">event</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token function\">startNotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Note: All this fancy waiting for the thread to enter its event</span>\n    <span class=\"token comment\" spellcheck=\"true\">// loop is to avoid nasty messages at app shutdown when the</span>\n    <span class=\"token comment\" spellcheck=\"true\">// QDnotifySignalThread singleton is deleted</span>\n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isExecing<span class=\"token punctuation\">)</span>\n        wait<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QSocketNotifier <span class=\"token function\">sn</span><span class=\"token punctuation\">(</span>qfswd_fileChanged_pipe<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> QSocketNotifier<span class=\"token operator\">::</span>Read<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sn<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">activated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">readFromDnotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QCoreApplication<span class=\"token operator\">::</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">postEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QEvent</span><span class=\"token punctuation\">(</span>QEvent<span class=\"token operator\">::</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token function\">readFromDnotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> readrv <span class=\"token operator\">=</span> <span class=\"token function\">qt_safe_read</span><span class=\"token punctuation\">(</span>qfswd_fileChanged_pipe<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Only expect EAGAIN or EINTR. Other errors are assumed to be impossible.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>readrv <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Q_ASSERT</span><span class=\"token punctuation\">(</span>readrv <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Q_UNUSED</span><span class=\"token punctuation\">(</span>readrv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> fd<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            emit <span class=\"token function\">fdChanged</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nQDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">QDnotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QObject<span class=\"token operator\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token function\">dnotifySignal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">fdChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Qt<span class=\"token operator\">::</span>DirectConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">QDnotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Directory<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstIterator iter <span class=\"token operator\">=</span> fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">constBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            iter <span class=\"token operator\">!=</span> fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">constEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">qt_safe_close</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>parentFd<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">qt_safe_close</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>parentFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nQDnotifyFileSystemWatcherEngine <span class=\"token operator\">*</span>QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QDnotifyFileSystemWatcherEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">qFatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QDnotifyFileSystemWatcherEngine thread should not be run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQStringList QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">addPaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList p <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">;</span>\n    QMutableListIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QString path <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QFileInfo <span class=\"token function\">fi</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">bool</span> isDir <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">isDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDir <span class=\"token operator\">&amp;&amp;</span> directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Skip monitored directories</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDir <span class=\"token operator\">&amp;&amp;</span> files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Skip monitored files</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDir<span class=\"token punctuation\">)</span>\n            path <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">canonicalPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Locate the directory entry (creating if needed)</span>\n        <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> pathToFD<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            QT_DIR <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token function\">QT_OPENDIR</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">constData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>d<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Could not open directory</span>\n            QT_DIR <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            QDir <span class=\"token function\">parentDir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parentDir<span class=\"token punctuation\">.</span><span class=\"token function\">isRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                parentDir<span class=\"token punctuation\">.</span><span class=\"token function\">cdUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                parent <span class=\"token operator\">=</span> <span class=\"token function\">QT_OPENDIR</span><span class=\"token punctuation\">(</span>parentDir<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">constData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">QT_CLOSEDIR</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            fd <span class=\"token operator\">=</span> <span class=\"token function\">qt_safe_dup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">dirfd</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> parentFd <span class=\"token operator\">=</span> parent <span class=\"token operator\">?</span> <span class=\"token function\">qt_safe_dup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">dirfd</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">QT_CLOSEDIR</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span> <span class=\"token function\">QT_CLOSEDIR</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Q_ASSERT</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> F_SETSIG<span class=\"token punctuation\">,</span> SIGIO<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n               <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> F_NOTIFY<span class=\"token punctuation\">,</span> DN_MODIFY <span class=\"token operator\">|</span> DN_CREATE <span class=\"token operator\">|</span> DN_DELETE <span class=\"token operator\">|</span>\n                                     DN_RENAME <span class=\"token operator\">|</span> DN_ATTRIB <span class=\"token operator\">|</span> DN_MULTISHOT<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n               <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>parentFd<span class=\"token punctuation\">,</span> F_SETSIG<span class=\"token punctuation\">,</span> SIGIO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n               <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>parentFd<span class=\"token punctuation\">,</span> F_NOTIFY<span class=\"token punctuation\">,</span> DN_DELETE <span class=\"token operator\">|</span> DN_RENAME <span class=\"token operator\">|</span>\n                                            DN_MULTISHOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Could not set appropriate flags</span>\n            <span class=\"token punctuation\">}</span>\n            Directory dir<span class=\"token punctuation\">;</span>\n            dir<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n            dir<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n            dir<span class=\"token punctuation\">.</span>parentFd <span class=\"token operator\">=</span> parentFd<span class=\"token punctuation\">;</span>\n            fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pathToFD<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parentFd<span class=\"token punctuation\">)</span>\n                parentToFD<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>parentFd<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Directory <span class=\"token operator\">&amp;</span>directory <span class=\"token operator\">=</span> fdToDirectory<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            directory<span class=\"token punctuation\">.</span>isMonitored <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            Directory<span class=\"token operator\">::</span>File file<span class=\"token punctuation\">;</span>\n            file<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">filePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            file<span class=\"token punctuation\">.</span>lastWrite <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pathToFD<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">filePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>fi<span class=\"token punctuation\">.</span><span class=\"token function\">filePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dnotifySignal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">startNotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nQStringList QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">removePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QStringList <span class=\"token operator\">&amp;</span>paths<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>files<span class=\"token punctuation\">,</span> QStringList <span class=\"token operator\">*</span>directories<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QStringList p <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">;</span>\n    QMutableListIterator<span class=\"token operator\">&lt;</span>QString<span class=\"token operator\">></span> <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QString path <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> pathToFD<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fd<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        Directory <span class=\"token operator\">&amp;</span>directory <span class=\"token operator\">=</span> fdToDirectory<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> isDir <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            isDir <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            directory<span class=\"token punctuation\">.</span>isMonitored <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ii <span class=\"token operator\">&lt;</span> directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ii<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directory<span class=\"token punctuation\">.</span>isMonitored <span class=\"token operator\">&amp;&amp;</span> directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// No longer needed</span>\n            <span class=\"token function\">qt_safe_close</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pathToFD<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            directories<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            files<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> wasParent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Directory<span class=\"token operator\">></span><span class=\"token operator\">::</span>Iterator iter <span class=\"token operator\">=</span> fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iter <span class=\"token operator\">==</span> fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        QHash<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>Iterator pIter <span class=\"token operator\">=</span> parentToFD<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pIter <span class=\"token operator\">==</span> parentToFD<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        iter <span class=\"token operator\">=</span> fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pIter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">==</span> fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        wasParent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    Directory <span class=\"token operator\">&amp;</span>directory <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>iter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wasParent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ii <span class=\"token operator\">&lt;</span> directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ii<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Directory<span class=\"token operator\">::</span>File <span class=\"token operator\">&amp;</span>file <span class=\"token operator\">=</span> directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span>ii<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">updateInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Emit signal</span>\n                QString filePath <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">bool</span> removed <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">QFileInfo</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">--</span>ii<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                emit <span class=\"token function\">fileChanged</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> removed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>isMonitored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Emit signal</span>\n        <span class=\"token keyword\">bool</span> removed <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">QFileInfo</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QString path <span class=\"token operator\">=</span> directory<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span>\n            directory<span class=\"token punctuation\">.</span>isMonitored <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        emit <span class=\"token function\">directoryChanged</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> removed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directory<span class=\"token punctuation\">.</span>isMonitored <span class=\"token operator\">&amp;&amp;</span> directory<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">qt_safe_close</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>parentFd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">qt_safe_close</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>parentFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            parentToFD<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span>parentFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        fdToDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">bool</span> QDnotifyFileSystemWatcherEngine<span class=\"token operator\">::</span>Directory<span class=\"token operator\">::</span>File<span class=\"token operator\">::</span><span class=\"token function\">updateInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QFileInfo <span class=\"token function\">fi</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QDateTime nLastWrite <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    uint nOwnerId <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    uint nGroupId <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QFile<span class=\"token operator\">::</span>Permissions nPermissions <span class=\"token operator\">=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nLastWrite <span class=\"token operator\">!=</span> lastWrite <span class=\"token operator\">||</span>\n       nOwnerId <span class=\"token operator\">!=</span> ownerId <span class=\"token operator\">||</span>\n       nGroupId <span class=\"token operator\">!=</span> groupId <span class=\"token operator\">||</span>\n       nPermissions <span class=\"token operator\">!=</span> permissions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ownerId <span class=\"token operator\">=</span> nOwnerId<span class=\"token punctuation\">;</span>\n        groupId <span class=\"token operator\">=</span> nGroupId<span class=\"token punctuation\">;</span>\n        permissions <span class=\"token operator\">=</span> nPermissions<span class=\"token punctuation\">;</span>\n        lastWrite <span class=\"token operator\">=</span> nLastWrite<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"Dnotify\"><a href=\"#Dnotify\" class=\"headerlink\" title=\"Dnotify\"></a>Dnotify</h2><p>Dnotify同理，也是使用的Linux的系统函数 /usr/include/unistd.h  主要是这个头文件中的函数。有一些关于文件描述符相关的函数</p>\n<p>里边主要监控的是其内部类的相关的信息</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">    <span class=\"token keyword\">struct</span> Directory <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">fd</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parentFd</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isMonitored</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Directory <span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">path</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">fd</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">parentFd</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>parentFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">isMonitored</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>isMonitored<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token function\">files</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        QString path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> parentFd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> isMonitored<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> File <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> File <span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">path</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">ownerId</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>ownerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">groupId</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>groupId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">permissions</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>permissions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">lastWrite</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>lastWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            QString path<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> <span class=\"token function\">updateInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            uint ownerId<span class=\"token punctuation\">;</span>\n            uint groupId<span class=\"token punctuation\">;</span>\n            QFile<span class=\"token operator\">::</span>Permissions permissions<span class=\"token punctuation\">;</span>\n            QDateTime lastWrite<span class=\"token punctuation\">;</span></code></pre>\n<p>可以直接看这个结构D需要这四个描述信息</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">        QString path<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//路径</span>\n        <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//文件的描述符</span>\n        <span class=\"token keyword\">int</span> parentFd<span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//父亲的描述符号</span>\n        <span class=\"token keyword\">bool</span> isMonitored<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//是否正在监控</span></code></pre>\n<p>其中这四个信息都是通过<em>Linux的库函数</em>与结构体来获取的。 其中遍历文件夹则是使用Qt的QFileInfo来遍历添加paths的信息，存储到其类的成员变量中。</p>\n<pre><code>// Directory iteration\n#define QT_DIR DIR\n#define QT_OPENDIR ::opendir\n#define QT_CLOSEDIR ::closedir</code></pre><p>Dir下的file需要这些信息</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">            QString path<span class=\"token punctuation\">;</span>\n            uint ownerId<span class=\"token punctuation\">;</span>\n            uint groupId<span class=\"token punctuation\">;</span>\n            QFile<span class=\"token operator\">::</span>Permissions permissions<span class=\"token punctuation\">;</span>\n            QDateTime lastWrite<span class=\"token punctuation\">;</span></code></pre>\n<p>现在说一下关键代码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">    ret <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> F_SETFD<span class=\"token punctuation\">,</span> FD_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> F_SETFD<span class=\"token punctuation\">,</span> FD_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// set non-block too?</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> O_NONBLOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> F_GETFL<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>pipefd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> F_GETFL<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>其中 pipefd[0]表示读，pipefd[1]表示写，实际上<br>关键代码在这里。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> QDnotifySignalThread<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    QSocketNotifier <span class=\"token function\">sn</span><span class=\"token punctuation\">(</span>qfswd_fileChanged_pipe<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> QSocketNotifier<span class=\"token operator\">::</span>Read<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sn<span class=\"token punctuation\">,</span> <span class=\"token function\">SIGNAL</span><span class=\"token punctuation\">(</span><span class=\"token function\">activated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SLOT</span><span class=\"token punctuation\">(</span><span class=\"token function\">readFromDnotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QCoreApplication<span class=\"token operator\">::</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">postEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QEvent</span><span class=\"token punctuation\">(</span>QEvent<span class=\"token operator\">::</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这段代码实际上是使用QSocketNotifier实时检测出从pip管道中读取有关于文件信息的变化，加到了Qt在Linux下的事件循环中（还记上以前有个老哥写的那个u盘检测工具么？实际上原理跟这个一样，都是通过socket来读取文件描述符的状态来检测其变化）。然后等待其消息通知变化。这样来实时监控文件夹与文件的变化。其中QDnotify大量使用了Unix的库函数，建议有兴趣的可以多读读Unix高级环境编程这本书，可以当个字典来看。我也不一个个解释了。实际上这个类，我读起来也是有点吃力，因为大部分都是Linux的库函数，还是得补补课去看看《Unix环境高级编程》了</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这两个类的主要原理是先缓存当前addpath的文件or文件夹的信息，然后再通过socket来实时检测其变化。获取当前的信息与缓存的信息做对比，如果有变化，就发送对应的信号。这样我们就可以检测到文件or文件夹的变化了。</p>\n","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>QFileSystemWatcher的作用是监视本地文件夹的变化以及文件的变化。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>QFileSystemWatcher的实现类是QFileSystemWatcherPrivate。 其中QFileSystemWatcherPrivate中的关键成员变量QFileSystemWatcherEngine用于监视目录以及文件的变化，发送信号给QFileystemWatcher。其中QFileSystemWatcherEngine派生了三个类。</p>\n<pre><code class=\"cpp\">class QFileSystemWatcherEngine : public QThread</code></pre>\n<p>其派生的子类三种类型分别为</p>\n<pre><code class=\"cpp\">// 这个用于监控Dir的变化\nclass QDnotifyFileSystemWatcherEngine : public QFileSystemWatcherEngine\n\n// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到\nclass QPollingFileSystemWatcherEngine : public QFileSystemWatcherEngine\n\n// 这个用于检测文件类型的变化\nclass QInotifyFileSystemWatcherEngine : public QFileSystemWatcherEngine</code></pre>\n<h2 id=\"QInotifyFileSystemWatcherEngine\"><a href=\"#QInotifyFileSystemWatcherEngine\" class=\"headerlink\" title=\"QInotifyFileSystemWatcherEngine\"></a>QInotifyFileSystemWatcherEngine</h2><p>QInotifyFileSystemWatcherEngine用于监视文件的变化。</p>\n<p>// 太长可以忽略，这是详细实现</p>\n<pre><code class=\"cpp\">//media/zhangpf/workspace1/Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/corelib/io/qfilesystemwatcher_inotify_p.h\n\n\n#include &quot;qfilesystemwatcher_p.h&quot;\n#ifndef QT_NO_FILESYSTEMWATCHER\n#include &lt;qhash.h&gt;\n#include &lt;qmutex.h&gt;\nQT_BEGIN_NAMESPACE\nclass QInotifyFileSystemWatcherEngine : public QFileSystemWatcherEngine\n{\n    Q_OBJECT\npublic:\n    ~QInotifyFileSystemWatcherEngine();\n    static QInotifyFileSystemWatcherEngine *create(); //单例模式\n    void run();\n    QStringList addPaths(const QStringList &amp;paths, QStringList *files, QStringList *directories);\n    QStringList removePaths(const QStringList &amp;paths, QStringList *files, QStringList *directories);\n    void stop();\nprivate Q_SLOTS:\n    void readFromInotify();\nprivate:\n    QInotifyFileSystemWatcherEngine(int fd);\n    int inotifyFd;\n    QMutex mutex;\n    QHash&lt;QString, int&gt; pathToID;\n    QHash&lt;int, QString&gt; idToPath;\n};\nQT_END_NAMESPACE\n#endif // QT_NO_FILESYSTEMWATCHER\n#endif // QFILESYSTEMWATCHER_INOTIFY_P_H\n\n// cpp\n#include &lt;sys/inotify.h&gt;\n#endif\nQT_BEGIN_NAMESPACE\nQInotifyFileSystemWatcherEngine *QInotifyFileSystemWatcherEngine::create()\n{\n    int fd = -1;\n#ifdef IN_CLOEXEC\n    fd = inotify_init1(IN_CLOEXEC);\n#endif\n    if (fd == -1) {\n        fd = inotify_init();\n        if (fd == -1)\n            return 0;\n        ::fcntl(fd, F_SETFD, FD_CLOEXEC);\n    }\n    return new QInotifyFileSystemWatcherEngine(fd);\n}\nQInotifyFileSystemWatcherEngine::QInotifyFileSystemWatcherEngine(int fd)\n    : inotifyFd(fd)\n{\n    fcntl(inotifyFd, F_SETFD, FD_CLOEXEC);\n    moveToThread(this);\n}\nQInotifyFileSystemWatcherEngine::~QInotifyFileSystemWatcherEngine()\n{\n    foreach (int id, pathToID)\n        inotify_rm_watch(inotifyFd, id &lt; 0 ? -id : id);\n    ::close(inotifyFd);\n}\nvoid QInotifyFileSystemWatcherEngine::run()\n{\n    QSocketNotifier sn(inotifyFd, QSocketNotifier::Read, this);   //通过socket来监视文件的变化，替代thread一个很好的方式\n    connect(&amp;sn, SIGNAL(activated(int)), SLOT(readFromInotify()));\n    (void) exec();\n}\nQStringList QInotifyFileSystemWatcherEngine::addPaths(const QStringList &amp;paths,\n                                                      QStringList *files,\n                                                      QStringList *directories)\n{\n    QMutexLocker locker(&amp;mutex);\n    QStringList p = paths;\n    QMutableListIterator&lt;QString&gt; it(p);\n    while (it.hasNext()) {\n        QString path = it.next();\n        QFileInfo fi(path);\n        bool isDir = fi.isDir();\n        if (isDir) {\n            if (directories-&gt;contains(path))\n                continue;\n        } else {\n            if (files-&gt;contains(path))\n                continue;\n        }\n        int wd = inotify_add_watch(inotifyFd,\n                                   QFile::encodeName(path),\n                                   (isDir\n                                    ? (0\n                                       | IN_ATTRIB\n                                       | IN_MOVE\n                                       | IN_CREATE\n                                       | IN_DELETE\n                                       | IN_DELETE_SELF\n                                       )\n                                    : (0\n                                       | IN_ATTRIB\n                                       | IN_MODIFY\n                                       | IN_MOVE\n                                       | IN_MOVE_SELF\n                                       | IN_DELETE_SELF\n                                       )));\n        if (wd &lt;= 0) {\n            perror(&quot;QInotifyFileSystemWatcherEngine::addPaths: inotify_add_watch failed&quot;);\n            continue;\n        }\n        it.remove();\n        int id = isDir ? -wd : wd;\n        if (id &lt; 0) {\n            directories-&gt;append(path);\n        } else {\n            files-&gt;append(path);\n        }\n        pathToID.insert(path, id);\n        idToPath.insert(id, path);\n    }\n    start();\n    return p;\n}\nQStringList QInotifyFileSystemWatcherEngine::removePaths(const QStringList &amp;paths,\n                                                         QStringList *files,\n                                                         QStringList *directories)\n{\n    QMutexLocker locker(&amp;mutex);\n    QStringList p = paths;\n    QMutableListIterator&lt;QString&gt; it(p);\n    while (it.hasNext()) {\n        QString path = it.next();\n        int id = pathToID.take(path);\n        QString x = idToPath.take(id);\n        if (x.isEmpty() || x != path)\n            continue;\n        int wd = id &lt; 0 ? -id : id;\n        // qDebug() &lt;&lt; &quot;removing watch for path&quot; &lt;&lt; path &lt;&lt; &quot;wd&quot; &lt;&lt; wd;\n        inotify_rm_watch(inotifyFd, wd);\n        it.remove();\n        if (id &lt; 0) {\n            directories-&gt;removeAll(path);\n        } else {\n            files-&gt;removeAll(path);\n        }\n    }\n    return p;\n}\nvoid QInotifyFileSystemWatcherEngine::stop()\n{\n    quit();\n}\nvoid QInotifyFileSystemWatcherEngine::readFromInotify()\n{\n    //主要是通过unix库函数来获取文件对应的详细信息。再跟addpath实现中缓存下来的信息做对比，来检测文件的变化。\n    QMutexLocker locker(&amp;mutex);\n    // qDebug() &lt;&lt; &quot;QInotifyFileSystemWatcherEngine::readFromInotify&quot;;\n    int buffSize = 0;\n    ioctl(inotifyFd, FIONREAD, (char *) &amp;buffSize);\n    QVarLengthArray&lt;char, 4096&gt; buffer(buffSize);\n    buffSize = read(inotifyFd, buffer.data(), buffSize);\n    char *at = buffer.data();\n    char * const end = at + buffSize;\n    QHash&lt;int, inotify_event *&gt; eventForId;\n    while (at &lt; end) {\n        inotify_event *event = reinterpret_cast&lt;inotify_event *&gt;(at);\n        if (eventForId.contains(event-&gt;wd))\n            eventForId[event-&gt;wd]-&gt;mask |= event-&gt;mask;\n        else\n            eventForId.insert(event-&gt;wd, event);\n        at += sizeof(inotify_event) + event-&gt;len;\n    }\n    QHash&lt;int, inotify_event *&gt;::const_iterator it = eventForId.constBegin();\n    while (it != eventForId.constEnd()) {\n        const inotify_event &amp;event = **it;\n        ++it;\n        // qDebug() &lt;&lt; &quot;inotify event, wd&quot; &lt;&lt; event.wd &lt;&lt; &quot;mask&quot; &lt;&lt; hex &lt;&lt; event.mask;\n        int id = event.wd;\n        QString path = idToPath.value(id);\n        if (path.isEmpty()) {\n            // perhaps a directory?\n            id = -id;\n            path = idToPath.value(id);\n            if (path.isEmpty())\n                continue;\n        }\n        // qDebug() &lt;&lt; &quot;event for path&quot; &lt;&lt; path;\n        if ((event.mask &amp; (IN_DELETE_SELF | IN_MOVE_SELF | IN_UNMOUNT)) != 0) {\n            pathToID.remove(path);\n            idToPath.remove(id);\n            inotify_rm_watch(inotifyFd, event.wd);\n            if (id &lt; 0)\n                emit directoryChanged(path, true);\n            else\n                emit fileChanged(path, true);\n        } else {\n            if (id &lt; 0)\n                emit directoryChanged(path, false);\n            else\n                emit fileChanged(path, false);\n        }\n    }\n}\nQT_END_NAMESPACE\n#endif // QT_NO_FILESYSTEMWATCHER</code></pre>\n<p>这是一个单例模式，里边的核心代码其实就是讲的是Inotify相关的函数。其中的关键的点，我已经打上备注。这个类中的主要实现是Linux下的Inotify的使用相关。</p>\n<h2 id=\"Inotify\"><a href=\"#Inotify\" class=\"headerlink\" title=\"Inotify\"></a>Inotify</h2><p>Inotify简单的来讲是在Linux下监视文件与文件夹的相关机制，本来想自己写这一部分教程的，可是有一篇文章写的太好了，忍不住给大家分享了。<br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-inotify/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/linux/l-inotify/</a> 看完这一篇文章之后我觉得你对Linux下如何监视文件应该有了解了，甚至可以自己封装一个类给大家用。</p>\n<h1 id=\"文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine\"><a href=\"#文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine\" class=\"headerlink\" title=\"文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine\"></a>文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine</h1><pre><code class=\"cpp\">class QDnotifyFileSystemWatcherEngine : public QFileSystemWatcherEngine\n{\n    Q_OBJECT\npublic:\n    virtual ~QDnotifyFileSystemWatcherEngine();\n    static QDnotifyFileSystemWatcherEngine *create();\n    void run();\n    QStringList addPaths(const QStringList &amp;paths, QStringList *files, QStringList *directories);\n    QStringList removePaths(const QStringList &amp;paths, QStringList *files, QStringList *directories);\n    void stop();\nprivate Q_SLOTS:\n    void refresh(int);\nprivate:\n    //这个结构体比较关键\n    struct Directory {\n        Directory() : fd(0), parentFd(0), isMonitored(false) {}\n        Directory(const Directory &amp;o) : path(o.path),\n                                        fd(o.fd),\n                                        parentFd(o.parentFd),\n                                        isMonitored(o.isMonitored),\n                                        files(o.files) {}\n        QString path;\n        int fd;\n        int parentFd;\n        bool isMonitored;\n        //这个结构体也比较关键\n        struct File {\n            File() : ownerId(0u), groupId(0u), permissions(0u) { }\n            File(const File &amp;o) : path(o.path),\n                                  ownerId(o.ownerId),\n                                  groupId(o.groupId),\n                                  permissions(o.permissions),\n                                  lastWrite(o.lastWrite) {}\n            QString path;\n            bool updateInfo();\n            uint ownerId;\n            uint groupId;\n            QFile::Permissions permissions;\n            QDateTime lastWrite;\n        };\n        QList&lt;File&gt; files;\n    };\n    QDnotifyFileSystemWatcherEngine();\n    QMutex mutex;\n    QHash&lt;QString, int&gt; pathToFD;\n    QHash&lt;int, Directory&gt; fdToDirectory;\n    QHash&lt;int, int&gt; parentToFD;\n};\n\n\n//cpp\nQDnotifySignalThread::QDnotifySignalThread()\n: isExecing(false)\n{\n    moveToThread(this);\n    qt_safe_pipe(qfswd_fileChanged_pipe, O_NONBLOCK);\n    struct sigaction oldAction;\n    struct sigaction action;\n    memset(&amp;action, 0, sizeof(action));\n    action.sa_sigaction = qfswd_sigio_monitor;\n    action.sa_flags = SA_SIGINFO;\n    ::sigaction(SIGIO, &amp;action, &amp;oldAction);\n    if (!(oldAction.sa_flags &amp; SA_SIGINFO))\n        qfswd_old_sigio_handler = oldAction.sa_handler;\n    else\n        qfswd_old_sigio_action = oldAction.sa_sigaction;\n}\nQDnotifySignalThread::~QDnotifySignalThread()\n{\n    if(isRunning()) {\n        quit();\n        QThread::wait();\n    }\n}\nbool QDnotifySignalThread::event(QEvent *e)\n{\n    if(e-&gt;type() == QEvent::User) {\n        QMutexLocker locker(&amp;mutex);\n        isExecing = true;\n        wait.wakeAll();\n        return true;\n    } else {\n        return QThread::event(e);\n    }\n}\nvoid QDnotifySignalThread::startNotify()\n{\n    // Note: All this fancy waiting for the thread to enter its event\n    // loop is to avoid nasty messages at app shutdown when the\n    // QDnotifySignalThread singleton is deleted\n    start();\n    mutex.lock();\n    while(!isExecing)\n        wait.wait(&amp;mutex);\n    mutex.unlock();\n}\nvoid QDnotifySignalThread::run()\n{\n    QSocketNotifier sn(qfswd_fileChanged_pipe[0], QSocketNotifier::Read, this);\n    connect(&amp;sn, SIGNAL(activated(int)), SLOT(readFromDnotify()));\n    QCoreApplication::instance()-&gt;postEvent(this, new QEvent(QEvent::User));\n    (void) exec();\n}\nvoid QDnotifySignalThread::readFromDnotify()\n{\n    int fd;\n    int readrv = qt_safe_read(qfswd_fileChanged_pipe[0], reinterpret_cast&lt;char*&gt;(&amp;fd), sizeof(int));\n    // Only expect EAGAIN or EINTR. Other errors are assumed to be impossible.\n    if(readrv != -1) {\n        Q_ASSERT(readrv == sizeof(int));\n        Q_UNUSED(readrv);\n        if(0 == fd)\n            quit();\n        else\n            emit fdChanged(fd);\n    }\n}\nQDnotifyFileSystemWatcherEngine::QDnotifyFileSystemWatcherEngine()\n{\n    QObject::connect(dnotifySignal(), SIGNAL(fdChanged(int)),\n                     this, SLOT(refresh(int)), Qt::DirectConnection);\n}\nQDnotifyFileSystemWatcherEngine::~QDnotifyFileSystemWatcherEngine()\n{\n    QMutexLocker locker(&amp;mutex);\n    for(QHash&lt;int, Directory&gt;::ConstIterator iter = fdToDirectory.constBegin();\n            iter != fdToDirectory.constEnd();\n            ++iter) {\n        qt_safe_close(iter-&gt;fd);\n        if(iter-&gt;parentFd)\n            qt_safe_close(iter-&gt;parentFd);\n    }\n}\nQDnotifyFileSystemWatcherEngine *QDnotifyFileSystemWatcherEngine::create()\n{\n    return new QDnotifyFileSystemWatcherEngine();\n}\nvoid QDnotifyFileSystemWatcherEngine::run()\n{\n    qFatal(&quot;QDnotifyFileSystemWatcherEngine thread should not be run&quot;);\n}\nQStringList QDnotifyFileSystemWatcherEngine::addPaths(const QStringList &amp;paths, QStringList *files, QStringList *directories)\n{\n    QMutexLocker locker(&amp;mutex);\n    QStringList p = paths;\n    QMutableListIterator&lt;QString&gt; it(p);\n    while (it.hasNext()) {\n        QString path = it.next();\n        QFileInfo fi(path);\n        if(!fi.exists()) {\n            continue;\n        }\n        bool isDir = fi.isDir();\n        if (isDir &amp;&amp; directories-&gt;contains(path)) {\n            continue; // Skip monitored directories\n        } else if(!isDir &amp;&amp; files-&gt;contains(path)) {\n            continue; // Skip monitored files\n        }\n        if(!isDir)\n            path = fi.canonicalPath();\n        // Locate the directory entry (creating if needed)\n        int fd = pathToFD[path];\n        if(fd == 0) {\n            QT_DIR *d = QT_OPENDIR(path.toUtf8().constData());\n            if(!d) continue; // Could not open directory\n            QT_DIR *parent = 0;\n            QDir parentDir(path);\n            if(!parentDir.isRoot()) {\n                parentDir.cdUp();\n                parent = QT_OPENDIR(parentDir.path().toUtf8().constData());\n                if(!parent) {\n                    QT_CLOSEDIR(d);\n                    continue;\n                }\n            }\n            fd = qt_safe_dup(::dirfd(d));\n            int parentFd = parent ? qt_safe_dup(::dirfd(parent)) : 0;\n            QT_CLOSEDIR(d);\n            if(parent) QT_CLOSEDIR(parent);\n            Q_ASSERT(fd);\n            if(::fcntl(fd, F_SETSIG, SIGIO) ||\n               ::fcntl(fd, F_NOTIFY, DN_MODIFY | DN_CREATE | DN_DELETE |\n                                     DN_RENAME | DN_ATTRIB | DN_MULTISHOT) ||\n               (parent &amp;&amp; ::fcntl(parentFd, F_SETSIG, SIGIO)) ||\n               (parent &amp;&amp; ::fcntl(parentFd, F_NOTIFY, DN_DELETE | DN_RENAME |\n                                            DN_MULTISHOT))) {\n                continue; // Could not set appropriate flags\n            }\n            Directory dir;\n            dir.path = path;\n            dir.fd = fd;\n            dir.parentFd = parentFd;\n            fdToDirectory.insert(fd, dir);\n            pathToFD.insert(path, fd);\n            if(parentFd)\n                parentToFD.insert(parentFd, fd);\n        }\n        Directory &amp;directory = fdToDirectory[fd];\n        if(isDir) {\n            directory.isMonitored = true;\n        } else {\n            Directory::File file;\n            file.path = fi.filePath();\n            file.lastWrite = fi.lastModified();\n            directory.files.append(file);\n            pathToFD.insert(fi.filePath(), fd);\n        }\n        it.remove();\n        if(isDir) {\n            directories-&gt;append(path);\n        } else {\n            files-&gt;append(fi.filePath());\n        }\n    }\n    dnotifySignal()-&gt;startNotify();\n    return p;\n}\nQStringList QDnotifyFileSystemWatcherEngine::removePaths(const QStringList &amp;paths, QStringList *files, QStringList *directories)\n{\n    QMutexLocker locker(&amp;mutex);\n    QStringList p = paths;\n    QMutableListIterator&lt;QString&gt; it(p);\n    while (it.hasNext()) {\n        QString path = it.next();\n        int fd = pathToFD.take(path);\n        if(!fd)\n            continue;\n        Directory &amp;directory = fdToDirectory[fd];\n        bool isDir = false;\n        if(directory.path == path) {\n            isDir = true;\n            directory.isMonitored = false;\n        } else {\n            for(int ii = 0; ii &lt; directory.files.count(); ++ii) {\n                if(directory.files.at(ii).path == path) {\n                    directory.files.removeAt(ii);\n                    break;\n                }\n            }\n        }\n        if(!directory.isMonitored &amp;&amp; directory.files.isEmpty()) {\n            // No longer needed\n            qt_safe_close(directory.fd);\n            pathToFD.remove(directory.path);\n            fdToDirectory.remove(fd);\n        }\n        if(isDir) {\n            directories-&gt;removeAll(path);\n        } else {\n            files-&gt;removeAll(path);\n        }\n        it.remove();\n    }\n    return p;\n}\nvoid QDnotifyFileSystemWatcherEngine::refresh(int fd)\n{\n    QMutexLocker locker(&amp;mutex);\n    bool wasParent = false;\n    QHash&lt;int, Directory&gt;::Iterator iter = fdToDirectory.find(fd);\n    if(iter == fdToDirectory.end()) {\n        QHash&lt;int, int&gt;::Iterator pIter = parentToFD.find(fd);\n        if(pIter == parentToFD.end())\n            return;\n        iter = fdToDirectory.find(*pIter);\n        if (iter == fdToDirectory.end())\n            return;\n        wasParent = true;\n    }\n    Directory &amp;directory = *iter;\n    if(!wasParent) {\n        for(int ii = 0; ii &lt; directory.files.count(); ++ii) {\n            Directory::File &amp;file = directory.files[ii];\n            if(file.updateInfo()) {\n                // Emit signal\n                QString filePath = file.path;\n                bool removed = !QFileInfo(filePath).exists();\n                if(removed) {\n                    directory.files.removeAt(ii);\n                    --ii;\n                }\n                emit fileChanged(filePath, removed);\n            }\n        }\n    }\n    if(directory.isMonitored) {\n        // Emit signal\n        bool removed = !QFileInfo(directory.path).exists();\n        QString path = directory.path;\n        if(removed)\n            directory.isMonitored = false;\n        emit directoryChanged(path, removed);\n    }\n    if(!directory.isMonitored &amp;&amp; directory.files.isEmpty()) {\n        qt_safe_close(directory.fd);\n        if(directory.parentFd) {\n            qt_safe_close(directory.parentFd);\n            parentToFD.remove(directory.parentFd);\n        }\n        fdToDirectory.erase(iter);\n    }\n}\nvoid QDnotifyFileSystemWatcherEngine::stop()\n{\n}\nbool QDnotifyFileSystemWatcherEngine::Directory::File::updateInfo()\n{\n    QFileInfo fi(path);\n    QDateTime nLastWrite = fi.lastModified();\n    uint nOwnerId = fi.ownerId();\n    uint nGroupId = fi.groupId();\n    QFile::Permissions nPermissions = fi.permissions();\n    if(nLastWrite != lastWrite ||\n       nOwnerId != ownerId ||\n       nGroupId != groupId ||\n       nPermissions != permissions) {\n        ownerId = nOwnerId;\n        groupId = nGroupId;\n        permissions = nPermissions;\n        lastWrite = nLastWrite;\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre>\n<h2 id=\"Dnotify\"><a href=\"#Dnotify\" class=\"headerlink\" title=\"Dnotify\"></a>Dnotify</h2><p>Dnotify同理，也是使用的Linux的系统函数 /usr/include/unistd.h  主要是这个头文件中的函数。有一些关于文件描述符相关的函数</p>\n<p>里边主要监控的是其内部类的相关的信息</p>\n<pre><code class=\"cpp\">    struct Directory {\n        Directory() : fd(0), parentFd(0), isMonitored(false) {}\n        Directory(const Directory &amp;o) : path(o.path),\n                                        fd(o.fd),\n                                        parentFd(o.parentFd),\n                                        isMonitored(o.isMonitored),\n                                        files(o.files) {}\n        QString path;\n        int fd;\n        int parentFd;\n        bool isMonitored;\n        struct File {\n            File() : ownerId(0u), groupId(0u), permissions(0u) { }\n            File(const File &amp;o) : path(o.path),\n                                  ownerId(o.ownerId),\n                                  groupId(o.groupId),\n                                  permissions(o.permissions),\n                                  lastWrite(o.lastWrite) {}\n            QString path;\n            bool updateInfo();\n            uint ownerId;\n            uint groupId;\n            QFile::Permissions permissions;\n            QDateTime lastWrite;</code></pre>\n<p>可以直接看这个结构D需要这四个描述信息</p>\n<pre><code class=\"cpp\">        QString path;  //路径\n        int fd;  //文件的描述符\n        int parentFd;    //父亲的描述符号\n        bool isMonitored; //是否正在监控</code></pre>\n<p>其中这四个信息都是通过<em>Linux的库函数</em>与结构体来获取的。 其中遍历文件夹则是使用Qt的QFileInfo来遍历添加paths的信息，存储到其类的成员变量中。</p>\n<pre><code>// Directory iteration\n#define QT_DIR DIR\n#define QT_OPENDIR ::opendir\n#define QT_CLOSEDIR ::closedir</code></pre><p>Dir下的file需要这些信息</p>\n<pre><code class=\"cpp\">            QString path;\n            uint ownerId;\n            uint groupId;\n            QFile::Permissions permissions;\n            QDateTime lastWrite;</code></pre>\n<p>现在说一下关键代码</p>\n<pre><code class=\"cpp\">    ret = ::pipe(pipefd);\n    if (ret == -1)\n        return -1;\n    ::fcntl(pipefd[0], F_SETFD, FD_CLOEXEC);\n    ::fcntl(pipefd[1], F_SETFD, FD_CLOEXEC);\n    // set non-block too?\n    if (flags &amp; O_NONBLOCK) {\n        ::fcntl(pipefd[0], F_SETFL, ::fcntl(pipefd[0], F_GETFL) | O_NONBLOCK);\n        ::fcntl(pipefd[1], F_SETFL, ::fcntl(pipefd[1], F_GETFL) | O_NONBLOCK);\n    }</code></pre>\n<p>其中 pipefd[0]表示读，pipefd[1]表示写，实际上<br>关键代码在这里。</p>\n<pre><code class=\"cpp\">void QDnotifySignalThread::run()\n{\n    QSocketNotifier sn(qfswd_fileChanged_pipe[0], QSocketNotifier::Read, this);\n    connect(&amp;sn, SIGNAL(activated(int)), SLOT(readFromDnotify()));\n    QCoreApplication::instance()-&gt;postEvent(this, new QEvent(QEvent::User));\n    (void) exec();\n}</code></pre>\n<p>这段代码实际上是使用QSocketNotifier实时检测出从pip管道中读取有关于文件信息的变化，加到了Qt在Linux下的事件循环中（还记上以前有个老哥写的那个u盘检测工具么？实际上原理跟这个一样，都是通过socket来读取文件描述符的状态来检测其变化）。然后等待其消息通知变化。这样来实时监控文件夹与文件的变化。其中QDnotify大量使用了Unix的库函数，建议有兴趣的可以多读读Unix高级环境编程这本书，可以当个字典来看。我也不一个个解释了。实际上这个类，我读起来也是有点吃力，因为大部分都是Linux的库函数，还是得补补课去看看《Unix环境高级编程》了</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这两个类的主要原理是先缓存当前addpath的文件or文件夹的信息，然后再通过socket来实时检测其变化。获取当前的信息与缓存的信息做对比，如果有变化，就发送对应的信号。这样我们就可以检测到文件or文件夹的变化了。</p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt源码","path":"api/tags/Qt源码.json"},{"name":"Qt源码剖析","path":"api/tags/Qt源码剖析.json"}]}