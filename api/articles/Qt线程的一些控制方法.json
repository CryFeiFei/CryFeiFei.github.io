{"title":"Qt线程的一些控制方法","slug":"Qt线程的一些控制方法","date":"2020-07-01T12:36:29.000Z","updated":"2020-07-01T12:39:19.520Z","comments":true,"path":"api/articles/Qt线程的一些控制方法.json","excerpt":null,"covers":null,"content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>基于上一篇文章的例子，我们来做一些控制的操作，比如暂停，停止，继续这些操作。</p>\n<h1 id=\"五个控制\"><a href=\"#五个控制\" class=\"headerlink\" title=\"五个控制\"></a>五个控制</h1><ul>\n<li>Start 开始线程</li>\n<li>Stop 结束线程</li>\n<li>Pause 暂停线程</li>\n<li>Continue 继续线程</li>\n<li>Destory 毁灭线程</li>\n</ul>\n<h1 id=\"新增加的三个\"><a href=\"#新增加的三个\" class=\"headerlink\" title=\"新增加的三个\"></a>新增加的三个</h1><p>上一篇，我们已经有了开始线程跟Destory。现在添加新的三个</p>\n<ul>\n<li>结束线程</li>\n<li>暂停线程</li>\n<li>继续线程</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>talk is cheap。还是上代码吧，很简单。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    m_bStop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    emit <span class=\"token function\">workStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    emit <span class=\"token function\">workStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_bPause<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            emit <span class=\"token function\">workPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_bStop<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            emit <span class=\"token function\">workStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_bDestory<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            emit <span class=\"token function\">workDestory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> Q_OS_WIN</span>\n        <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"--\"</span><span class=\"token operator\">&lt;&lt;</span>m_i<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        m_i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    m_bStop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">Pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    m_bPause <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">Continue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    m_bPause <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> WorkThread<span class=\"token operator\">::</span><span class=\"token function\">Destory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    m_bDestory <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>上面的代码为控制线程的函数，下面是UI线程通过信号槽来控制代码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">\n    m_workerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">WorkThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_worker<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>m_workerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>btnPause<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>ThreadPause<span class=\"token punctuation\">,</span> Qt<span class=\"token operator\">::</span>DirectConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>btnContinue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>ThreadContinue <span class=\"token punctuation\">,</span>Qt<span class=\"token operator\">::</span>DirectConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>btnStop<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>ThreadStop<span class=\"token punctuation\">,</span> Qt<span class=\"token operator\">::</span>DirectConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>btnDestory<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>ThreadDestory<span class=\"token punctuation\">,</span> Qt<span class=\"token operator\">::</span>DirectConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//启动线程</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-</span><span class=\"token operator\">></span>btnStart<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QPushButton<span class=\"token operator\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>ThreadStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_workerThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QThread<span class=\"token operator\">::</span>started<span class=\"token punctuation\">,</span> m_worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkThread<span class=\"token operator\">::</span>Start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//stop之后继续走</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token operator\">::</span>threadStart<span class=\"token punctuation\">,</span> m_worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>WorkThread<span class=\"token operator\">::</span>Start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>你会发现我的控制全部使用信号槽来进行线程之间的通信。</p>\n<p>上面的代码只是一个简单的例子，全部的工程代码都在这里。</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread3\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread3\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread3</a></p>\n","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>基于上一篇文章的例子，我们来做一些控制的操作，比如暂停，停止，继续这些操作。</p>\n<h1 id=\"五个控制\"><a href=\"#五个控制\" class=\"headerlink\" title=\"五个控制\"></a>五个控制</h1><ul>\n<li>Start 开始线程</li>\n<li>Stop 结束线程</li>\n<li>Pause 暂停线程</li>\n<li>Continue 继续线程</li>\n<li>Destory 毁灭线程</li>\n</ul>\n<h1 id=\"新增加的三个\"><a href=\"#新增加的三个\" class=\"headerlink\" title=\"新增加的三个\"></a>新增加的三个</h1><p>上一篇，我们已经有了开始线程跟Destory。现在添加新的三个</p>\n<ul>\n<li>结束线程</li>\n<li>暂停线程</li>\n<li>继续线程</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>talk is cheap。还是上代码吧，很简单。</p>\n<pre><code class=\"cpp\">void WorkThread::Start()\n{\n    m_bStop = false;\n    emit workStart();\n    doWork();\n    emit workStop();\n}\nvoid WorkThread::doWork()\n{\n    while(true)\n    {\n        if (m_bPause)\n        {\n            emit workPause();\n            continue;\n        }\n\n        if (m_bStop)\n        {\n            emit workStop();\n            break;\n        }\n\n        if (m_bDestory)\n        {\n            emit workDestory();\n            break;\n        }\n\n#ifdef Q_OS_WIN\n        Sleep(1000);\n#else\n        sleep(1);\n#endif\n        qDebug()&lt;&lt;&quot;--&quot;&lt;&lt;m_i&lt;&lt;endl;\n        m_i++;\n    }\n}\n\nvoid WorkThread::Stop()\n{\n    m_bStop = true;\n}\n\nvoid WorkThread::Pause()\n{\n    m_bPause = true;\n}\n\nvoid WorkThread::Continue()\n{\n    m_bPause = false;\n}\n\nvoid WorkThread::Destory()\n{\n    m_bDestory = true;\n}</code></pre>\n<p>上面的代码为控制线程的函数，下面是UI线程通过信号槽来控制代码</p>\n<pre><code class=\"cpp\">\n    m_workerThread = new QThread();\n    m_worker = new WorkThread();\n    m_worker-&gt;moveToThread(m_workerThread);\n\n    connect(ui-&gt;btnPause, &amp;QPushButton::clicked, this, &amp;MainWindow::ThreadPause, Qt::DirectConnection);\n    connect(ui-&gt;btnContinue, &amp;QPushButton::clicked, this, &amp;MainWindow::ThreadContinue ,Qt::DirectConnection);\n    connect(ui-&gt;btnStop, &amp;QPushButton::clicked, this, &amp;MainWindow::ThreadStop, Qt::DirectConnection);\n    connect(ui-&gt;btnDestory, &amp;QPushButton::clicked, this, &amp;MainWindow::ThreadDestory, Qt::DirectConnection);\n\n    //启动线程\n    connect(ui-&gt;btnStart, &amp;QPushButton::clicked, this, &amp;MainWindow::ThreadStart);\n    connect(m_workerThread, &amp;QThread::started, m_worker, &amp;WorkThread::Start);\n    //stop之后继续走\n    connect(this, &amp;MainWindow::threadStart, m_worker, &amp;WorkThread::Start);\n\n</code></pre>\n<p>你会发现我的控制全部使用信号槽来进行线程之间的通信。</p>\n<p>上面的代码只是一个简单的例子，全部的工程代码都在这里。</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread3\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread3\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread3</a></p>\n","categories":[{"name":"Qt","path":"api/categories/Qt.json"},{"name":"Qt基础教程","path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt线程","path":"api/tags/Qt线程.json"},{"name":"线程","path":"api/tags/线程.json"},{"name":"Qt控制","path":"api/tags/Qt控制.json"}]}