{"title":"Qt线程同步-单生产者多消费者","slug":"Qt线程同步-单生产者多消费者","date":"2020-07-01T12:44:24.000Z","updated":"2020-07-01T12:45:33.346Z","comments":true,"path":"api/articles/Qt线程同步-单生产者多消费者.json","excerpt":null,"covers":null,"content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>单生产者单消费者大家应该已经掌握了。上一篇使用的是QMutex跟QWaitCondition。</p>\n<p>如果你的C++编译器版本比较高的话，那就可以使用C++11的 std::condition_variable了</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这次对比单生产者单消费者，我们多了mutex来进行消费者之间的同步。这样就可以写单生产者多消费者了。</p>\n<p>这是代码中多的一个锁，用于同步消费者。</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>mutex mutexConsumer<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//消费者用来同步用的</span></code></pre>\n<p>上代码,这是线程同步需要的变量</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> ItemRepository\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> itemQueue<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//缓冲区</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 仓库所容纳的产品最大个数</span>\n    <span class=\"token keyword\">int</span> itemCounterUse <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//消费者用了多少</span>\n    std<span class=\"token operator\">::</span>mutex mutex<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 互斥量,保护产品缓冲区</span>\n    std<span class=\"token operator\">::</span>mutex mutexConsumer<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//消费者用来同步用的</span>\n    std<span class=\"token operator\">::</span>condition_variable bufferNotFull<span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// 条件变量, 指产品仓库缓冲区不为满</span>\n    std<span class=\"token operator\">::</span>condition_variable bufferNotEmpty<span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 条件变量, 指产品仓库缓冲区不为空</span>\n<span class=\"token punctuation\">}</span>gItemRepository<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 产品库全局变量，生产者和消费者操作该变量.</span></code></pre>\n<p>这里是实现代码</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QThread\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Producer</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 生产 产品</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">ProduceItem</span><span class=\"token punctuation\">(</span>ItemRepository <span class=\"token operator\">&amp;</span>itemRepo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>itemRepo<span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemRepo<span class=\"token punctuation\">.</span>itemQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> itemRepo<span class=\"token punctuation\">.</span>MaxSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            itemRepo<span class=\"token punctuation\">.</span>bufferNotFull<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"product has full\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//#ifdef Q_OS_WIN</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Sleep(1000);</span>\n<span class=\"token comment\" spellcheck=\"true\">//#endif</span>\n\n        itemRepo<span class=\"token punctuation\">.</span>itemQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// 仓库放入产品</span>\n        itemRepo<span class=\"token punctuation\">.</span>bufferNotEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 通知消费者仓库不为空</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> kItemsToProduce<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ProduceItem</span><span class=\"token punctuation\">(</span>gItemRepository<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"procut------------\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> QThread\n<span class=\"token punctuation\">{</span>\n    Q_OBJECT\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Consumer</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 消费 产品</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">ConsumeItem</span><span class=\"token punctuation\">(</span>ItemRepository <span class=\"token operator\">&amp;</span>itemRepo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n        std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>itemRepo<span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemRepo<span class=\"token punctuation\">.</span>itemQueue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            itemRepo<span class=\"token punctuation\">.</span>bufferNotEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        data <span class=\"token operator\">=</span> itemRepo<span class=\"token punctuation\">.</span>itemQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        itemRepo<span class=\"token punctuation\">.</span>itemQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        itemRepo<span class=\"token punctuation\">.</span>bufferNotFull<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> item <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>gItemRepository<span class=\"token punctuation\">.</span>mutexConsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 仓库产品消费计数器保持多线程互斥</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gItemRepository<span class=\"token punctuation\">.</span>itemCounterUse <span class=\"token operator\">&lt;</span> kItemsToProduce<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                item <span class=\"token operator\">=</span> <span class=\"token function\">ConsumeItem</span><span class=\"token punctuation\">(</span>gItemRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 消费产品</span>\n                gItemRepository<span class=\"token punctuation\">.</span>itemCounterUse<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 每消费一次进行计数器+1</span>\n            <span class=\"token punctuation\">}</span>\n\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"thread0\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> Q_OS_WIN</span>\n                <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"thread1\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> Q_OS_WIN</span>\n                <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"thread2\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> Q_OS_WIN</span>\n                <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Consumer------------\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">objectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-----\"</span><span class=\"token operator\">&lt;&lt;</span>item<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>有一点需要注意的是，消费的时候，应该在消费者的外面，所以我打的log是解锁之后sleep。这时候应该及时通知其它消费者线程赶紧调度。这样避免cpu的资源浪费。</p>\n<p>稍微吐槽下，目前百度 Qt 单生产者多消费者的例子，十有八九是用Qt的信号量来实现的，可是写那篇文章的人也没有研究明白，那个例子有严重的bug。稍微变通下生产总数跟缓冲区总数就输出有问题了。慎用。</p>\n<p>CSDN的文章就是相互抄袭啊。逃）</p>\n<p>工程代码在这里</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread_Muliconsmer\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread_Muliconsmer\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread_Muliconsmer</a></p>\n","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>单生产者单消费者大家应该已经掌握了。上一篇使用的是QMutex跟QWaitCondition。</p>\n<p>如果你的C++编译器版本比较高的话，那就可以使用C++11的 std::condition_variable了</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这次对比单生产者单消费者，我们多了mutex来进行消费者之间的同步。这样就可以写单生产者多消费者了。</p>\n<p>这是代码中多的一个锁，用于同步消费者。</p>\n<pre><code class=\"cpp\">std::mutex mutexConsumer; //消费者用来同步用的</code></pre>\n<p>上代码,这是线程同步需要的变量</p>\n<pre><code class=\"cpp\">struct ItemRepository\n{\n    std::deque&lt;int&gt; itemQueue; //缓冲区\n    const int MaxSize = 10; // 仓库所容纳的产品最大个数\n    int itemCounterUse = 0; //消费者用了多少\n    std::mutex mutex;// 互斥量,保护产品缓冲区\n    std::mutex mutexConsumer; //消费者用来同步用的\n    std::condition_variable bufferNotFull;     // 条件变量, 指产品仓库缓冲区不为满\n    std::condition_variable bufferNotEmpty;    // 条件变量, 指产品仓库缓冲区不为空\n}gItemRepository;   // 产品库全局变量，生产者和消费者操作该变量.</code></pre>\n<p>这里是实现代码</p>\n<pre><code class=\"cpp\">class Producer : public QThread\n{\n    Q_OBJECT\npublic:\n    Producer(QObject *parent = NULL) : QThread(parent)\n    {\n    }\n    // 生产 产品\n    void ProduceItem(ItemRepository &amp;itemRepo, int item)\n    {\n        std::unique_lock&lt;std::mutex&gt; lock(itemRepo.mutex);\n        if (itemRepo.itemQueue.size() == itemRepo.MaxSize)\n        {\n            itemRepo.bufferNotFull.wait(lock);\n            qDebug()&lt;&lt;&quot;product has full&quot;&lt;&lt;endl;\n        }\n\n//#ifdef Q_OS_WIN\n//        Sleep(1000);\n//#endif\n\n        itemRepo.itemQueue.push_back(item);         // 仓库放入产品\n        itemRepo.bufferNotEmpty.notify_all();  // 通知消费者仓库不为空\n    }\n\n    void run() override\n    {\n        for (int i = 1; i &lt;= kItemsToProduce; i++)\n        {\n            ProduceItem(gItemRepository, i);\n            {\n                qDebug()&lt;&lt;&quot;procut------------&quot;&lt;&lt;i&lt;&lt;endl;\n            }\n        }\n    }\n};\n\nclass Consumer : public QThread\n{\n    Q_OBJECT\npublic:\n    Consumer(QObject *parent = NULL) : QThread(parent)\n    {\n    }\n    // 消费 产品\n    int ConsumeItem(ItemRepository &amp;itemRepo)\n    {\n        int data;\n        std::unique_lock&lt;std::mutex&gt; lock(itemRepo.mutex);\n        if (itemRepo.itemQueue.empty())\n        {\n            itemRepo.bufferNotEmpty.wait(lock);\n        }\n        data = itemRepo.itemQueue.front();\n        itemRepo.itemQueue.pop_front();\n        itemRepo.bufferNotFull.notify_all();\n        return data;\n    }\n\n    void run() override\n    {\n        while (true)\n        {\n            int item = 0;\n            std::unique_lock&lt;std::mutex&gt; lock(gItemRepository.mutexConsumer);  // 仓库产品消费计数器保持多线程互斥\n            if (gItemRepository.itemCounterUse &lt; kItemsToProduce)\n            {\n                item = ConsumeItem(gItemRepository);    // 消费产品\n                gItemRepository.itemCounterUse++;  // 每消费一次进行计数器+1\n            }\n\n            lock.unlock();\n\n            if (this-&gt;objectName() == &quot;thread0&quot;)\n            {\n#ifdef Q_OS_WIN\n                Sleep(2000);\n#endif\n            }\n            else if (this-&gt;objectName() == &quot;thread1&quot;)\n            {\n#ifdef Q_OS_WIN\n                Sleep(3000);\n#endif\n            }\n            else if (this-&gt;objectName() == &quot;thread2&quot;)\n            {\n#ifdef Q_OS_WIN\n                Sleep(2000);\n#endif\n            }\n            qDebug()&lt;&lt;&quot;Consumer------------&quot;&lt;&lt;this-&gt;objectName()&lt;&lt;&quot;-----&quot;&lt;&lt;item&lt;&lt;endl;\n        }\n    }\n};\n</code></pre>\n<p>有一点需要注意的是，消费的时候，应该在消费者的外面，所以我打的log是解锁之后sleep。这时候应该及时通知其它消费者线程赶紧调度。这样避免cpu的资源浪费。</p>\n<p>稍微吐槽下，目前百度 Qt 单生产者多消费者的例子，十有八九是用Qt的信号量来实现的，可是写那篇文章的人也没有研究明白，那个例子有严重的bug。稍微变通下生产总数跟缓冲区总数就输出有问题了。慎用。</p>\n<p>CSDN的文章就是相互抄袭啊。逃）</p>\n<p>工程代码在这里</p>\n<p><a href=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread_Muliconsmer\" target=\"_blank\" rel=\"noopener\" title=\"https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread_Muliconsmer\">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread_Muliconsmer</a></p>\n","categories":[{"name":"Qt","path":"api/categories/Qt.json"},{"name":"Qt基础教程","path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"QThread","path":"api/tags/QThread.json"},{"name":"生产者","path":"api/tags/生产者.json"},{"name":"消费者","path":"api/tags/消费者.json"}]}