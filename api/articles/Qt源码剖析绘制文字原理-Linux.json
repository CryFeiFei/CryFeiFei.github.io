{"title":"Qt源码剖析绘制文字原理(Linux)","slug":"Qt源码剖析绘制文字原理-Linux","date":"2020-06-27T09:54:21.000Z","updated":"2020-06-27T09:55:55.781Z","comments":true,"path":"api/articles/Qt源码剖析绘制文字原理-Linux.json","excerpt":null,"covers":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Qt在Linux绘制字体是使用的FreeType。</p>\n<blockquote>\n<p>FreeType是一个用C语言实现的一个字体光栅化库。它可以用来将字符栅格化并映射成位图以及提供其他字体相关业务的支持。<br>FreeType并不提供API以运行更高级的功能，如文字布局或图形处理（例如彩色文本渲染、“空洞化”等）。然而，它提供了一个简单、易用并统一的接口来访问字体文件的内容，从而极大地简化了这些任务。它支持各种字体格式，包括TrueType、Type 1、以及OpenType。<br>FreeType在两个自由软件许可证的许可下发布：GNU通用公共许可证或者以及一个类BSD许可证。因此这个库能够使用于任何类型的项目中，无论其是否是专有软件。同时也包括正在使用的主要自由桌面系统软件。 </p>\n</blockquote>\n<p>流程很简单，Qt在绘制字体时，首先将字体中的描述点以及字形信息保存到QPainterPath中。然后再绘制出来。</p>\n<p>下面的代码是我从Qt中扣出来了，这是Qt具体描点到Path的过程，Qt在绘制大号字体的时候会调用下面的逻辑</p>\n<p>下面上代码</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>pro文件中加</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">LIBS <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span>lfreetype\nINCLUDEPATH <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>include<span class=\"token operator\">/</span>freetype2</code></pre>\n<p>头文件</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;freetype2/ft2build.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;freetype2/freetype/freetype.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;freetype/freetype.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;freetype/ftoutln.h></span></span></code></pre>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scaleOutline</span><span class=\"token punctuation\">(</span>FT_Face face<span class=\"token punctuation\">,</span> FT_GlyphSlot g<span class=\"token punctuation\">,</span> FT_Fixed x_scale<span class=\"token punctuation\">,</span> FT_Fixed y_scale<span class=\"token punctuation\">,</span> QVector<span class=\"token operator\">&lt;</span>QPoint<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> vectors<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    x_scale <span class=\"token operator\">=</span> <span class=\"token function\">FT_MulDiv</span><span class=\"token punctuation\">(</span>x_scale<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    y_scale <span class=\"token operator\">=</span> <span class=\"token function\">FT_MulDiv</span><span class=\"token punctuation\">(</span>y_scale<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FT_Vector <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> FT_Vector <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>n_points<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        p<span class=\"token operator\">-</span><span class=\"token operator\">></span>x <span class=\"token operator\">=</span> <span class=\"token function\">FT_MulFix</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token punctuation\">,</span> x_scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-</span><span class=\"token operator\">></span>y <span class=\"token operator\">=</span> <span class=\"token function\">FT_MulFix</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token punctuation\">,</span> y_scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vectors<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">QPoint</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 将字形中的</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> GLYPH2PATH_DEBUG QT_NO_QDEBUG_MACRO </span><span class=\"token comment\" spellcheck=\"true\">// qDebug</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">addGlyphToPath</span><span class=\"token punctuation\">(</span>FT_Face face<span class=\"token punctuation\">,</span> FT_GlyphSlot g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> QFixedPoint <span class=\"token operator\">&amp;</span>point<span class=\"token punctuation\">,</span> QPainterPath <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> FT_Fixed x_scale<span class=\"token punctuation\">,</span> FT_Fixed y_scale<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> qreal factor <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n    QVector<span class=\"token operator\">&lt;</span>QPoint<span class=\"token operator\">></span> vectors<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scaleOutline</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> x_scale<span class=\"token punctuation\">,</span> y_scale<span class=\"token punctuation\">,</span> vectors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//</span>\n    <span class=\"token keyword\">int</span> xMin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> xMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreach</span> <span class=\"token punctuation\">(</span>QPoint point<span class=\"token punctuation\">,</span> vectors<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> xMax<span class=\"token punctuation\">)</span>\n            xMax <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> xMin<span class=\"token punctuation\">)</span>\n            xMin <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> glyphWidth <span class=\"token operator\">=</span> xMax <span class=\"token operator\">-</span> xMin<span class=\"token punctuation\">;</span>\n    QPointF cp <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">toPointF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// convert the outline to a painter path</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>n_contours<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> last_point <span class=\"token operator\">=</span> g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>contours<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"contour:\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"to\"</span> <span class=\"token operator\">&lt;&lt;</span> last_point<span class=\"token punctuation\">;</span>\n        QPointF start <span class=\"token operator\">=</span> <span class=\"token function\">QPointF</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// start point is not on curve:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">[</span>last_point<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// end point is not on curve:</span>\n                <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" start and end point are not on curve\"</span><span class=\"token punctuation\">;</span>\n                start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">QPointF</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>last_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">,</span>\n                                <span class=\"token operator\">-</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>last_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" end point is on curve, start is not\"</span><span class=\"token punctuation\">;</span>\n                start <span class=\"token operator\">=</span> <span class=\"token function\">QPointF</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>last_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">,</span>\n                               <span class=\"token operator\">-</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>last_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">--</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// to use original start point as control point below</span>\n        <span class=\"token punctuation\">}</span>\n        start <span class=\"token operator\">+</span><span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" start at\"</span> <span class=\"token operator\">&lt;&lt;</span> start<span class=\"token punctuation\">;</span>\n        path<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        QPointF c<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> last_point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n            c<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cp <span class=\"token operator\">+</span> <span class=\"token function\">QPointF</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"tag =\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                               <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": on curve =\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>n<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>g<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                <span class=\"token comment\" spellcheck=\"true\">// cubic bezier element</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">--</span>i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n                <span class=\"token comment\" spellcheck=\"true\">// quadratic bezier element</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">--</span>i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" lineTo\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    path<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                    c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" cubicTo\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            path<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">cubicTo</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" closeSubpath\"</span><span class=\"token punctuation\">;</span>\n            path<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">closeSubpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">GLYPH2PATH_DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" close cubicTo\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            path<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">cubicTo</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">///////////////////</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//这里是调用freetype相关的函数</span>\n\n    QPainterPath path<span class=\"token punctuation\">;</span>\n    FT_Library library<span class=\"token punctuation\">;</span>\n    FT_Face face<span class=\"token punctuation\">;</span>\n    FT_Error error <span class=\"token operator\">=</span> <span class=\"token function\">FT_Init_FreeType</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>library <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QString strFileName <span class=\"token operator\">=</span> QString<span class=\"token operator\">::</span><span class=\"token function\">fromUtf8</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/zhangpf/freeType/FZXBSJW_0.TTF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string strFile <span class=\"token operator\">=</span> strFileName<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> fileName <span class=\"token operator\">=</span> strFile<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    error <span class=\"token operator\">=</span> <span class=\"token function\">FT_New_Face</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>face <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    uint ch <span class=\"token operator\">=</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">;</span>\n    FT_UInt idxGlyph <span class=\"token operator\">=</span> <span class=\"token function\">FT_Get_Char_Index</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FT_Set_Char_Size</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">,</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 这是斜体</span>\n<span class=\"token comment\" spellcheck=\"true\">//    FT_Matrix matrix;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    double angle = ( 25.0 / 360 ) * 3.14159 * 2; // 180/12=15 度</span>\n<span class=\"token comment\" spellcheck=\"true\">//    matrix.xx = (FT_Fixed)(cos(angle) * 0x10000);</span>\n<span class=\"token comment\" spellcheck=\"true\">//    matrix.xy = (FT_Fixed)(-sin(angle) * 0x10000);</span>\n<span class=\"token comment\" spellcheck=\"true\">//    matrix.yx = (FT_Fixed)(sin(angle) * 0x10000);</span>\n<span class=\"token comment\" spellcheck=\"true\">//    matrix.yy = (FT_Fixed)(cos(angle) * 0x10000);</span>\n<span class=\"token comment\" spellcheck=\"true\">//    FT_Set_Transform(face, &amp;matrix, 0); // 设置或重置旋转</span>\n    FT_Error err <span class=\"token operator\">=</span> <span class=\"token function\">FT_Load_Glyph</span> <span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">,</span> idxGlyph<span class=\"token punctuation\">,</span> FT_LOAD_NO_BITMAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FT_BBox bbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FT_Outline_Get_CBox</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* only oblique outline glyphs */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>format <span class=\"token operator\">!=</span> FT_GLYPH_FORMAT_OUTLINE <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 用这个也可以缩放一半</span>\n<span class=\"token comment\" spellcheck=\"true\">//    FT_Outline* outline = &amp;(face->glyph->outline);</span>\n<span class=\"token comment\" spellcheck=\"true\">//    FT_Matrix transform;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    transform.xx = 0x10000L * 0.5;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    transform.yx = 0x00000L;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    transform.xy = 0x00000L;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    transform.yy = 0x10000L;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    FT_Outline_Transform( outline, &amp;transform );</span>\n    QFixedPoint p<span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">FT_IS_SCALABLE</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"123\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">addGlyphToPath</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">,</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//宽度缩放一半</span></code></pre>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>最后在paintevent中可以绘制出来，由于字形的point中有负数，painter需要transform一下</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\">    QPainter <span class=\"token function\">painter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    QTransform transform<span class=\"token punctuation\">;</span>\n    transform<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    painter<span class=\"token punctuation\">.</span><span class=\"token function\">setTransform</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    painter<span class=\"token punctuation\">.</span><span class=\"token function\">drawPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>这是Qt绘制文字的一部分逻辑，我扣出来Demo来给大家学习。主要是使用了QPainterPath来描述字体中的点，以及保存成字体中的贝塞尔曲线。生成QPainterPath来描述具体的字形。代码中我还添加了缩放的变形，实际上字体的绘制变形有很多方法。就拿缩放来讲，就有这么几种</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// 用这个也可以缩放一半</span>\nFT_Outline<span class=\"token operator\">*</span> outline <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFT_Matrix transform<span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span>xx <span class=\"token operator\">=</span> <span class=\"token number\">0x10000L</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span>yx <span class=\"token operator\">=</span> <span class=\"token number\">0x00000L</span><span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">=</span> <span class=\"token number\">0x00000L</span><span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span>yy <span class=\"token operator\">=</span> <span class=\"token number\">0x10000L</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">FT_Outline_Transform</span><span class=\"token punctuation\">(</span> outline<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>transform <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 这是斜体实现，matrix.xx * 0.5 可以缩放 0.5倍</span>\nFT_Matrix matrix<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> angle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">25.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">360</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.14159</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 25 度</span>\nmatrix<span class=\"token punctuation\">.</span>xx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FT_Fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FT_Fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span>yx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FT_Fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span>yy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FT_Fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">FT_Set_Transform</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>matrix<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 设置或重置旋转</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//甚至可以在 点->path这一步来做   (face->units_per_EM &lt;&lt; 6) / 2,</span>\n <span class=\"token comment\" spellcheck=\"true\">//addGlyphToPath(face, face->glyph, p, &amp;path, (face->units_per_EM &lt;&lt; 6) / 2, face->units_per_EM &lt;&lt; 6);  //宽度缩放一半</span>\n <span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></code></pre>\n<p>所以大部分UI库都有自己的实现方法。这也是freetype灵活的地方.</p>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Qt在Linux绘制字体是使用的FreeType。</p>\n<blockquote>\n<p>FreeType是一个用C语言实现的一个字体光栅化库。它可以用来将字符栅格化并映射成位图以及提供其他字体相关业务的支持。<br>FreeType并不提供API以运行更高级的功能，如文字布局或图形处理（例如彩色文本渲染、“空洞化”等）。然而，它提供了一个简单、易用并统一的接口来访问字体文件的内容，从而极大地简化了这些任务。它支持各种字体格式，包括TrueType、Type 1、以及OpenType。<br>FreeType在两个自由软件许可证的许可下发布：GNU通用公共许可证或者以及一个类BSD许可证。因此这个库能够使用于任何类型的项目中，无论其是否是专有软件。同时也包括正在使用的主要自由桌面系统软件。 </p>\n</blockquote>\n<p>流程很简单，Qt在绘制字体时，首先将字体中的描述点以及字形信息保存到QPainterPath中。然后再绘制出来。</p>\n<p>下面的代码是我从Qt中扣出来了，这是Qt具体描点到Path的过程，Qt在绘制大号字体的时候会调用下面的逻辑</p>\n<p>下面上代码</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>pro文件中加</p>\n<pre><code class=\"cpp\">LIBS += -lfreetype\nINCLUDEPATH += /usr/include/freetype2</code></pre>\n<p>头文件</p>\n<pre><code class=\"cpp\">#include &lt;freetype2/ft2build.h&gt;\n#include &lt;freetype2/freetype/freetype.h&gt;\n#include &lt;freetype/freetype.h&gt;\n#include &lt;freetype/ftoutln.h&gt;</code></pre>\n<pre><code class=\"cpp\">static void scaleOutline(FT_Face face, FT_GlyphSlot g, FT_Fixed x_scale, FT_Fixed y_scale, QVector&lt;QPoint&gt;&amp; vectors)\n{\n    x_scale = FT_MulDiv(x_scale, 1 &lt;&lt; 10, face-&gt;units_per_EM);\n    y_scale = FT_MulDiv(y_scale, 1 &lt;&lt; 10, face-&gt;units_per_EM);\n    FT_Vector *p = g-&gt;outline.points;\n    const FT_Vector *e = p + g-&gt;outline.n_points;\n    while (p &lt; e) {\n        p-&gt;x = FT_MulFix(p-&gt;x, x_scale);\n        p-&gt;y = FT_MulFix(p-&gt;y, y_scale);\n        vectors.push_back(QPoint(p-&gt;x, p-&gt;y));\n        ++p;\n    }\n}\n\n// 将字形中的\n#define GLYPH2PATH_DEBUG QT_NO_QDEBUG_MACRO // qDebug\nvoid addGlyphToPath(FT_Face face, FT_GlyphSlot g, const QFixedPoint &amp;point, QPainterPath *path, FT_Fixed x_scale, FT_Fixed y_scale)\n{\n    const qreal factor = 1/64.;\n    QVector&lt;QPoint&gt; vectors;\n    scaleOutline(face, g, x_scale, y_scale, vectors);\n    //\n    int xMin = 0;\n    int xMax = 0;\n    foreach (QPoint point, vectors)\n    {\n        if (point.x() &gt; xMax)\n            xMax = point.x();\n        if (point.x() &lt; xMin)\n            xMin = point.x();\n    }\n    int glyphWidth = xMax - xMin;\n    QPointF cp = point.toPointF();\n    // convert the outline to a painter path\n    int i = 0;\n    for (int j = 0; j &lt; g-&gt;outline.n_contours; ++j) {\n        int last_point = g-&gt;outline.contours[j];\n        GLYPH2PATH_DEBUG() &lt;&lt; &quot;contour:&quot; &lt;&lt; i &lt;&lt; &quot;to&quot; &lt;&lt; last_point;\n        QPointF start = QPointF(g-&gt;outline.points[i].x*factor, -g-&gt;outline.points[i].y*factor);\n        if (!(g-&gt;outline.tags[i] &amp; 1)) { // start point is not on curve:\n            if (!(g-&gt;outline.tags[last_point] &amp; 1)) { // end point is not on curve:\n                GLYPH2PATH_DEBUG() &lt;&lt; &quot; start and end point are not on curve&quot;;\n                start = (QPointF(g-&gt;outline.points[last_point].x*factor,\n                                -g-&gt;outline.points[last_point].y*factor) + start) / 2.0;\n            } else {\n                GLYPH2PATH_DEBUG() &lt;&lt; &quot; end point is on curve, start is not&quot;;\n                start = QPointF(g-&gt;outline.points[last_point].x*factor,\n                               -g-&gt;outline.points[last_point].y*factor);\n            }\n            --i; // to use original start point as control point below\n        }\n        start += cp;\n        GLYPH2PATH_DEBUG() &lt;&lt; &quot; start at&quot; &lt;&lt; start;\n        path-&gt;moveTo(start);\n        QPointF c[4];\n        c[0] = start;\n        int n = 1;\n        while (i &lt; last_point) {\n            ++i;\n            c[n] = cp + QPointF(g-&gt;outline.points[i].x*factor, -g-&gt;outline.points[i].y*factor);\n            GLYPH2PATH_DEBUG() &lt;&lt; &quot; &quot; &lt;&lt; i &lt;&lt; c[n] &lt;&lt; &quot;tag =&quot; &lt;&lt; (int)g-&gt;outline.tags[i]\n                               &lt;&lt; &quot;: on curve =&quot; &lt;&lt; (bool)(g-&gt;outline.tags[i] &amp; 1);\n            ++n;\n            switch (g-&gt;outline.tags[i] &amp; 3) {\n            case 2:\n                // cubic bezier element\n                if (n &lt; 4)\n                    continue;\n                c[3] = (c[3] + c[2])/2;\n                --i;\n                break;\n            case 0:\n                // quadratic bezier element\n                if (n &lt; 3)\n                    continue;\n                c[3] = (c[1] + c[2])/2;\n                c[2] = (2*c[1] + c[3])/3;\n                c[1] = (2*c[1] + c[0])/3;\n                --i;\n                break;\n            case 1:\n            case 3:\n                if (n == 2) {\n                    GLYPH2PATH_DEBUG() &lt;&lt; &quot; lineTo&quot; &lt;&lt; c[1];\n                    path-&gt;lineTo(c[1]);\n                    c[0] = c[1];\n                    n = 1;\n                    continue;\n                } else if (n == 3) {\n                    c[3] = c[2];\n                    c[2] = (2*c[1] + c[3])/3;\n                    c[1] = (2*c[1] + c[0])/3;\n                }\n                break;\n            }\n            GLYPH2PATH_DEBUG() &lt;&lt; &quot; cubicTo&quot; &lt;&lt; c[1] &lt;&lt; c[2] &lt;&lt; c[3];\n            path-&gt;cubicTo(c[1], c[2], c[3]);\n            c[0] = c[3];\n            n = 1;\n        }\n        if (n == 1) {\n            GLYPH2PATH_DEBUG() &lt;&lt; &quot; closeSubpath&quot;;\n            path-&gt;closeSubpath();\n        } else {\n            c[3] = start;\n            if (n == 2) {\n                c[2] = (2*c[1] + c[3])/3;\n                c[1] = (2*c[1] + c[0])/3;\n            }\n            GLYPH2PATH_DEBUG() &lt;&lt; &quot; close cubicTo&quot; &lt;&lt; c[1] &lt;&lt; c[2] &lt;&lt; c[3];\n            path-&gt;cubicTo(c[1], c[2], c[3]);\n        }\n        ++i;\n    }\n}\n\n///////////////////\n\n    //这里是调用freetype相关的函数\n\n    QPainterPath path;\n    FT_Library library;\n    FT_Face face;\n    FT_Error error = FT_Init_FreeType( &amp;library );\n    QString strFileName = QString::fromUtf8(&quot;/home/zhangpf/freeType/FZXBSJW_0.TTF&quot;);\n    std::string strFile = strFileName.toStdString();\n    const char* fileName = strFile.c_str();\n    error = FT_New_Face(library, fileName, 0, &amp;face );\n    uint ch = &#39;h&#39;;\n    FT_UInt idxGlyph = FT_Get_Char_Index(face, ch);\n    FT_Set_Char_Size(face, face-&gt;units_per_EM &lt;&lt; 6, face-&gt;units_per_EM &lt;&lt; 6, 0, 0);\n\n// 这是斜体\n//    FT_Matrix matrix;\n//    double angle = ( 25.0 / 360 ) * 3.14159 * 2; // 180/12=15 度\n//    matrix.xx = (FT_Fixed)(cos(angle) * 0x10000);\n//    matrix.xy = (FT_Fixed)(-sin(angle) * 0x10000);\n//    matrix.yx = (FT_Fixed)(sin(angle) * 0x10000);\n//    matrix.yy = (FT_Fixed)(cos(angle) * 0x10000);\n//    FT_Set_Transform(face, &amp;matrix, 0); // 设置或重置旋转\n    FT_Error err = FT_Load_Glyph (face, idxGlyph, FT_LOAD_NO_BITMAP);\n    FT_BBox bbox = { 0 };\n    FT_Outline_Get_CBox(&amp;face-&gt;glyph-&gt;outline, &amp;bbox);\n    /* only oblique outline glyphs */\n    if ( face-&gt;glyph-&gt;format != FT_GLYPH_FORMAT_OUTLINE )\n      return;\n\n// 用这个也可以缩放一半\n//    FT_Outline* outline = &amp;(face-&gt;glyph-&gt;outline);\n//    FT_Matrix transform;\n//    transform.xx = 0x10000L * 0.5;\n//    transform.yx = 0x00000L;\n//    transform.xy = 0x00000L;\n//    transform.yy = 0x10000L;\n//    FT_Outline_Transform( outline, &amp;transform );\n    QFixedPoint p;\n    p.x = 0;\n    p.y = 0;\n    if (!FT_IS_SCALABLE(face))\n    {\n        qDebug()&lt;&lt;&quot;123&quot;&lt;&lt;endl;\n    }\n    else\n        addGlyphToPath(face, face-&gt;glyph, p, &amp;path, (face-&gt;units_per_EM &lt;&lt; 6) / 2, face-&gt;units_per_EM &lt;&lt; 6);  //宽度缩放一半</code></pre>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>最后在paintevent中可以绘制出来，由于字形的point中有负数，painter需要transform一下</p>\n<pre><code class=\"cpp\">    QPainter painter(this);\n    QTransform transform;\n    transform.translate(500,500);\n    painter.setTransform(transform);\n    painter.drawPath(path);</code></pre>\n<p>这是Qt绘制文字的一部分逻辑，我扣出来Demo来给大家学习。主要是使用了QPainterPath来描述字体中的点，以及保存成字体中的贝塞尔曲线。生成QPainterPath来描述具体的字形。代码中我还添加了缩放的变形，实际上字体的绘制变形有很多方法。就拿缩放来讲，就有这么几种</p>\n<pre><code class=\"cpp\">// 用这个也可以缩放一半\nFT_Outline* outline = &amp;(face-&gt;glyph-&gt;outline);\nFT_Matrix transform;\ntransform.xx = 0x10000L * 0.5;\ntransform.yx = 0x00000L;\ntransform.xy = 0x00000L;\ntransform.yy = 0x10000L;\n FT_Outline_Transform( outline, &amp;transform );\n\n// 这是斜体实现，matrix.xx * 0.5 可以缩放 0.5倍\nFT_Matrix matrix;\ndouble angle = ( 25.0 / 360 ) * 3.14159 * 2; // 25 度\nmatrix.xx = (FT_Fixed)(cos(angle) * 0x10000);\nmatrix.xy = (FT_Fixed)(-sin(angle) * 0x10000);\nmatrix.yx = (FT_Fixed)(sin(angle) * 0x10000);\nmatrix.yy = (FT_Fixed)(cos(angle) * 0x10000);\nFT_Set_Transform(face, &amp;matrix, 0); // 设置或重置旋转\n\n//甚至可以在 点-&gt;path这一步来做   (face-&gt;units_per_EM &lt;&lt; 6) / 2,\n //addGlyphToPath(face, face-&gt;glyph, p, &amp;path, (face-&gt;units_per_EM &lt;&lt; 6) / 2, face-&gt;units_per_EM &lt;&lt; 6);  //宽度缩放一半\n (face-&gt;units_per_EM &lt;&lt; 6) / 2,</code></pre>\n<p>所以大部分UI库都有自己的实现方法。这也是freetype灵活的地方.</p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Qt源码","path":"api/tags/Qt源码.json"},{"name":"Qt源码剖析","path":"api/tags/Qt源码剖析.json"}]}