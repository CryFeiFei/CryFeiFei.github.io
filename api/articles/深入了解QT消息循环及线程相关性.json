{"title":"深入了解QT消息循环及线程相关性","slug":"深入了解QT消息循环及线程相关性","date":"2020-06-27T15:01:06.000Z","updated":"2020-06-27T15:01:41.209Z","comments":true,"path":"api/articles/深入了解QT消息循环及线程相关性.json","excerpt":null,"covers":["/2020/06/27/shen-ru-liao-jie-qt-xiao-xi-xun-huan-ji-xian-cheng-xiang-guan-xing/1584530091352-tst.jpg"],"content":"<h1 id=\"一、什么是Qt消息循环\"><a href=\"#一、什么是Qt消息循环\" class=\"headerlink\" title=\"一、什么是Qt消息循环\"></a>一、什么是Qt消息循环</h1><p>  Qt消息循环，就是从一个队列中不断取出消息，并响应消息的过程。窗体的鼠标、键盘、输入法、绘制，各种消息，都来自于Qt的消息循环。以Windows操作系统为例，Qt接管Windows原生窗口消息，并翻译成Qt的消息，派发给程序下的各个子对象、子QWidget等，通过接管层，可以很好屏蔽不同平台之间的差异性，开发人员不需要关心Windows或者X11的消息的差异性，只需要搞清楚各个QEvent之间是什么含义。</p>\n<p>  最开始的Qt消息循环开始于QCoreApplication::exec()。用户创建出一个QCoreApplication，或者说更多情况下是QApplication，执行QCoreApplication::exec()，一个应用程序便开始了。QCoreApplication会不断从操作系统获取消息，并且分发给QObject。</p>\n<p>  如果没有消息循环，那么Qt的信号和槽无法完全使用，有些函数也无法正确执行。举个例子，通过QueuedConnection连接的信号，其实是将一个事件压入了消息循环，如果没有QCoreApplication::exec()，那么这个消息循环将永远无法派发到指定的对象。</p>\n<h1 id=\"二、什么是线程相关性\"><a href=\"#二、什么是线程相关性\" class=\"headerlink\" title=\"二、什么是线程相关性\"></a>二、什么是线程相关性</h1><p>准确点来说，应该是指QObject的线程相关性。以Qt文档中的示意图来作说明：</p>\n<p><img src=\"/2020/06/27/shen-ru-liao-jie-qt-xiao-xi-xun-huan-ji-xian-cheng-xiang-guan-xing/1584530091352-tst.jpg\" alt></p>\n<p>当我们创建一个QObject时，它会与创建自己所在的线程绑定。它参与的消息循环，其实是它所在线程的消息循环，如上图所示。假如某个线程没有默认的QThread::exec()，那么该线程上的QObject则无法接收到事件。另外，如果两个不同线程的QObject需要相互通信，那么只能通过QueuedConnection的方式，异步通知对方线程，在下一轮消息循环处理QObject的消息。</p>\n<p>QObject的线程相关性默认会和它的parent保持一致。如果一个QObject没有parent，那么可以通过moveToThread，将它的线程相关性切换到指定线程。</p>\n<p>了解QObject的线程相关性非常重要，很多初学者常常分不清一个多线程中哪些QObject应该由主线程创建，哪些应该由工作线程创建，我的观点是，它参与哪个消息循环，就由哪个来创建。</p>\n<p>正因为这样的特性，我们才可以理解什么叫做AutoConnection。通过AutoConnect连接的两个QObject，如果是在同一个线程，那么可以直接调用(DirectConnection)，如果不是在同一个线程，那么就通过事件通知的方式(QueuedConnection）来调用。通过信号和槽、事件或者QueuedConnection方式来进行线程间的通讯，尤其是与UI线程通讯，永远是最优雅的方式之一。</p>\n<p>希望大家看了这篇文章后能有所帮助。</p>\n<p>全文完。</p>\n<hr>\n<p>等等，这就完了？这算哪门子深入？？？？</p>\n<p>好吧！以下才是正文！</p>\n<p>真·深入了解QT消息循环及线程相关性</p>\n<h1 id=\"一、什么是消息循环\"><a href=\"#一、什么是消息循环\" class=\"headerlink\" title=\"一、什么是消息循环\"></a>一、什么是消息循环</h1><p>以Windows为例，在我们编写GUI程序，创建一个原生窗体时，总会要经历两个步骤：</p>\n<h2 id=\"1、注册一个窗体类-RegisterClassEx\"><a href=\"#1、注册一个窗体类-RegisterClassEx\" class=\"headerlink\" title=\"1、注册一个窗体类(RegisterClassEx):\"></a>1、注册一个窗体类(RegisterClassEx):</h2><p><a href=\"https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexa\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexa</a></p>\n<p>窗体类中，最重要的就是指定了一个窗口处理函数WNDPROC。所有此类型的窗口，收到事件后，都会回调到此处理函数中来执行。</p>\n<h2 id=\"2、创建一个窗体-CreateWindow\"><a href=\"#2、创建一个窗体-CreateWindow\" class=\"headerlink\" title=\"2、创建一个窗体(CreateWindow)\"></a>2、创建一个窗体(CreateWindow)</h2><p><a href=\"https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw</a></p>\n<p>一般地，我们可以创建很多个窗口，然后使用同一个窗体处理函数，通过创建时的参数来决定上下文，也就是到底是处理的是哪个Window，以及获取一些自定义结构等。这个函数大致定义了窗体的颜值，并且需要与第一步中的窗体类关联起来。这样一来，窗体就真正创建好了，并且也可以接收到系统发来的消息。</p>\n<p>接下来很重要的一点，就是关于消息循环的过程。<br>首先，用户通过GetMessage、PeekMessage等函数，从消息队列中取出事件，接下来，通过DispatchMessage来分发事件。系统将这个事件分发到对应的窗口处理函数WNDPROC中进行处理。<br>在绝大部分GUI程序中，GetMessage, DispatchMessage是写在一个死循环中的，除非程序退出，否则会一直处理各种事件。</p>\n<h1 id=\"二、消息队列的线程相关性\"><a href=\"#二、消息队列的线程相关性\" class=\"headerlink\" title=\"二、消息队列的线程相关性\"></a>二、消息队列的线程相关性</h1><p>依照MSDN的说法：</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues</a></p>\n<p>系统将用创建某Window的线程来分发消息。例如窗体1在线程A创建，窗体2在线程B创建，那么它们的WNDPROC则是由不同线程来回调的。一般地我们也只会在主线程中创建窗体，不过系统还是允许在各个线程中处理窗口的。</p>\n<h1 id=\"三、Qt消息循环的基础：窗体事件\"><a href=\"#三、Qt消息循环的基础：窗体事件\" class=\"headerlink\" title=\"三、Qt消息循环的基础：窗体事件\"></a>三、Qt消息循环的基础：窗体事件</h1><p>在Windows中，要处理事件一定要有一个窗体。在Qt中，事件一共有两类，一类是和窗体无关的实践，例如QTimerEvent，另外一类就是常见的窗体事件，如鼠标、键盘、绘制等事件。因此，qt至少有两个WNDPROC，一个处理Timer等事件，一个处理QWidget中的事件。</p>\n<p>刚刚也提到，Windows事件其实是和线程相关的，那么也就是说，对于每一个QObject的对象，它必须要有自己所在线程的信息。不同线程的对象是无法直接通信的，要通过事件才可以。</p>\n<p>在Qt中，消息循环在QEventLoop类中实现。通过QEventLoop::exec()可以进入一个消息循环的阻塞状态中，也就是不断地PeekMessage-DispatchMessage。其实，QEventLoop里面几乎没有实现任何细节，这可能有点令人迷惑，不过仔细想想，任何系统都可以通过QEventLoop来调用消息循环，说明里面一定有一层和系统相关的抽象，这个稍后会说到。</p>\n<p>不难想到，QEventLoop通过内部的一层抽象，来不断从系统获取和处理消息，而这一层抽象，是和线程相关的。所有相同的线程，完全可以共用这层抽象。接下来就开始解析Qt4.8中对此的实现。</p>\n<h1 id=\"四、实现\"><a href=\"#四、实现\" class=\"headerlink\" title=\"四、实现\"></a>四、实现</h1><h2 id=\"1-QAbstractEventDispatcher\"><a href=\"#1-QAbstractEventDispatcher\" class=\"headerlink\" title=\"1. QAbstractEventDispatcher\"></a>1. QAbstractEventDispatcher</h2><p>QAbstractEventDispatcher是一个处理PeekMessage-DispatchMessage的抽象接口。Windows上实现的派生类是QEventDispatcherWin32。QEventLoop从某个地方取到这个类的实例，来完成消息的获取和分发。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QEventDispatcherWin32::processEvents</span><span class=\"params\">(QEventLoop::ProcessEventsFlags flags)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Q_D(QEventDispatcherWin32);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!d-&gt;internalHwnd)</span><br><span class=\"line\">        createInternalHwnd();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!d-&gt;interrupt) &#123;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">            MSG msg;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> haveMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(flags &amp; QEventLoop::ExcludeUserInputEvents) &amp;&amp; !d-&gt;queuedUserInputEvents.isEmpty()) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                haveMessage = PeekMessage(&amp;msg, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, PM_REMOVE);</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!haveMessage) &#123;</span><br><span class=\"line\">                .....</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haveMessage) &#123;</span><br><span class=\"line\">                .....</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!filterEvent(&amp;msg)) &#123;</span><br><span class=\"line\">                    TranslateMessage(&amp;msg);</span><br><span class=\"line\">                    DispatchMessage(&amp;msg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .....</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            retVal = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (canWait);</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是QEventDispatcherWin32的具体实现。我省略掉了大部分代码，只留下几个关键部分。<br>首先是看循环部分，其实就像原生的Windows程序那样，PeekMessage, TranslateMessage, DispatchMessage。我们调用QEventLoop::exec()后，便马上调进了这里。<br>第二个值得注意的是，</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!d-&gt;internalHwnd)</span><br><span class=\"line\">    createInternalHwnd();</span><br></pre></td></tr></table></figure>\n\n<p>createInternalHwnd()，QT用它创建了一个不可见的窗口，并且为它注册了一个叫做qt_internal_proc的WNDPROC函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT QT_WIN_CALLBACK <span class=\"title\">qt_internal_proc</span><span class=\"params\">(HWND hwnd, UINT message, WPARAM wp, LPARAM lp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == WM_NCCREATE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    MSG msg;</span><br><span class=\"line\">    msg.hwnd = hwnd;</span><br><span class=\"line\">    msg.message = message;</span><br><span class=\"line\">    msg.wParam = wp;</span><br><span class=\"line\">    msg.lParam = lp;</span><br><span class=\"line\">    QCoreApplication *app = QCoreApplication::instance();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!app) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message == WM_TIMER)</span><br><span class=\"line\">            KillTimer(hwnd, wp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (app-&gt;filterEvent(&amp;msg, &amp;result)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GWLP_USERDATA</span></span><br><span class=\"line\">    QEventDispatcherWin32 *q = (QEventDispatcherWin32 *) GetWindowLongPtr(hwnd, GWLP_USERDATA);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    QEventDispatcherWin32 *q = (QEventDispatcherWin32 *) GetWindowLong(hwnd, GWL_USERDATA);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    QEventDispatcherWin32Private *d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q != <span class=\"number\">0</span>)</span><br><span class=\"line\">        d = q-&gt;d_func();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == WM_QT_SOCKETNOTIFIER) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// socket notifier message</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message == WM_QT_SENDPOSTEDEVENTS</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message == WM_TIMER) &#123;</span><br><span class=\"line\">        Q_ASSERT(d != <span class=\"number\">0</span>);</span><br><span class=\"line\">        d-&gt;sendTimerEvent(wp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DefWindowProc(hwnd, message, wp, lp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个隐藏的窗口处理了几个事件。其中最常用的事件，肯定就是WM_TIMER了。通过QTimer::singleShot进来的事件，最终通过registerTimer()设置了计时器。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QEventDispatcherWin32Private::registerTimer</span><span class=\"params\">(WinTimerInfo *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Q_ASSERT(internalHwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    Q_Q(QEventDispatcherWin32);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t-&gt;interval &gt; <span class=\"number\">20</span> || !t-&gt;interval || !qtimeSetEvent) &#123;</span><br><span class=\"line\">        ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t-&gt;interval)  <span class=\"comment\">// optimization for single-shot-zero-timer</span></span><br><span class=\"line\">            QCoreApplication::postEvent(q, <span class=\"keyword\">new</span> QZeroTimerEvent(t-&gt;timerId));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ok = SetTimer(internalHwnd, t-&gt;timerId, (uint) t-&gt;interval, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ok = t-&gt;fastTimerId = qtimeSetEvent(t-&gt;interval, <span class=\"number\">1</span>, qt_fast_timer_proc, (DWORD_PTR)t,</span><br><span class=\"line\">                                            TIME_CALLBACK_FUNCTION | TIME_PERIODIC | TIME_KILL_SYNCHRONOUS);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ok == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// fall back to normal timer if no more multimedia timers available</span></span><br><span class=\"line\">            ok = SetTimer(internalHwnd, t-&gt;timerId, (uint) t-&gt;interval, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ok == <span class=\"number\">0</span>)</span><br><span class=\"line\">        qErrnoWarning(<span class=\"string\">\"QEventDispatcherWin32::registerTimer: Failed to create a timer\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当SetTimer超时后，WM_TIMER将发送给internalHwnd，接下来它调用sendTimerEvent，通知接收的QObject，达到计时器的效果。</p>\n<p>通过创建一个隐藏的窗口，来处理一些特定的事件，这便是Qt消息循环的一个小小的套路。</p>\n<h2 id=\"2-QThreadData\"><a href=\"#2-QThreadData\" class=\"headerlink\" title=\"2. QThreadData\"></a>2. QThreadData</h2><p>你可能会问，QEventDispatcherWin32的实例存放在哪里。前文也说过，QEventDispatcherWin32是跟着线程走的，所以没有必要每个QEventLoop都存一个。事实上，它存放在一个叫做QThreadData的结构中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QThreadData</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    QAtomicInt _ref;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    QThreadData(<span class=\"keyword\">int</span> initialRefCount = <span class=\"number\">1</span>);</span><br><span class=\"line\">    ~QThreadData();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> QThreadData *<span class=\"title\">current</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> QThreadData *<span class=\"title\">get2</span><span class=\"params\">(QThread *thread)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; Q_ASSERT_X(thread != <span class=\"number\">0</span>, <span class=\"string\">\"QThread\"</span>, <span class=\"string\">\"internal error\"</span>); <span class=\"keyword\">return</span> thread-&gt;d_func()-&gt;data; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ref</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deref</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QThread *thread;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> quitNow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> loopLevel;</span><br><span class=\"line\">    QAbstractEventDispatcher *eventDispatcher;</span><br><span class=\"line\">    QStack&lt;QEventLoop *&gt; eventLoops;</span><br><span class=\"line\">    QPostEventList postEventList;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> canWait;</span><br><span class=\"line\">    QVector&lt;<span class=\"keyword\">void</span> *&gt; tls;</span><br><span class=\"line\"></span><br><span class=\"line\">    QMutex mutex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> Q_OS_SYMBIAN</span></span><br><span class=\"line\">    RThread symbian_thread_handle;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>仔细看看这个结构，它几个主要的成员，eventDispatcher，就是我们刚刚说的QEventDispatcherWin32实例。eventLoops，这个是嵌套的消息循环，以及loopLevel，是它嵌套的层数（如QEventLoop::exec里面调用QEventLoop:exec）。里面还有个postEventList，表示当前的Qt事件队列，thread表示它当前所在的线程，以及一个_ref引用计数。</p>\n<p>QThreadData奇妙在，它是跟着线程走的。在QThreadData::current中我们可以看到：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QThreadData *<span class=\"title\">QThreadData::current</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    qt_create_tls();</span><br><span class=\"line\">    QThreadData *threadData = <span class=\"keyword\">reinterpret_cast</span>&lt;QThreadData *&gt;(TlsGetValue(qt_current_thread_data_tls_index));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!threadData) &#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            threadData = <span class=\"keyword\">new</span> QThreadData;</span><br><span class=\"line\">            <span class=\"comment\">// This needs to be called prior to new AdoptedThread() to</span></span><br><span class=\"line\">            <span class=\"comment\">// avoid recursion.</span></span><br><span class=\"line\">            TlsSetValue(qt_current_thread_data_tls_index, threadData);</span><br><span class=\"line\">            QT_TRY &#123;</span><br><span class=\"line\">                threadData-&gt;thread = <span class=\"keyword\">new</span> QAdoptedThread(threadData);</span><br><span class=\"line\">            &#125; QT_CATCH(...) &#123;</span><br><span class=\"line\">                TlsSetValue(qt_current_thread_data_tls_index, <span class=\"number\">0</span>);</span><br><span class=\"line\">                threadData-&gt;deref();</span><br><span class=\"line\">                threadData = <span class=\"number\">0</span>;</span><br><span class=\"line\">                QT_RETHROW;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            threadData-&gt;deref();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> threadData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，调用此方法后，如果线程栈的局部存储区中没有QThreadData，一个新的QThreadData就会被创建，并且设置到当前线程的局部存储区，并且将当前线程绑定在一个假的QAdoptedThread中。</p>\n<p>接下来是最重要的一点：所有的QObject中都有QThreadData的成员，并且有下列初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QObject::QObject(QObjectPrivate &amp;dd, QObject *parent)</span><br><span class=\"line\">    : d_ptr(&amp;dd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_D(QObject);</span><br><span class=\"line\">    d_ptr-&gt;q_ptr = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    d-&gt;threadData = (parent &amp;&amp; !parent-&gt;thread()) ? parent-&gt;d_func()-&gt;threadData : QThreadData::current();</span><br><span class=\"line\">    d-&gt;threadData-&gt;ref();</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就非常清晰明了了，我创建一个QObject对象，它的threadData，将和parent一致。若parent没有threadData，或者是没有parent，将调用QThreadData::current获取一个新的、当前线程的QThreadData，并且将当前线程设置为一个QAdoptedThread的实例。</p>\n<p>下面看一下QEventLoop::processEvents的实现，QEventLoop::exec()最终调入此处：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QEventLoop::processEvents</span><span class=\"params\">(ProcessEventsFlags flags)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Q_D(QEventLoop);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!d-&gt;threadData-&gt;eventDispatcher)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flags &amp; DeferredDeletion)</span><br><span class=\"line\">        QCoreApplication::sendPostedEvents(<span class=\"number\">0</span>, QEvent::DeferredDelete);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d-&gt;threadData-&gt;eventDispatcher-&gt;processEvents(flags);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原来QEventLoop作为一个QObject，它也有threadData。同一个线程threadData只创建一次，所以它们取出来的eventDispatcher也都是相同的。这意味着所有的相同线程的QObject，共享一份threadData，也就是同一份eventDispatcher, postEventList等。这也就说明了，我们下图是如何实现的：</p>\n<p>事件保存在QThreadData::postEventList中，不同线程有不同的QThreadData实例</p>\n<h2 id=\"3-QThread\"><a href=\"#3-QThread\" class=\"headerlink\" title=\"3. QThread\"></a>3. QThread</h2><p>接下来看看当我们创建一个线程时，会发生什么：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QThreadPrivate::QThreadPrivate(QThreadData *d)</span><br><span class=\"line\">    : QObjectPrivate(), running(<span class=\"literal\">false</span>), finished(<span class=\"literal\">false</span>), terminated(<span class=\"literal\">false</span>), exited(<span class=\"literal\">false</span>), returnCode(<span class=\"number\">-1</span>),</span><br><span class=\"line\">      stackSize(<span class=\"number\">0</span>), priority(QThread::InheritPriority), data(d)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data)</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> QThreadData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QThread::QThread(QObject *parent)</span><br><span class=\"line\">    : QObject(*(<span class=\"keyword\">new</span> QThreadPrivate), parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_D(QThread);</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr, \"QThreadData %p created for thread %p\\n\", d-&gt;data, this);</span></span><br><span class=\"line\">    d-&gt;data-&gt;thread = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当新建一个QThread时，二话不说它先是建立了一个新的QThreadData，并设置thread为自己。和QThreadData::current不同的是，QThreadData::current是被动生成一个QThreadData，因为它并没有指定某个QThread。而创建QThread则可以“名正言顺”创建QThreadData，然后将它的thread设置为自己。由于它还没有执行，因此并没有设置TLS。</p>\n<p>当一个QThread要开始执行后：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QThread::start</span><span class=\"params\">(Priority priority)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    d-&gt;handle = (Qt::HANDLE) _beginthreadex(<span class=\"literal\">NULL</span>, d-&gt;stackSize, QThreadPrivate::start,</span><br><span class=\"line\">                                            <span class=\"keyword\">this</span>, CREATE_SUSPENDED, &amp;(d-&gt;id));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> __stdcall <span class=\"title\">QThreadPrivate::start</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QThread *thr = <span class=\"keyword\">reinterpret_cast</span>&lt;QThread *&gt;(arg);</span><br><span class=\"line\">    QThreadData *data = QThreadData::get2(thr);</span><br><span class=\"line\"></span><br><span class=\"line\">    qt_create_tls();</span><br><span class=\"line\">    TlsSetValue(qt_current_thread_data_tls_index, data);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    data-&gt;quitNow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ### <span class=\"doctag\">TODO:</span> allow the user to create a custom event dispatcher</span></span><br><span class=\"line\">    createEventDispatcher(data);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，TLS被设置成了刚刚QThread创建的QThreadData实例，那么之后在这个线程中，QThreadData::current就可以取到对应的信息了。它紧接着创建了event dispatcher，也就是QEventDispatcherWin32，并且塞给了QThreadData，保证这个线程中的消息循环都是通过此QEventDispatcherWin32。</p>\n<p>需要注意的是，如果不是通过QThread创建的QThreadData（即通过QThreadData::current来创建的）默认是没有event dispatcher的，所以你无法对一个孤立的QObject分发事件。QCoreApplication并没有继承QThread，它通过QThreadData::current获取了实例后自己设置了event dispatcher来实现消息的分发。</p>\n<p>这样一来一切都说得通了，为什么事件是跟着线程走的，为什么每个线程都有独立的消息循环，为什么需要moveToThread，一切原因，都在QThreadData里。</p>\n<h2 id=\"4-QWidget消息循环\"><a href=\"#4-QWidget消息循环\" class=\"headerlink\" title=\"4. QWidget消息循环\"></a>4. QWidget消息循环</h2><p>刚刚看到每一个QEventDispatcherWin32都会创建一个隐藏的窗口来处理WM_TIMER等事件，对于普通的QWidget来说，它们的消息处理函数叫做QtWndProc，定义在了qapplication_win.cpp中。它里面无非就是将拿到的HWND映射到正确的QWidget中，然后翻译成Qt事件。Qt很巧妙地将QWidget<em>强行转换为了QETWidget</em>，实现了私有成员的封装，不过这个就已经超过我们讨论的范畴了。</p>\n<p>以上便是Qt消息循环和线程相关的秘密，虽然Qt5的代码还没有仔细研究过，但是大体上变化应该不大，希望大家看完后，能对Qt有一个【卧槽好屌啊】这样的感受。</p>\n","more":"<h1 id=\"一、什么是Qt消息循环\"><a href=\"#一、什么是Qt消息循环\" class=\"headerlink\" title=\"一、什么是Qt消息循环\"></a>一、什么是Qt消息循环</h1><p>  Qt消息循环，就是从一个队列中不断取出消息，并响应消息的过程。窗体的鼠标、键盘、输入法、绘制，各种消息，都来自于Qt的消息循环。以Windows操作系统为例，Qt接管Windows原生窗口消息，并翻译成Qt的消息，派发给程序下的各个子对象、子QWidget等，通过接管层，可以很好屏蔽不同平台之间的差异性，开发人员不需要关心Windows或者X11的消息的差异性，只需要搞清楚各个QEvent之间是什么含义。</p>\n<p>  最开始的Qt消息循环开始于QCoreApplication::exec()。用户创建出一个QCoreApplication，或者说更多情况下是QApplication，执行QCoreApplication::exec()，一个应用程序便开始了。QCoreApplication会不断从操作系统获取消息，并且分发给QObject。</p>\n<p>  如果没有消息循环，那么Qt的信号和槽无法完全使用，有些函数也无法正确执行。举个例子，通过QueuedConnection连接的信号，其实是将一个事件压入了消息循环，如果没有QCoreApplication::exec()，那么这个消息循环将永远无法派发到指定的对象。</p>\n<h1 id=\"二、什么是线程相关性\"><a href=\"#二、什么是线程相关性\" class=\"headerlink\" title=\"二、什么是线程相关性\"></a>二、什么是线程相关性</h1><p>准确点来说，应该是指QObject的线程相关性。以Qt文档中的示意图来作说明：</p>\n<p><img src=\"/2020/06/27/shen-ru-liao-jie-qt-xiao-xi-xun-huan-ji-xian-cheng-xiang-guan-xing/1584530091352-tst.jpg\" alt></p>\n<p>当我们创建一个QObject时，它会与创建自己所在的线程绑定。它参与的消息循环，其实是它所在线程的消息循环，如上图所示。假如某个线程没有默认的QThread::exec()，那么该线程上的QObject则无法接收到事件。另外，如果两个不同线程的QObject需要相互通信，那么只能通过QueuedConnection的方式，异步通知对方线程，在下一轮消息循环处理QObject的消息。</p>\n<p>QObject的线程相关性默认会和它的parent保持一致。如果一个QObject没有parent，那么可以通过moveToThread，将它的线程相关性切换到指定线程。</p>\n<p>了解QObject的线程相关性非常重要，很多初学者常常分不清一个多线程中哪些QObject应该由主线程创建，哪些应该由工作线程创建，我的观点是，它参与哪个消息循环，就由哪个来创建。</p>\n<p>正因为这样的特性，我们才可以理解什么叫做AutoConnection。通过AutoConnect连接的两个QObject，如果是在同一个线程，那么可以直接调用(DirectConnection)，如果不是在同一个线程，那么就通过事件通知的方式(QueuedConnection）来调用。通过信号和槽、事件或者QueuedConnection方式来进行线程间的通讯，尤其是与UI线程通讯，永远是最优雅的方式之一。</p>\n<p>希望大家看了这篇文章后能有所帮助。</p>\n<p>全文完。</p>\n<hr>\n<p>等等，这就完了？这算哪门子深入？？？？</p>\n<p>好吧！以下才是正文！</p>\n<p>真·深入了解QT消息循环及线程相关性</p>\n<h1 id=\"一、什么是消息循环\"><a href=\"#一、什么是消息循环\" class=\"headerlink\" title=\"一、什么是消息循环\"></a>一、什么是消息循环</h1><p>以Windows为例，在我们编写GUI程序，创建一个原生窗体时，总会要经历两个步骤：</p>\n<h2 id=\"1、注册一个窗体类-RegisterClassEx\"><a href=\"#1、注册一个窗体类-RegisterClassEx\" class=\"headerlink\" title=\"1、注册一个窗体类(RegisterClassEx):\"></a>1、注册一个窗体类(RegisterClassEx):</h2><p><a href=\"https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexa\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexa</a></p>\n<p>窗体类中，最重要的就是指定了一个窗口处理函数WNDPROC。所有此类型的窗口，收到事件后，都会回调到此处理函数中来执行。</p>\n<h2 id=\"2、创建一个窗体-CreateWindow\"><a href=\"#2、创建一个窗体-CreateWindow\" class=\"headerlink\" title=\"2、创建一个窗体(CreateWindow)\"></a>2、创建一个窗体(CreateWindow)</h2><p><a href=\"https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw</a></p>\n<p>一般地，我们可以创建很多个窗口，然后使用同一个窗体处理函数，通过创建时的参数来决定上下文，也就是到底是处理的是哪个Window，以及获取一些自定义结构等。这个函数大致定义了窗体的颜值，并且需要与第一步中的窗体类关联起来。这样一来，窗体就真正创建好了，并且也可以接收到系统发来的消息。</p>\n<p>接下来很重要的一点，就是关于消息循环的过程。<br>首先，用户通过GetMessage、PeekMessage等函数，从消息队列中取出事件，接下来，通过DispatchMessage来分发事件。系统将这个事件分发到对应的窗口处理函数WNDPROC中进行处理。<br>在绝大部分GUI程序中，GetMessage, DispatchMessage是写在一个死循环中的，除非程序退出，否则会一直处理各种事件。</p>\n<h1 id=\"二、消息队列的线程相关性\"><a href=\"#二、消息队列的线程相关性\" class=\"headerlink\" title=\"二、消息队列的线程相关性\"></a>二、消息队列的线程相关性</h1><p>依照MSDN的说法：</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues</a></p>\n<p>系统将用创建某Window的线程来分发消息。例如窗体1在线程A创建，窗体2在线程B创建，那么它们的WNDPROC则是由不同线程来回调的。一般地我们也只会在主线程中创建窗体，不过系统还是允许在各个线程中处理窗口的。</p>\n<h1 id=\"三、Qt消息循环的基础：窗体事件\"><a href=\"#三、Qt消息循环的基础：窗体事件\" class=\"headerlink\" title=\"三、Qt消息循环的基础：窗体事件\"></a>三、Qt消息循环的基础：窗体事件</h1><p>在Windows中，要处理事件一定要有一个窗体。在Qt中，事件一共有两类，一类是和窗体无关的实践，例如QTimerEvent，另外一类就是常见的窗体事件，如鼠标、键盘、绘制等事件。因此，qt至少有两个WNDPROC，一个处理Timer等事件，一个处理QWidget中的事件。</p>\n<p>刚刚也提到，Windows事件其实是和线程相关的，那么也就是说，对于每一个QObject的对象，它必须要有自己所在线程的信息。不同线程的对象是无法直接通信的，要通过事件才可以。</p>\n<p>在Qt中，消息循环在QEventLoop类中实现。通过QEventLoop::exec()可以进入一个消息循环的阻塞状态中，也就是不断地PeekMessage-DispatchMessage。其实，QEventLoop里面几乎没有实现任何细节，这可能有点令人迷惑，不过仔细想想，任何系统都可以通过QEventLoop来调用消息循环，说明里面一定有一层和系统相关的抽象，这个稍后会说到。</p>\n<p>不难想到，QEventLoop通过内部的一层抽象，来不断从系统获取和处理消息，而这一层抽象，是和线程相关的。所有相同的线程，完全可以共用这层抽象。接下来就开始解析Qt4.8中对此的实现。</p>\n<h1 id=\"四、实现\"><a href=\"#四、实现\" class=\"headerlink\" title=\"四、实现\"></a>四、实现</h1><h2 id=\"1-QAbstractEventDispatcher\"><a href=\"#1-QAbstractEventDispatcher\" class=\"headerlink\" title=\"1. QAbstractEventDispatcher\"></a>1. QAbstractEventDispatcher</h2><p>QAbstractEventDispatcher是一个处理PeekMessage-DispatchMessage的抽象接口。Windows上实现的派生类是QEventDispatcherWin32。QEventLoop从某个地方取到这个类的实例，来完成消息的获取和分发。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QEventDispatcherWin32::processEvents</span><span class=\"params\">(QEventLoop::ProcessEventsFlags flags)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Q_D(QEventDispatcherWin32);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!d-&gt;internalHwnd)</span><br><span class=\"line\">        createInternalHwnd();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!d-&gt;interrupt) &#123;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">            MSG msg;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> haveMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(flags &amp; QEventLoop::ExcludeUserInputEvents) &amp;&amp; !d-&gt;queuedUserInputEvents.isEmpty()) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                haveMessage = PeekMessage(&amp;msg, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, PM_REMOVE);</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!haveMessage) &#123;</span><br><span class=\"line\">                .....</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haveMessage) &#123;</span><br><span class=\"line\">                .....</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!filterEvent(&amp;msg)) &#123;</span><br><span class=\"line\">                    TranslateMessage(&amp;msg);</span><br><span class=\"line\">                    DispatchMessage(&amp;msg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .....</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            retVal = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (canWait);</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是QEventDispatcherWin32的具体实现。我省略掉了大部分代码，只留下几个关键部分。<br>首先是看循环部分，其实就像原生的Windows程序那样，PeekMessage, TranslateMessage, DispatchMessage。我们调用QEventLoop::exec()后，便马上调进了这里。<br>第二个值得注意的是，</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!d-&gt;internalHwnd)</span><br><span class=\"line\">    createInternalHwnd();</span><br></pre></td></tr></table></figure>\n\n<p>createInternalHwnd()，QT用它创建了一个不可见的窗口，并且为它注册了一个叫做qt_internal_proc的WNDPROC函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT QT_WIN_CALLBACK <span class=\"title\">qt_internal_proc</span><span class=\"params\">(HWND hwnd, UINT message, WPARAM wp, LPARAM lp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == WM_NCCREATE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    MSG msg;</span><br><span class=\"line\">    msg.hwnd = hwnd;</span><br><span class=\"line\">    msg.message = message;</span><br><span class=\"line\">    msg.wParam = wp;</span><br><span class=\"line\">    msg.lParam = lp;</span><br><span class=\"line\">    QCoreApplication *app = QCoreApplication::instance();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!app) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message == WM_TIMER)</span><br><span class=\"line\">            KillTimer(hwnd, wp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (app-&gt;filterEvent(&amp;msg, &amp;result)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GWLP_USERDATA</span></span><br><span class=\"line\">    QEventDispatcherWin32 *q = (QEventDispatcherWin32 *) GetWindowLongPtr(hwnd, GWLP_USERDATA);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    QEventDispatcherWin32 *q = (QEventDispatcherWin32 *) GetWindowLong(hwnd, GWL_USERDATA);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    QEventDispatcherWin32Private *d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q != <span class=\"number\">0</span>)</span><br><span class=\"line\">        d = q-&gt;d_func();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == WM_QT_SOCKETNOTIFIER) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// socket notifier message</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message == WM_QT_SENDPOSTEDEVENTS</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message == WM_TIMER) &#123;</span><br><span class=\"line\">        Q_ASSERT(d != <span class=\"number\">0</span>);</span><br><span class=\"line\">        d-&gt;sendTimerEvent(wp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DefWindowProc(hwnd, message, wp, lp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个隐藏的窗口处理了几个事件。其中最常用的事件，肯定就是WM_TIMER了。通过QTimer::singleShot进来的事件，最终通过registerTimer()设置了计时器。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QEventDispatcherWin32Private::registerTimer</span><span class=\"params\">(WinTimerInfo *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Q_ASSERT(internalHwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    Q_Q(QEventDispatcherWin32);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t-&gt;interval &gt; <span class=\"number\">20</span> || !t-&gt;interval || !qtimeSetEvent) &#123;</span><br><span class=\"line\">        ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t-&gt;interval)  <span class=\"comment\">// optimization for single-shot-zero-timer</span></span><br><span class=\"line\">            QCoreApplication::postEvent(q, <span class=\"keyword\">new</span> QZeroTimerEvent(t-&gt;timerId));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ok = SetTimer(internalHwnd, t-&gt;timerId, (uint) t-&gt;interval, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ok = t-&gt;fastTimerId = qtimeSetEvent(t-&gt;interval, <span class=\"number\">1</span>, qt_fast_timer_proc, (DWORD_PTR)t,</span><br><span class=\"line\">                                            TIME_CALLBACK_FUNCTION | TIME_PERIODIC | TIME_KILL_SYNCHRONOUS);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ok == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// fall back to normal timer if no more multimedia timers available</span></span><br><span class=\"line\">            ok = SetTimer(internalHwnd, t-&gt;timerId, (uint) t-&gt;interval, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ok == <span class=\"number\">0</span>)</span><br><span class=\"line\">        qErrnoWarning(<span class=\"string\">\"QEventDispatcherWin32::registerTimer: Failed to create a timer\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当SetTimer超时后，WM_TIMER将发送给internalHwnd，接下来它调用sendTimerEvent，通知接收的QObject，达到计时器的效果。</p>\n<p>通过创建一个隐藏的窗口，来处理一些特定的事件，这便是Qt消息循环的一个小小的套路。</p>\n<h2 id=\"2-QThreadData\"><a href=\"#2-QThreadData\" class=\"headerlink\" title=\"2. QThreadData\"></a>2. QThreadData</h2><p>你可能会问，QEventDispatcherWin32的实例存放在哪里。前文也说过，QEventDispatcherWin32是跟着线程走的，所以没有必要每个QEventLoop都存一个。事实上，它存放在一个叫做QThreadData的结构中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QThreadData</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    QAtomicInt _ref;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    QThreadData(<span class=\"keyword\">int</span> initialRefCount = <span class=\"number\">1</span>);</span><br><span class=\"line\">    ~QThreadData();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> QThreadData *<span class=\"title\">current</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> QThreadData *<span class=\"title\">get2</span><span class=\"params\">(QThread *thread)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; Q_ASSERT_X(thread != <span class=\"number\">0</span>, <span class=\"string\">\"QThread\"</span>, <span class=\"string\">\"internal error\"</span>); <span class=\"keyword\">return</span> thread-&gt;d_func()-&gt;data; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ref</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deref</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QThread *thread;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> quitNow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> loopLevel;</span><br><span class=\"line\">    QAbstractEventDispatcher *eventDispatcher;</span><br><span class=\"line\">    QStack&lt;QEventLoop *&gt; eventLoops;</span><br><span class=\"line\">    QPostEventList postEventList;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> canWait;</span><br><span class=\"line\">    QVector&lt;<span class=\"keyword\">void</span> *&gt; tls;</span><br><span class=\"line\"></span><br><span class=\"line\">    QMutex mutex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> Q_OS_SYMBIAN</span></span><br><span class=\"line\">    RThread symbian_thread_handle;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>仔细看看这个结构，它几个主要的成员，eventDispatcher，就是我们刚刚说的QEventDispatcherWin32实例。eventLoops，这个是嵌套的消息循环，以及loopLevel，是它嵌套的层数（如QEventLoop::exec里面调用QEventLoop:exec）。里面还有个postEventList，表示当前的Qt事件队列，thread表示它当前所在的线程，以及一个_ref引用计数。</p>\n<p>QThreadData奇妙在，它是跟着线程走的。在QThreadData::current中我们可以看到：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QThreadData *<span class=\"title\">QThreadData::current</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    qt_create_tls();</span><br><span class=\"line\">    QThreadData *threadData = <span class=\"keyword\">reinterpret_cast</span>&lt;QThreadData *&gt;(TlsGetValue(qt_current_thread_data_tls_index));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!threadData) &#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            threadData = <span class=\"keyword\">new</span> QThreadData;</span><br><span class=\"line\">            <span class=\"comment\">// This needs to be called prior to new AdoptedThread() to</span></span><br><span class=\"line\">            <span class=\"comment\">// avoid recursion.</span></span><br><span class=\"line\">            TlsSetValue(qt_current_thread_data_tls_index, threadData);</span><br><span class=\"line\">            QT_TRY &#123;</span><br><span class=\"line\">                threadData-&gt;thread = <span class=\"keyword\">new</span> QAdoptedThread(threadData);</span><br><span class=\"line\">            &#125; QT_CATCH(...) &#123;</span><br><span class=\"line\">                TlsSetValue(qt_current_thread_data_tls_index, <span class=\"number\">0</span>);</span><br><span class=\"line\">                threadData-&gt;deref();</span><br><span class=\"line\">                threadData = <span class=\"number\">0</span>;</span><br><span class=\"line\">                QT_RETHROW;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            threadData-&gt;deref();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> threadData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，调用此方法后，如果线程栈的局部存储区中没有QThreadData，一个新的QThreadData就会被创建，并且设置到当前线程的局部存储区，并且将当前线程绑定在一个假的QAdoptedThread中。</p>\n<p>接下来是最重要的一点：所有的QObject中都有QThreadData的成员，并且有下列初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QObject::QObject(QObjectPrivate &amp;dd, QObject *parent)</span><br><span class=\"line\">    : d_ptr(&amp;dd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_D(QObject);</span><br><span class=\"line\">    d_ptr-&gt;q_ptr = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    d-&gt;threadData = (parent &amp;&amp; !parent-&gt;thread()) ? parent-&gt;d_func()-&gt;threadData : QThreadData::current();</span><br><span class=\"line\">    d-&gt;threadData-&gt;ref();</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就非常清晰明了了，我创建一个QObject对象，它的threadData，将和parent一致。若parent没有threadData，或者是没有parent，将调用QThreadData::current获取一个新的、当前线程的QThreadData，并且将当前线程设置为一个QAdoptedThread的实例。</p>\n<p>下面看一下QEventLoop::processEvents的实现，QEventLoop::exec()最终调入此处：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">QEventLoop::processEvents</span><span class=\"params\">(ProcessEventsFlags flags)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Q_D(QEventLoop);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!d-&gt;threadData-&gt;eventDispatcher)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flags &amp; DeferredDeletion)</span><br><span class=\"line\">        QCoreApplication::sendPostedEvents(<span class=\"number\">0</span>, QEvent::DeferredDelete);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d-&gt;threadData-&gt;eventDispatcher-&gt;processEvents(flags);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原来QEventLoop作为一个QObject，它也有threadData。同一个线程threadData只创建一次，所以它们取出来的eventDispatcher也都是相同的。这意味着所有的相同线程的QObject，共享一份threadData，也就是同一份eventDispatcher, postEventList等。这也就说明了，我们下图是如何实现的：</p>\n<p>事件保存在QThreadData::postEventList中，不同线程有不同的QThreadData实例</p>\n<h2 id=\"3-QThread\"><a href=\"#3-QThread\" class=\"headerlink\" title=\"3. QThread\"></a>3. QThread</h2><p>接下来看看当我们创建一个线程时，会发生什么：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QThreadPrivate::QThreadPrivate(QThreadData *d)</span><br><span class=\"line\">    : QObjectPrivate(), running(<span class=\"literal\">false</span>), finished(<span class=\"literal\">false</span>), terminated(<span class=\"literal\">false</span>), exited(<span class=\"literal\">false</span>), returnCode(<span class=\"number\">-1</span>),</span><br><span class=\"line\">      stackSize(<span class=\"number\">0</span>), priority(QThread::InheritPriority), data(d)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data)</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> QThreadData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QThread::QThread(QObject *parent)</span><br><span class=\"line\">    : QObject(*(<span class=\"keyword\">new</span> QThreadPrivate), parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_D(QThread);</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr, \"QThreadData %p created for thread %p\\n\", d-&gt;data, this);</span></span><br><span class=\"line\">    d-&gt;data-&gt;thread = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当新建一个QThread时，二话不说它先是建立了一个新的QThreadData，并设置thread为自己。和QThreadData::current不同的是，QThreadData::current是被动生成一个QThreadData，因为它并没有指定某个QThread。而创建QThread则可以“名正言顺”创建QThreadData，然后将它的thread设置为自己。由于它还没有执行，因此并没有设置TLS。</p>\n<p>当一个QThread要开始执行后：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QThread::start</span><span class=\"params\">(Priority priority)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    d-&gt;handle = (Qt::HANDLE) _beginthreadex(<span class=\"literal\">NULL</span>, d-&gt;stackSize, QThreadPrivate::start,</span><br><span class=\"line\">                                            <span class=\"keyword\">this</span>, CREATE_SUSPENDED, &amp;(d-&gt;id));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> __stdcall <span class=\"title\">QThreadPrivate::start</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QThread *thr = <span class=\"keyword\">reinterpret_cast</span>&lt;QThread *&gt;(arg);</span><br><span class=\"line\">    QThreadData *data = QThreadData::get2(thr);</span><br><span class=\"line\"></span><br><span class=\"line\">    qt_create_tls();</span><br><span class=\"line\">    TlsSetValue(qt_current_thread_data_tls_index, data);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    data-&gt;quitNow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ### <span class=\"doctag\">TODO:</span> allow the user to create a custom event dispatcher</span></span><br><span class=\"line\">    createEventDispatcher(data);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，TLS被设置成了刚刚QThread创建的QThreadData实例，那么之后在这个线程中，QThreadData::current就可以取到对应的信息了。它紧接着创建了event dispatcher，也就是QEventDispatcherWin32，并且塞给了QThreadData，保证这个线程中的消息循环都是通过此QEventDispatcherWin32。</p>\n<p>需要注意的是，如果不是通过QThread创建的QThreadData（即通过QThreadData::current来创建的）默认是没有event dispatcher的，所以你无法对一个孤立的QObject分发事件。QCoreApplication并没有继承QThread，它通过QThreadData::current获取了实例后自己设置了event dispatcher来实现消息的分发。</p>\n<p>这样一来一切都说得通了，为什么事件是跟着线程走的，为什么每个线程都有独立的消息循环，为什么需要moveToThread，一切原因，都在QThreadData里。</p>\n<h2 id=\"4-QWidget消息循环\"><a href=\"#4-QWidget消息循环\" class=\"headerlink\" title=\"4. QWidget消息循环\"></a>4. QWidget消息循环</h2><p>刚刚看到每一个QEventDispatcherWin32都会创建一个隐藏的窗口来处理WM_TIMER等事件，对于普通的QWidget来说，它们的消息处理函数叫做QtWndProc，定义在了qapplication_win.cpp中。它里面无非就是将拿到的HWND映射到正确的QWidget中，然后翻译成Qt事件。Qt很巧妙地将QWidget<em>强行转换为了QETWidget</em>，实现了私有成员的封装，不过这个就已经超过我们讨论的范畴了。</p>\n<p>以上便是Qt消息循环和线程相关的秘密，虽然Qt5的代码还没有仔细研究过，但是大体上变化应该不大，希望大家看完后，能对Qt有一个【卧槽好屌啊】这样的感受。</p>\n","categories":[],"tags":[{"name":"Qt","path":"api/tags/Qt.json"}]}