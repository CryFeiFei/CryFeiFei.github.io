<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Qt主界面卡死的解决方案-一些具体实现方式</title>
    <url>/2020/05/28/qt-zhu-jie-mian-qia-si-de-jie-jue-fang-an-yi-xie-ju-ti-shi-xian-fang-shi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们在写UI文件的时候，有很多情况下，是需要界面来处理业务中某些耗时的操作，这时候如果不处理好界面相关的逻辑的话，主界面就会卡死，这时候就需要我们上多线程了</p>
<h2 id="逻辑1"><a href="#逻辑1" class="headerlink" title="逻辑1"></a>逻辑1</h2><p>首先上业务上一个很简单的栗子</p>
<p>比如我们的代码中有这么一个耗时的操作</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// 第一种耗时的操作</span>
    <span class="token keyword">auto</span> fWhile1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>把这个代码绑定到一个按钮事件上</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fWhile1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>然后点击。发现界面卡死了，很正常，必须得等到这段代码耗时完成之后才能继续操作界面，这段代码是太不友好了，不清真，所以我们要改一下。</p>
<hr>
<h2 id="逻辑2"><a href="#逻辑2" class="headerlink" title="逻辑2"></a>逻辑2</h2><p>如何改动，可以看下这个函数</p>
<pre class=" language-cpp"><code class="language-cpp">QCoreApplication<span class="token operator">::</span>processEvents</code></pre>
<p>来一起看下官网介绍</p>
<blockquote>
<p>Processes all pending events for the calling thread according to the specified flags until there are no more events to process.<br>You can call this function occasionally when your program is busy performing a long operation (e.g. copying a file).<br>In the event that you are running a local loop which calls this function continuously, without an event loop, the DeferredDelete events will not be processed. This can affect the behaviour of widgets, e.g. QToolTip, that rely on DeferredDelete events to function properly. An alternative would be to call sendPostedEvents() from within that local loop.<br>Calling this function processes events only for the calling thread.<br>Note: This function is thread-safe.</p>
</blockquote>
<ul>
<li>You can call this function occasionally when your program is busy performing a long operation (e.g. copying a file).</li>
<li>当程序忙于执行长时间操作（例如复制文件）时，您可以偶尔调用此功能。</li>
</ul>
<p>我们就暂时就这个（滑稽。<br>接下来可以把代码搞成这种了。</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">auto</span> fWhile2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            QApplication<span class="token operator">::</span><span class="token function">processEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fWhile2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这种代码在配置不好的机器上实际上还是有点小问题，比如我的小破本子。还是会有点卡的。我觉得用户一般是可以接受这种情况的。</p>
<hr>
<h2 id="逻辑3"><a href="#逻辑3" class="headerlink" title="逻辑3"></a>逻辑3</h2><p>实际上这个逻辑还有一个问题，就是如果我的业务代码不是循环该怎么办呢，这时候我们可以用新的类接口</p>
<pre class=" language-cpp"><code class="language-cpp">QtConcurrent<span class="token operator">::</span>run</code></pre>
<p>这个类。这个类是可以将一个函数放到新的线程里来执行。再加上</p>
<pre class=" language-cpp"><code class="language-cpp">QFuture<span class="token operator">&lt;</span>T<span class="token operator">></span></code></pre>
<p>这个类，可以控制这个新的线程函数开始，控制，结束。<br>具体可以查看官方文档，我这里就上个简单的栗子</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//耗时的操作</span>
<span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">function_needmoretime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// three</span>
    <span class="token keyword">auto</span> fWhile3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        QFuture<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> future <span class="token operator">=</span> QtConcurrent<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span>function_needmoretime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            QApplication<span class="token operator">::</span><span class="token function">processEvents</span><span class="token punctuation">(</span>QEventLoop<span class="token operator">::</span>AllEvents<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fWhile3<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre>
<p>QFuture + QtConcurrent这个框架非常强大，可以将线程同步异步状态抽象出来，让程序员不用太关心这些。这只是一个最简单的栗子。我的小破本子来运行这个是一点都不卡的。界面依旧如丝滑般流畅。</p>
<hr>
<h2 id="逻辑4-线程"><a href="#逻辑4-线程" class="headerlink" title="逻辑4-线程"></a>逻辑4-线程</h2><p>线程基础那种废话我就不多说了。道理大家都懂，我直接上wiki。</p>
<blockquote>
<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br>一个进程可以有很多线程，每条线程并行执行不同的任务。<br>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。 </p>
</blockquote>
<p>线程的创建有两种方式，第一种是继承QThread的方式，然后重写run，但是这种方式官方已经不推荐了。官方不推荐的我们就不要这样写了，我们这里讨论的是第二种方式。</p>
<p>继承QObject ，move到新的线程中。</p>
<h3 id="重写-QObject"><a href="#重写-QObject" class="headerlink" title="重写 QObject"></a>重写 QObject</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 头文件</span>
<span class="token keyword">class</span> <span class="token class-name">workThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">workThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">workThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//cpp</span>
workThread<span class="token operator">::</span><span class="token function">workThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QObject</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
workThread<span class="token operator">::</span><span class="token operator">~</span><span class="token function">workThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> workThread<span class="token operator">::</span><span class="token function">start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    emit <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> workThread<span class="token operator">::</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    emit <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>使用方法</p>
<pre class=" language-cpp"><code class="language-cpp">    QThread<span class="token operator">*</span> m_workerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    workThread<span class="token operator">*</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">workThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token operator">-</span><span class="token operator">></span><span class="token function">moveToThread</span><span class="token punctuation">(</span>m_workerThread<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>started<span class="token punctuation">,</span> worker<span class="token punctuation">,</span> <span class="token operator">&amp;</span>workThread<span class="token operator">::</span>start1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>worker<span class="token punctuation">,</span> <span class="token operator">&amp;</span>workThread<span class="token operator">::</span>workFinished<span class="token punctuation">,</span> m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>finished<span class="token punctuation">,</span> m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>deleteLater<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//也可以退出释放资源</span>
<span class="token comment" spellcheck="true">//    connect(qApp, &amp;QApplication::aboutToQuit, worker, &amp;QObject::deleteLater);</span>
<span class="token comment" spellcheck="true">//    connect(worker, &amp;QObject::destroyed, m_workerThread, &amp;QThread::quit);</span>
<span class="token comment" spellcheck="true">//    connect(m_workerThread, &amp;QThread::finished, m_workerThread, &amp;QThread::deleteLater);</span></code></pre>
<p>总结下这样的操作界面是一点都不卡的，因为延迟的操作我们放到新的线程中了。<br>如果需要传递数据的话，可以将数据通过信号槽的方式传递。</p>
<ul>
<li>之所以官方不推荐重写QThread也是因为无法使用信号槽</li>
<li>想继承QThread的话也可以，这个继承QThread的类也需要moveToThread，这种做法不清真，所以不希望大家用。</li>
</ul>
<hr>
<h2 id="逻辑5-线程-定时器"><a href="#逻辑5-线程-定时器" class="headerlink" title="逻辑5 线程 + 定时器"></a>逻辑5 线程 + 定时器</h2><p>实际上，就是逻辑4的进阶版本，再加个定时器，每隔两秒输出当前时间</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">TimerThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">TimerThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">TimerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> timerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
TimerThread<span class="token operator">::</span><span class="token function">TimerThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">QObject</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
TimerThread<span class="token operator">::</span><span class="token operator">~</span><span class="token function">TimerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> TimerThread<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    emit <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QTimer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTimer<span class="token operator">::</span>timeout<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>TimerThread<span class="token operator">::</span>doWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> TimerThread<span class="token operator">::</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    timerCount <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timerCount <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>
        emit <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>QTime<span class="token operator">::</span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>业务代码在这里</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">auto</span> fTimerThreadStart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        fiveThread<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>threadButton2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fTimerThreadStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>started<span class="token punctuation">,</span> timerObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TimerThread<span class="token operator">::</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>timerObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TimerThread<span class="token operator">::</span>workFinished<span class="token punctuation">,</span> fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>finished<span class="token punctuation">,</span> fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>deleteLater<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>界面也是灰常丝滑般流畅的。具体的业务逻辑需求可以再想。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt基础教程</title>
    <url>/2020/05/30/qt-ji-chu-jiao-cheng/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>磕磕绊绊，自己也学Qt很久了。本意想弄个视频教程来教大家如何入门Qt，然后自己还是懒癌犯了，我还是喜欢讲解Qt的源码。</p>
<p>目前Qt的基础教程还是很多的，但是质量堪忧。刚入门时我看的时豆子君的学习之路，然后还是学到了不少的东西，也慢慢的对Qt有了自己的看法。回头看豆子君的教程还是有一些可以补充的。</p>
<p>这次搞Qt的基础教程，我准备把我认为该补充的文章结合豆子大佬的教程搞一份新的教程出来。给豆子君发邮件也已经得到了他的允许。<a href="https://www.cryfeifei.cn/532.html" target="_blank" rel="noopener" title="往来邮件">往来邮件</a></p>
<p>还有二三里的教程-Qt一二三，我看已经停更了，我也准备把他的停更的文章以及模块补充一些。（看来高级部分已经收费了</p>
<p>目前基本就是这样的想法。准备整理一份新的Qt基础教程。</p>
<p>我会一点点整理出来的。</p>
<h1 id="Qt-基本概念"><a href="#Qt-基本概念" class="headerlink" title="Qt 基本概念"></a>Qt 基本概念</h1><ul>
<li><a href="https://www.cryfeifei.cn/539.html" target="_blank" rel="noopener" title="Qt的基本概念-WIKI">Qt的基本概念-WIKI</a></li>
</ul>
<p>引读</p>
<blockquote>
<p><a href="https://www.cryfeifei.cn/541.html" target="_blank" rel="noopener" title="Qt简介">Qt简介</a><br><a href="https://www.cryfeifei.cn/545.html" target="_blank" rel="noopener" title="关于Qt">关于Qt</a><br><a href="https://www.cryfeifei.cn/542.html" target="_blank" rel="noopener" title="姚冬对Qt的看法">姚冬对Qt的看法</a></p>
</blockquote>
<h1 id="开发环境的搭建"><a href="#开发环境的搭建" class="headerlink" title="开发环境的搭建"></a>开发环境的搭建</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul>
<li><a href="https://www.cryfeifei.cn/620.html" target="_blank" rel="noopener" title="Windows下VS2019编译Qt5.13.2源码">Windows下VS2019编译Qt5.13.2源码</a></li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="https://www.cryfeifei.cn/577.html" target="_blank" rel="noopener" title="Linux搭建Qt5.14开发环境">Linux搭建Qt5.14开发环境-傻瓜式</a>;</li>
<li><a href="https://www.cryfeifei.cn/611.html" target="_blank" rel="noopener" title="Linux搭建Qt5.14开发环境-源码编译">Linux搭建Qt5.14开发环境-源码编译</a></li>
</ul>
<h1 id="Qt-比较重要的概念"><a href="#Qt-比较重要的概念" class="headerlink" title="Qt 比较重要的概念"></a>Qt 比较重要的概念</h1><h1 id="Qt-容器类"><a href="#Qt-容器类" class="headerlink" title="Qt 容器类"></a>Qt 容器类</h1><h1 id="Qt-MVC"><a href="#Qt-MVC" class="headerlink" title="Qt MVC"></a>Qt MVC</h1><h1 id="Qt-Widget"><a href="#Qt-Widget" class="headerlink" title="Qt Widget"></a>Qt Widget</h1><h1 id="Qt-Core"><a href="#Qt-Core" class="headerlink" title="Qt Core"></a>Qt Core</h1><h1 id="Qt多线程"><a href="#Qt多线程" class="headerlink" title="Qt多线程"></a>Qt多线程</h1><h1 id="Qt网络"><a href="#Qt网络" class="headerlink" title="Qt网络"></a>Qt网络</h1><h1 id="Qt打印"><a href="#Qt打印" class="headerlink" title="Qt打印"></a>Qt打印</h1>]]></content>
  </entry>
  <entry>
    <title>Qt线程基础</title>
    <url>/2020/06/14/qt-xian-cheng-ji-chu/</url>
    <content><![CDATA[<h1 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h1><h2 id="WIKI："><a href="#WIKI：" class="headerlink" title="WIKI："></a>WIKI：</h2><blockquote>
<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br>一个进程可以有很多线程，每条线程并行执行不同的任务。<br>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p>
</blockquote>
<h1 id="Qt中的线程"><a href="#Qt中的线程" class="headerlink" title="Qt中的线程"></a>Qt中的线程</h1><p>Qt中的线程类是QThread。</p>
<p>一个QThread对象管理程序中的一个控制线程。QThreads开始在run()中执行。默认情况下，run()通过调用exec()启动事件循环，并在线程内部运行Qt事件循环。</p>
<p>跟C++标准库中的thread不一样，Qt中的QThread是默认自带一个事件循环的。也就是你可以通过信号槽来进行线程之间的通信（这样就不需要写各种回调函数了）。这大大的简便了线程通信的复杂逻辑。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>先上一个简单的例子，点击按钮，开启一个新的线程，线程中输出从1-1000,结束之后发送信号workfinished</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">WorkerThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">WorkerThread</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">QThread</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        emit <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

MainWindow<span class="token operator">::</span><span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>MainWindow<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ui<span class="token operator">-</span><span class="token operator">></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    WorkerThread<span class="token operator">*</span> workThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">WorkerThread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        workThread<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>workThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>WorkerThread<span class="token operator">::</span>workFinished<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"workfinished"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这个例子很简单，点击按钮，线程启动。结束之后发送一个信号出来。</p>
<p>官方已经不推荐这种写法，这种写法只有run()函数才会在新的线程中。自己线程发的信号槽如果不注意的话，线程的槽函数也不会响应的。</p>
<p>下面介绍新的写法，重写QObject，move到新的线程中。</p>
<p>样例代码 </p>
<p><a href="https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1" target="_blank" rel="noopener" title="https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1</a></p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt多线程</tag>
        <tag>Qt基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>poppler-data(Windows)编译</title>
    <url>/2020/06/26/poppler-data-windows-bian-yi/</url>
    <content><![CDATA[<p>以Windows平台举例</p>
<p>下载 poppler-data ，进入目录</p>
<p>下载链接</p>
<p><a href="https://poppler.freedesktop.org/" target="_blank" rel="noopener">https://poppler.freedesktop.org/</a></p>
<pre><code>cmake . -DCMAKE_INSTALL_PREFIX=E:
mingw32-make
mingw32-make install</code></pre>]]></content>
      <tags>
        <tag>poppler</tag>
        <tag>poppler-data</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt在Linux下获取当前系统用户名</title>
    <url>/2020/06/26/qt-zai-linux-xia-huo-qu-dang-qian-xi-tong-yong-hu-ming/</url>
    <content><![CDATA[<p> Qt没有直接的接口去获取到当前系统用户名，只能够间接的通过现有的接口去获取。（比如下边的例子通过获取home路径）</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Qt4 version</span>

QString <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
     QString userName <span class="token operator">=</span> QDesktopServices<span class="token operator">::</span><span class="token function">storageLocation</span><span class="token punctuation">(</span>QDesktopServices<span class="token operator">::</span>HomeLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userName <span class="token operator">=</span> userName<span class="token punctuation">.</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> userName<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>



<span class="token comment" spellcheck="true">//Qt5 version</span>
QString <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QString userPath <span class="token operator">=</span> QStandardPaths<span class="token operator">::</span><span class="token function">writableLocation</span><span class="token punctuation">(</span>QStandardPaths<span class="token operator">::</span>HomeLocation<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    QString userName <span class="token operator">=</span> userPath<span class="token punctuation">.</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> userName<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Poppler在Mac OS下编译</title>
    <url>/2020/06/26/poppler-zai-mac-os-xia-bian-yi/</url>
    <content><![CDATA[<p>#前言<br>众所周知，Poppler-qt5是跨平台的，但是目前Poppler在Mac OS下编译的资料一直没有找到。但是目前手头也没有mac的机器来试试（我可是搞Linux的！但是都是一个Unix爹啊）。目前有两个方法去编译Mac版本的poppler。现在特意总结下。毕竟我还是想把自己的阅读器搞到Mac上试试的。（这就是你想买Mac的理由？）</p>
<h2 id="MacPorts"><a href="#MacPorts" class="headerlink" title="MacPorts"></a>MacPorts</h2><p>去Poppler的官方网站发现Poppler是支持MacPorts的。MacPorts是Mac上支持的第三方的包管理器（跟Ubuntu的 apt-get很像）。可以通过这个包管理器安装。</p>
<h2 id="自己编译"><a href="#自己编译" class="headerlink" title="自己编译"></a>自己编译</h2><p>浏览了半天，发现一个老外写的文章。特意把链接放到这里。有兴趣的可以自己编译下。<br>原文<a href="http://www.freebyte.fr/?p=8" target="_blank" rel="noopener">http://www.freebyte.fr/?p=8</a></p>
<p>这是我目前找到的所有在MacOS下编译的方法了。有想过使用google跟福昕合作开源的pdfium，先给自己挖个坑吧。</p>
<p>PS:<br>最新的Qt6预览版已经有了pdf模块，就是使用的webengine里的pdf模块。<br>等出来之后就可以更新自己的阅读器了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>poppler</tag>
      </tags>
  </entry>
  <entry>
    <title>Poppler在Windows下编译</title>
    <url>/2020/06/26/poppler-zai-windows-xia-bian-yi/</url>
    <content><![CDATA[<h2 id="windows库（已经编译好了。）"><a href="#windows库（已经编译好了。）" class="headerlink" title="windows库（已经编译好了。）"></a>windows库（已经编译好了。）</h2><p>Poppler在Windows下编译还是相当麻烦的，实际上很多库在windows下编译都会有问题。但是有老哥在Windows下使用GCC编译好了一个库，这里是下载链接，这个也是我在Windows上一直使用的一个库。<br><a href="https://sourceforge.net/projects/poppler-win32/" target="_blank" rel="noopener">https://sourceforge.net/projects/poppler-win32/</a></p>
<h2 id="Poppler-data"><a href="#Poppler-data" class="headerlink" title="Poppler-data"></a>Poppler-data</h2><p>有个老哥在github上给我提出了个issue，发现我的阅读器打开京东的pdf的发票有的字体显示不全，（他要基于我的代码做个打印发票的系统，改就改吧=，=）。他把官网的<a href="https://poppler.freedesktop.org/" target="_blank" rel="noopener">https://poppler.freedesktop.org/</a> 里边有个poppler-data编译好了，给我提了个push。然后也没有说明怎么编译。这就比较蛋疼了。经过验证发现确实是这个问题，然后我总结了下编译过程。</p>
<p>使用QtCreater自带的MinGW（里边的GCC）编译</p>
<p>下载官网界面下的poppler-data链接，进入目录，安装到E盘，然后把安装好的目录直接拷贝到阅读器中的3rdparty下，就显示正常了。</p>
<pre><code>cmake . -DCMAKE_INSTALL_PREFIX=E:
mingw32-make
mingw32-make install</code></pre>]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>poppler</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下pip3的安装，升级，卸载</title>
    <url>/2020/06/26/ubuntu16-04-xia-pip3-de-an-zhuang-sheng-ji-xie-zai/</url>
    <content><![CDATA[<p>最近开发机换了Ubuntu16.04，来记录下。</p>
<p>Python2与Python3是可以共存的，Ubuntu默认装好了。<br>命令python就是Python2<br>命令python3一般是Python3.5</p>
<p>以下命令适用于Python2，把pip3改成对应的pip就好</p>
<p>安装pip3</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install python3-pip</code></pre>
<p>升级pip3</p>
<pre class=" language-shell"><code class="language-shell">sudo pip3 install --upgrade pip</code></pre>
<p>卸载pip3</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get remove python3-pip</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>使用QtCteator编译QtCreator</title>
    <url>/2020/06/26/shi-yong-qtcteator-bian-yi-qtcreator/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原谅我标题党了，本文标题应该是使用Clang依赖Qt编译QtCreator。</p>
<p>目前在Linux上做开发，一直使用的IDE就是QtCreator。 实际上一直有想做一个编辑器的想法（因为我觉得QtCreator有点笨重，而我只是想要一个单纯的编辑器的功能。目前开源的优秀的使用Qt制作的编辑器好象是没有。我也一直喜欢使用vim，而且QtCreator也有fakevim的插件。QtCreator我也用着比较舒服，还是Qt写的，我也比较熟悉Qt的代码，所以想要魔改这个项目了。而且从官方fork的话，以后有啥bug可以直接cherry-pick过来，逃）。趁着这个机会，阅读下这个IDE的架构是如何设计的。</p>
<p>我个人一直很喜欢QtCreator这个IDE，当然没有vs强大（宇宙第一IDE可不是吹的），是不可多得的优秀的IDE。配置环境什么的也比较简单方便。目前我的开发机器环境为Ubuntu16.04,就暂时以这个环境来讲吧。</p>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>如果编译QtCreator，实际上官方的wiki是有的，链接在这里 <a href="https://wiki.qt.io/Building_Qt_Creator_from_Git" target="_blank" rel="noopener">https://wiki.qt.io/Building_Qt_Creator_from_Git</a> 简单的讲，就是如下几个条件</p>
<blockquote>
<ul>
<li>Qt5.6.2及以后版本以后版本的Qt库</li>
<li>clang5.0及之后版本的编译器</li>
</ul>
</blockquote>
<h3 id="Qt编译"><a href="#Qt编译" class="headerlink" title="Qt编译"></a>Qt编译</h3><p>截止2018年10月13日。目前最新的Qt版本是Qt5.11.2。（5.12还在测试中）那就以最新的Qt版本来编译QtCreator吧。去官网下载最新版本的Qt源码<a href="http://download.qt.io/archive/qt/5.11/5.11.2/single/" target="_blank" rel="noopener">http://download.qt.io/archive/qt/5.11/5.11.2/single/</a><br>比如我就下载到了 /home/zhangpf/Qt/Qt5.11下，解压到当前文件夹，然后新建个新的目录用于放编译好的Qt。</p>
<pre class=" language-shell"><code class="language-shell">mkdir qt5.11.2
cd /home/zhangpf/Qt/Qt5.11/qt-everywhere-src-5.11.2</code></pre>
<p>准备编译Qt。（在这里我一开始下载的Qt5.10的版本，因为我还怕5.11不稳定，但是发现编译的时候QtScript模块编译不过，QtCreator工程又依赖QtScript，google了下发现不只是我有这个问题，但是还未解决，已经报了QTBUG。所以我才又下载的Qt5.11的版本来编译的。）</p>
<p>然后继续</p>
<pre class=" language-shell"><code class="language-shell">./configure -prefix /home/zhangpf/Qt/Qt5.11/qt5.11.2 -debug -opensource -confirm-license
cd /home/zhangpf/Qt/Qt5.11/qt5.11.2
make && make install</code></pre>
<p>比如我的电脑cpu是i7-7700,4核8线程，我就可以make -j8。还是看自己电脑的性能了。<br>恩，这时候Qt5.11.2的库就准备好了。</p>
<h2 id="clang准备。"><a href="#clang准备。" class="headerlink" title="clang准备。"></a>clang准备。</h2><p>下载链接<a href="http://releases.llvm.org/download.html" target="_blank" rel="noopener">http://releases.llvm.org/download.html</a> 下载clang clang++ 5.0以后预编译好的版本，比如我就是下载clang6.0的Ubuntu16.04的版本。下载下来可以直接用。放到了/opt 下，然后我又做了个软链到/usr/local/bin/下。</p>
<h2 id="QtCreator准备"><a href="#QtCreator准备" class="headerlink" title="QtCreator准备"></a>QtCreator准备</h2><p>官方已经讲得很明确了，直接</p>
<pre><code>git clone --recursive https://code.qt.io/qt-creator/qt-creator.git</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="配置QtCreator"><a href="#配置QtCreator" class="headerlink" title="配置QtCreator"></a>配置QtCreator</h3><blockquote>
<ul>
<li>工具-选项-构建和运行-编译器   把刚才下载好的clang添加进去，点击应用</li>
<li>工具-选项-构建和运行-QtVersion 添加一个QtVersion 把编译好的Qt5.11.2 qmake路径加进去，点击应用</li>
<li>工具-选项-构建和运行-构建套件 添加一个构建套件取名qtcreator，编译器跟QtVersion选择成刚才添加的。点击应用</li>
</ul>
</blockquote>
<h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p>直接打开QtCreator的pro文件，构建套件选择刚才新建的qtcreator。然后直接右键pro文件，qmake-&gt;构建.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>qtcreator源码149m。编译出来的debug版本的QtCreator 1.5G。也是相当大的一个Qt工程了。从头折腾到尾，基本没发现啥大的编译问题与疑难杂症，也就只有一个Qt5.10版本QtScript编译不过的问题，还被我规避掉了。接下来就该阅读这个工程的源码，去更改我想要的结果了。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux更换difftool为meld</title>
    <url>/2020/06/26/linux-geng-huan-difftool-wei-meld/</url>
    <content><![CDATA[<h3 id="meld"><a href="#meld" class="headerlink" title="meld"></a>meld</h3><pre class=" language-shell"><code class="language-shell">#设置默认的git diff的比较工具
#配置比较工具.可以用git difftool 调用.
git config --global diff.tool meld
git config --global difftool.prompt false
</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>git</tag>
        <tag>meld</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileDialog中的tips</title>
    <url>/2020/06/26/qfiledialog-zhong-de-tips/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近看QFileDialog的实现比较多，也对比了几家操作系统厂商跟Qt的QFileDialog中的实现，也自己造了个小轮子。也学到了一些东西，特意来分享下。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>可以将类型诸如这种的格式</p>
<pre><code>WPS文字 文件(*.wps)  提取成这种 *.wps</code></pre><p>本来打算自己写正则表达式的，生怕自己写的效率比较低，就从QFileDialog的源码中扣取出来了。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//from QFileDialog</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>qt_file_dialog_filter_reg_exp <span class="token operator">=</span>
<span class="token string">"^(.*)\\(([a-zA-Z0-9_.*? +;#\\-\\[\\]@\\{\\}/!&lt;>\\$%&amp;=^~:\\|]*)\\)$"</span><span class="token punctuation">;</span>
QStringList <span class="token function">qt_clean_filter_list</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>filter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QRegExp <span class="token function">regexp</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">fromLatin1</span><span class="token punctuation">(</span>qt_file_dialog_filter_reg_exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString f <span class="token operator">=</span> filter<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">indexIn</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        f <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QString<span class="token operator">::</span>SkipEmptyParts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="QFileInfo的新奇使用方法"><a href="#QFileInfo的新奇使用方法" class="headerlink" title="QFileInfo的新奇使用方法"></a>QFileInfo的新奇使用方法</h3><p>实际上我又遇到了一个源码中关于QFileInfo一个原来没有用过的用法。</p>
<p>直接将</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token punctuation">.</span>wps </code></pre>
<p>这种字符当做QString放进了QFileInfo来获取其basename（文件名）跟 suffix（后缀），或者使用其它的函数。一般我都是传个文件路径的，没想到还能用这种方法解析字符串。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//这时候可以用QFileInfo把一些复杂的字符串的什么前缀，后缀名全都解析出来了，包括*.tar.gz这种复杂的，QFileInfo都有函数来提取</span>
QFileInfo <span class="token function">fileInfo</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"*.wps"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我本来想自己解析这个字符串的，发现QFileDialog的源码中还有这种用法，真的很神奇。</p>
<h3 id="文件管理器的吐槽"><a href="#文件管理器的吐槽" class="headerlink" title="文件管理器的吐槽"></a>文件管理器的吐槽</h3><p>最近看了看KDE的dolphin文件管理器代码的实现，还有深度的文件管理器的实现，还有一些乱七八糟第三方的，还有Qt自带的QFileDialog。就属KDE的dolphin做的最厉害，交互最好，优化的最好。</p>
<p>深度的文件管理器跟Qt自带QFileDialog遇到复杂的网络文件以及延迟都会卡死，也没有任何交互。QFileDialog我理解这个东西一开始就不是给网络文件用的，卡死我还是可以接受的，但是深度作为操作系统厂商做成这样就有点不太合适了。大概扫了下源码，也跟QFileDialog一样重写了model，model这里交互还是得好好优化下啊。这就是自己造轮子的坏处。</p>
<p>从一个开发的角度，简单的吐槽一下，反正给他们官方反馈了。因为deepin的文件管理器的bug实在太多了=。=。</p>
<p>嗯，KDE大法好！话说，一开始的设计可以从借鉴（copy）KDE的实现嘛，都这么多年了…</p>
<p>造轮子不要对自己太自信…实时上我自己造的小轮子也有这个问题=。=。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这是我前年的时候看各个厂商以及调研QFileDialog总结出来一点小结论。去年年底我又把这部分捡起来了。现在已经优化到加载千万级别的数据，界面不会卡住的地步了。有时间把这部分东西写出来</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>QFileDialog</tag>
      </tags>
  </entry>
  <entry>
    <title>error: &#39;this&#39; cannot be implicitly captured in this context</title>
    <url>/2020/06/26/error-this-cannot-be-implicitly-captured-in-this-context/</url>
    <content><![CDATA[<p>讲真，使用Qt反射 + 元对象 + C++11 的特性，写c++代码简直不要太爽，代码优雅的不是一丁半点。</p>
<p>今天使用lambda表达式的时候，发现报了个编译错误</p>
<pre class=" language-cpp"><code class="language-cpp">error<span class="token operator">:</span> <span class="token string">'this'</span> cannot be implicitly captured in <span class="token keyword">this</span> context</code></pre>
<p>纠其原因，在于我在lambda表达式中使用了某个成员变量，但是没有捕获this</p>
<p>把代码</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>加上this就可以了</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt源码之魔改QFileDialog之路-2 移动介质的处理</title>
    <url>/2020/06/26/qt-yuan-ma-zhi-mo-gai-qfiledialog-zhi-lu-2-yi-dong-jie-zhi-de-chu-li/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>移动介质，一般就是指当前Linux系统下的 <strong>U 盘 / 挂载硬盘</strong>。 这两个移动介质都是挂载在<strong>/media/yourusername</strong>下来做的处理。（fhs2.4）（实际上fhs3.0的标准已经改到/run/media/username下了）</p>
<h2 id="前期调研"><a href="#前期调研" class="headerlink" title="前期调研"></a>前期调研</h2><p>从网上找到关于u盘检测的插拔有两种方案（这两种方案硬盘挂载是检测不到的）：</p>
<h3 id="U盘插拔检测"><a href="#U盘插拔检测" class="headerlink" title="U盘插拔检测"></a>U盘插拔检测</h3><h4 id="QDbus的方案"><a href="#QDbus的方案" class="headerlink" title="QDbus的方案"></a>QDbus的方案</h4><blockquote>
<ul>
<li>使用QDbus来检测U盘的插拔的处理，原文链接 <a href="http://www.qtcn.org/bbs/read-htm-tid-14535.html" target="_blank" rel="noopener">http://www.qtcn.org/bbs/read-htm-tid-14535.html</a></li>
</ul>
</blockquote>
<p>防止网址被吞这里把代码上上</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//在pro文件中应该加入</span>
QT <span class="token operator">+</span><span class="token operator">=</span>dbus

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QtDBus/QDBusConnection></span></span>
<span class="token comment" spellcheck="true">//以下为检测设备的插入</span>
QDBusConnection<span class="token operator">::</span><span class="token function">systemBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span> <span class="token string">"org.freedesktop.Hal"</span><span class="token punctuation">,</span>
                        <span class="token string">"/org/freedesktop/Hal/Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"org.freedesktop.Hal.Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"DeviceAdded"</span><span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">,</span>
                        <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">slotDeviceAdded</span><span class="token punctuation">(</span>QString <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//以下为检查设备的拨出</span>
QDBusConnection<span class="token operator">::</span><span class="token function">systemBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span> <span class="token string">"org.freedesktop.Hal"</span><span class="token punctuation">,</span>
                        <span class="token string">"/org/freedesktop/Hal/Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"org.freedesktop.Hal.Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"DeviceRemoved"</span><span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">,</span>
                        <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">slotDeviceRemoved</span><span class="token punctuation">(</span>QString <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//在slotDeviceAdded(QString udi)函数中，要使用到</span>

QDBusInterface <span class="token function">device</span><span class="token punctuation">(</span><span class="token string">"org.freedesktop.Hal"</span><span class="token punctuation">,</span> udi<span class="token punctuation">,</span> <span class="token string">"org.freedesktop.Hal.Device"</span> <span class="token punctuation">,</span> QDBusConnection<span class="token operator">::</span><span class="token function">systemBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//通过HAL可以查询到设备为volume的设备，然后通过判断是否为/dev/sd*的设备，就可以判断出是否为U盘，然后调用mount就可以了。</span>
<span class="token comment" spellcheck="true">//这时记录下U盘的UDI，在检测到设备拨出时，再查询一下U盘的UDI是否还在，就知道U盘是否被拨出了。</span></code></pre>
<h4 id="QSocketNotifier来实现"><a href="#QSocketNotifier来实现" class="headerlink" title="QSocketNotifier来实现"></a>QSocketNotifier来实现</h4><p>这个是某个老哥使用socket来实现文件监控的，实际上这个方案完全可以使用QFileSystemWatcher来检测<strong>/proc/mounts</strong>（实际上Qt源码QSystemWatcher，里边的监控文件的实现就是使用的QSocketNotifier=。=，既然这个老哥自己想出来了，还是把他的链接贴上去吧，<a href="https://blog.csdn.net/penghuilater/article/details/53410646" target="_blank" rel="noopener">https://blog.csdn.net/penghuilater/article/details/53410646</a> 接下来我会讲QFileSystemWatcher的实现原理的），代码我还是照样贴上，防止网页被吞。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> VOLUMEMONITOR_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> VOLUMEMONITOR_H</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QObject></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSet></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSocketNotifier></span></span>
<span class="token keyword">class</span> <span class="token class-name">VolumeMonitor</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">VolumeMonitor</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">VolumeMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">deviceAdded</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> addDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">deviceRemoved</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> removeDe<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> slots<span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onFileChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_fileKde <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    QSocketNotifier<span class="token operator">*</span> m_socketNotifier<span class="token punctuation">;</span>
    QSet<span class="token operator">&lt;</span>QString<span class="token operator">></span> m_fileContentSet<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// VOLUMEMONITOR_H </span>


<span class="token comment" spellcheck="true">//-------------------------------------------------------</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"volumemonitor.h"</span></span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSet></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextStream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> mountFile<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/proc/mounts"</span><span class="token punctuation">;</span>
    QSet <span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">getMountFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QFile <span class="token function">file</span><span class="token punctuation">(</span>mountFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QSet <span class="token operator">&lt;</span>QString<span class="token operator">></span> fileContentSet<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                QTextStream <span class="token function">textStream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                QString fileContent <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                QStringList items <span class="token operator">=</span> fileContent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">foreach</span> <span class="token punctuation">(</span>QString item<span class="token punctuation">,</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        fileContentSet <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> fileContentSet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    QString <span class="token function">getMountPoint</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> QStringList items <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

VolumeMonitor<span class="token operator">::</span><span class="token function">VolumeMonitor</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QObject</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> VolumeMonitor<span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//get the set of mounted device's info;</span>
    m_fileContentSet <span class="token operator">=</span> <span class="token function">getMountFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_fileKde <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>mountFile<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_fileKde <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qWarning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"open /proc/mounts failed!"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    m_socketNotifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSocketNotifier</span><span class="token punctuation">(</span>m_fileKde<span class="token punctuation">,</span>
                                           QSocketNotifier<span class="token operator">::</span>Write<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_socketNotifier<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QSocketNotifier<span class="token operator">::</span>activated<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>VolumeMonitor<span class="token operator">::</span>onFileChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> VolumeMonitor<span class="token operator">::</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_fileKde<span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m_socketNotifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> VolumeMonitor<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">close</span><span class="token punctuation">(</span>m_fileKde<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_fileKde <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> m_socketNotifier<span class="token punctuation">;</span>
        m_socketNotifier <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> VolumeMonitor<span class="token operator">::</span><span class="token function">onFileChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    QSet <span class="token operator">&lt;</span>QString<span class="token operator">></span> changedItemSet <span class="token operator">=</span> <span class="token function">getMountFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> item<span class="token operator">:</span> changedItemSet <span class="token operator">-</span> m_fileContentSet<span class="token punctuation">)</span>
        emit <span class="token function">deviceAdded</span><span class="token punctuation">(</span><span class="token function">getMountPoint</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> item<span class="token operator">:</span> m_fileContentSet <span class="token operator">-</span> changedItemSet<span class="token punctuation">)</span>
        emit <span class="token function">deviceRemoved</span><span class="token punctuation">(</span><span class="token function">getMountPoint</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    m_fileContentSet <span class="token operator">=</span> changedItemSet<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

VolumeMonitor<span class="token operator">::</span><span class="token operator">~</span><span class="token function">VolumeMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="QStorageInfo"><a href="#QStorageInfo" class="headerlink" title="QStorageInfo"></a>QStorageInfo</h4><p>实际上Qt 5.4之后在QtCore中引入了一个新的类叫做QStorageInfo，这个类可以获取到相关的磁盘信息。这个并不是关键的，因为本次我也没有使用这个类，就是在这里简单的提一下。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>实际上这一篇的关键技术是QFileSystemWatcher，把<strong>/media/yourusername</strong>添加到监视目录中，然后就可以通过QFileInfo and QDir来获取到相关的信息，其中QFileDialog中的QFileSystemModel也可以跟随实时更新。这样依旧可以依旧获取到移动介质的信息以及插拔信息。这个才是最终的解决方案。接下来要讲一下QFileSystemWatcher的源码。可能你看到的源码版本与我的版本不同。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt源码之魔改QFileDialog之路-1</title>
    <url>/2020/06/26/qt-yuan-ma-zhi-mo-gai-qfiledialog-zhi-lu-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前着急发Linux社区版本的WPS，所以这里都没有好好的去更改打开本地文件对话框那里的逻辑。由于这里的代码是从其它平台迁移过来的，所以这里的逻辑就没有动。对于用户交互来讲可以说是非常恶心心了。因为我们是做产品的，产品驱动技术。这次呢，前前后后大概花了两周的时间终于把这个产品稳定下来了。里边碰到了一些技术要点与难点。这里简单的总结下。</p>
<p>图1. 原来没有</p>
<h2 id="自己造轮子"><a href="#自己造轮子" class="headerlink" title="自己造轮子"></a>自己造轮子</h2><p>实际上这是我的第一个方案，一开始想得太简单，用了个递归的方式去读取QFileInfo的信息，发现栈爆了，然后用QFileSystQFileemModel来读取当前文件夹的信息。总结下就是使用QFileSystQFileemModel +QFileSystemWatcher +  QAbstractItemDelegate的方式去做，做了一个星期，完成了七八成，但是发现细节真的太多了，再给我两个星期我可能都做不完，于是放弃这个方案。突然想起来Qt还有个自带的QFileDialog。于是才开始我的第二个方案。</p>
<h2 id="使用QFileDialog类"><a href="#使用QFileDialog类" class="headerlink" title="使用QFileDialog类"></a>使用QFileDialog类</h2><p>这个方案我一开始连想都没有想，只是想尝试下看看能不能改造下，发现最终经过了一个星期的改造+适配也是把这个功能完成了。然后加到WPS中了。下边开始讲我在开发中遇到的一些技术要点。</p>
<h3 id="QFileDialog简单介绍"><a href="#QFileDialog简单介绍" class="headerlink" title="QFileDialog简单介绍"></a>QFileDialog简单介绍</h3><p>QFileDialog实现基本上是我自己实现的复杂版本，基本要点也是QFileSystemModel类来显示当前的目录信息，使用QFileInfoGatherer 线程类专门监视目录的变化。QFileInfoGatherer线程类基本实现核心也是QFileSystemWatcher，使用了 条件变量 + 锁来做同步。具体的实现还是相当多的， 大家有兴趣可以去阅读下Qt的源码。</p>
<h3 id="如何改造QFileDialog类"><a href="#如何改造QFileDialog类" class="headerlink" title="如何改造QFileDialog类"></a>如何改造QFileDialog类</h3><h4 id="改造利器"><a href="#改造利器" class="headerlink" title="改造利器"></a>改造利器</h4><p>与其说是如何改造QFileDialog类，不如说是如何改造Qt官方提供的控件，这种方式有一个缺点，就是严重依赖Qt官方源码（ps，有兴趣的可以把这个类的代码提取出来，我去fork，逃））。像WPS自己维护的Qt分支，这个方式我是可以接受的，因为源码就在我这里，哈哈。跑偏了，基本上这样改造是没有多大问题的，官方现在对于QWidget这套代码改动实际上是很少的。现在说一下改造QFileDialog的利器</p>
<ul>
<li>findChild()</li>
<li>findChildren()</li>
<li>metaObject()-&gt;className() (实际上这个基本没用到，了解下也是很好的)</li>
</ul>
<h4 id="改造原理"><a href="#改造原理" class="headerlink" title="改造原理"></a>改造原理</h4><p>todo findchild与findchildren的文章。<br>findChild&lt;QLineEdit*&gt;(“fileNameEdit”);</p>
<ul>
<li>设置QFileDialog的setOption</li>
<li>使用fildChild通过控件名 或者通过findChildren 找到 需要隐藏的左边列表，然后setVisible(false);</li>
</ul>
<p>这样最关键的问题解决了，可以把这个东西设置成无边框然后嵌入到右边的控件中。然后在对话框中左边加上几个侧边栏，然后主要问题就解决了。</p>
<h4 id="改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。"><a href="#改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。" class="headerlink" title="改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。"></a>改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。</h4><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>以为这就完了？图样图内务。还有移动介质呢？！</p>
<h1 id="NOW"><a href="#NOW" class="headerlink" title="NOW"></a>NOW</h1><p>这是我18年的解决方案了。现在准备自己重写这个东西，感觉也没有什么难得地方。这里准备重写了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileSystemWatcher源码剖析(Linux)</title>
    <url>/2020/06/27/qfilesystemwatcher-yuan-ma-pou-xi-linux/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>QFileSystemWatcher的作用是监视本地文件夹的变化以及文件的变化。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>QFileSystemWatcher的实现类是QFileSystemWatcherPrivate。 其中QFileSystemWatcherPrivate中的关键成员变量QFileSystemWatcherEngine用于监视目录以及文件的变化，发送信号给QFileystemWatcher。其中QFileSystemWatcherEngine派生了三个类。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread</code></pre>
<p>其派生的子类三种类型分别为</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 这个用于监控Dir的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QDnotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine

<span class="token comment" spellcheck="true">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到</span>
<span class="token keyword">class</span> <span class="token class-name">QPollingFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine

<span class="token comment" spellcheck="true">// 这个用于检测文件类型的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QInotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine</code></pre>
<h2 id="QInotifyFileSystemWatcherEngine"><a href="#QInotifyFileSystemWatcherEngine" class="headerlink" title="QInotifyFileSystemWatcherEngine"></a>QInotifyFileSystemWatcherEngine</h2><p>QInotifyFileSystemWatcherEngine用于监视文件的变化。</p>
<p>// 太长可以忽略，这是详细实现</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//media/zhangpf/workspace1/Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/corelib/io/qfilesystemwatcher_inotify_p.h</span>


<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"qfilesystemwatcher_p.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> QT_NO_FILESYSTEMWATCHER</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;qhash.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;qmutex.h></span></span>
QT_BEGIN_NAMESPACE
<span class="token keyword">class</span> <span class="token class-name">QInotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token operator">~</span><span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> QInotifyFileSystemWatcherEngine <span class="token operator">*</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//单例模式</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> Q_SLOTS<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">readFromInotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> inotifyFd<span class="token punctuation">;</span>
    QMutex mutex<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pathToID<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> QString<span class="token operator">></span> idToPath<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
QT_END_NAMESPACE
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// QT_NO_FILESYSTEMWATCHER</span>
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// QFILESYSTEMWATCHER_INOTIFY_P_H</span>

<span class="token comment" spellcheck="true">// cpp</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/inotify.h></span></span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
QT_BEGIN_NAMESPACE
QInotifyFileSystemWatcherEngine <span class="token operator">*</span>QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> IN_CLOEXEC</span>
    fd <span class="token operator">=</span> <span class="token function">inotify_init1</span><span class="token punctuation">(</span>IN_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fd <span class="token operator">=</span> <span class="token function">inotify_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">inotifyFd</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fcntl</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">moveToThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> pathToID<span class="token punctuation">)</span>
        <span class="token function">inotify_rm_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>id <span class="token operator">:</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QSocketNotifier <span class="token function">sn</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> QSocketNotifier<span class="token operator">::</span>Read<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//通过socket来监视文件的变化，替代thread一个很好的方式</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sn<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readFromInotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isDir <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> wd <span class="token operator">=</span> <span class="token function">inotify_add_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span>
                                   QFile<span class="token operator">::</span><span class="token function">encodeName</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                   <span class="token punctuation">(</span>isDir
                                    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">0</span>
                                       <span class="token operator">|</span> IN_ATTRIB
                                       <span class="token operator">|</span> IN_MOVE
                                       <span class="token operator">|</span> IN_CREATE
                                       <span class="token operator">|</span> IN_DELETE
                                       <span class="token operator">|</span> IN_DELETE_SELF
                                       <span class="token punctuation">)</span>
                                    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0</span>
                                       <span class="token operator">|</span> IN_ATTRIB
                                       <span class="token operator">|</span> IN_MODIFY
                                       <span class="token operator">|</span> IN_MOVE
                                       <span class="token operator">|</span> IN_MOVE_SELF
                                       <span class="token operator">|</span> IN_DELETE_SELF
                                       <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>wd <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"QInotifyFileSystemWatcherEngine::addPaths: inotify_add_watch failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> isDir <span class="token operator">?</span> <span class="token operator">-</span>wd <span class="token operator">:</span> wd<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pathToID<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        idToPath<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> pathToID<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString x <span class="token operator">=</span> idToPath<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token operator">!=</span> path<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> wd <span class="token operator">=</span> id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>id <span class="token operator">:</span> id<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "removing watch for path" &lt;&lt; path &lt;&lt; "wd" &lt;&lt; wd;</span>
        <span class="token function">inotify_rm_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> wd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">readFromInotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//主要是通过unix库函数来获取文件对应的详细信息。再跟addpath实现中缓存下来的信息做对比，来检测文件的变化。</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "QInotifyFileSystemWatcherEngine::readFromInotify";</span>
    <span class="token keyword">int</span> buffSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> FIONREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buffSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QVarLengthArray<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token operator">></span> <span class="token function">buffer</span><span class="token punctuation">(</span>buffSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffSize <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>at <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> end <span class="token operator">=</span> at <span class="token operator">+</span> buffSize<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> inotify_event <span class="token operator">*</span><span class="token operator">></span> eventForId<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>at <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inotify_event <span class="token operator">*</span>event <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>inotify_event <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventForId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>event<span class="token operator">-</span><span class="token operator">></span>wd<span class="token punctuation">)</span><span class="token punctuation">)</span>
            eventForId<span class="token punctuation">[</span>event<span class="token operator">-</span><span class="token operator">></span>wd<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>mask <span class="token operator">|</span><span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span>mask<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            eventForId<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>event<span class="token operator">-</span><span class="token operator">></span>wd<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        at <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>inotify_event<span class="token punctuation">)</span> <span class="token operator">+</span> event<span class="token operator">-</span><span class="token operator">></span>len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> inotify_event <span class="token operator">*</span><span class="token operator">></span><span class="token operator">::</span>const_iterator it <span class="token operator">=</span> eventForId<span class="token punctuation">.</span><span class="token function">constBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> eventForId<span class="token punctuation">.</span><span class="token function">constEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> inotify_event <span class="token operator">&amp;</span>event <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>it<span class="token punctuation">;</span>
        <span class="token operator">++</span>it<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "inotify event, wd" &lt;&lt; event.wd &lt;&lt; "mask" &lt;&lt; hex &lt;&lt; event.mask;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> event<span class="token punctuation">.</span>wd<span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> idToPath<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// perhaps a directory?</span>
            id <span class="token operator">=</span> <span class="token operator">-</span>id<span class="token punctuation">;</span>
            path <span class="token operator">=</span> idToPath<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "event for path" &lt;&lt; path;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span>IN_DELETE_SELF <span class="token operator">|</span> IN_MOVE_SELF <span class="token operator">|</span> IN_UNMOUNT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pathToID<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            idToPath<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">inotify_rm_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> event<span class="token punctuation">.</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
QT_END_NAMESPACE
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// QT_NO_FILESYSTEMWATCHER</span></code></pre>
<p>这是一个单例模式，里边的核心代码其实就是讲的是Inotify相关的函数。其中的关键的点，我已经打上备注。这个类中的主要实现是Linux下的Inotify的使用相关。</p>
<h2 id="Inotify"><a href="#Inotify" class="headerlink" title="Inotify"></a>Inotify</h2><p>Inotify简单的来讲是在Linux下监视文件与文件夹的相关机制，本来想自己写这一部分教程的，可是有一篇文章写的太好了，忍不住给大家分享了。<br><a href="https://www.ibm.com/developerworks/cn/linux/l-inotify/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-inotify/</a> 看完这一篇文章之后我觉得你对Linux下如何监视文件应该有了解了，甚至可以自己封装一个类给大家用。</p>
<h1 id="文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine"><a href="#文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine" class="headerlink" title="文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine"></a>文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QDnotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> QDnotifyFileSystemWatcherEngine <span class="token operator">*</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> Q_SLOTS<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment" spellcheck="true">//这个结构体比较关键</span>
    <span class="token keyword">struct</span> Directory <span class="token punctuation">{</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">parentFd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isMonitored</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token keyword">const</span> Directory <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">fd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">parentFd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">isMonitored</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>isMonitored<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">files</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        QString path<span class="token punctuation">;</span>
        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
        <span class="token keyword">int</span> parentFd<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isMonitored<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//这个结构体也比较关键</span>
        <span class="token keyword">struct</span> File <span class="token punctuation">{</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">groupId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">permissions</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token keyword">const</span> File <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">ownerId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ownerId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">groupId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">permissions</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>permissions<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">lastWrite</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>lastWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            QString path<span class="token punctuation">;</span>
            <span class="token keyword">bool</span> <span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint ownerId<span class="token punctuation">;</span>
            uint groupId<span class="token punctuation">;</span>
            QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
            QDateTime lastWrite<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        QList<span class="token operator">&lt;</span>File<span class="token operator">></span> files<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QMutex mutex<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pathToFD<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Directory<span class="token operator">></span> fdToDirectory<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> parentToFD<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">//cpp</span>
QDnotifySignalThread<span class="token operator">::</span><span class="token function">QDnotifySignalThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">:</span> <span class="token function">isExecing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">moveToThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qt_safe_pipe</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> sigaction oldAction<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> sigaction action<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>action<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    action<span class="token punctuation">.</span>sa_sigaction <span class="token operator">=</span> qfswd_sigio_monitor<span class="token punctuation">;</span>
    action<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_SIGINFO<span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">sigaction</span><span class="token punctuation">(</span>SIGIO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>action<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oldAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>oldAction<span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;</span> SA_SIGINFO<span class="token punctuation">)</span><span class="token punctuation">)</span>
        qfswd_old_sigio_handler <span class="token operator">=</span> oldAction<span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        qfswd_old_sigio_action <span class="token operator">=</span> oldAction<span class="token punctuation">.</span>sa_sigaction<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QDnotifySignalThread<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QDnotifySignalThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QThread<span class="token operator">::</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">event</span><span class="token punctuation">(</span>QEvent <span class="token operator">*</span>e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isExecing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        wait<span class="token punctuation">.</span><span class="token function">wakeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> QThread<span class="token operator">::</span><span class="token function">event</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">startNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Note: All this fancy waiting for the thread to enter its event</span>
    <span class="token comment" spellcheck="true">// loop is to avoid nasty messages at app shutdown when the</span>
    <span class="token comment" spellcheck="true">// QDnotifySignalThread singleton is deleted</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>isExecing<span class="token punctuation">)</span>
        wait<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QSocketNotifier <span class="token function">sn</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> QSocketNotifier<span class="token operator">::</span>Read<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sn<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readFromDnotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QCoreApplication<span class="token operator">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">postEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">QEvent</span><span class="token punctuation">(</span>QEvent<span class="token operator">::</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">readFromDnotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">int</span> readrv <span class="token operator">=</span> <span class="token function">qt_safe_read</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Only expect EAGAIN or EINTR. Other errors are assumed to be impossible.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>readrv <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Q_ASSERT</span><span class="token punctuation">(</span>readrv <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>readrv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span>
            <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            emit <span class="token function">fdChanged</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token function">dnotifySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">fdChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>DirectConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Directory<span class="token operator">></span><span class="token operator">::</span>ConstIterator iter <span class="token operator">=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">constBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            iter <span class="token operator">!=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">constEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>iter<span class="token operator">-</span><span class="token operator">></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token operator">-</span><span class="token operator">></span>parentFd<span class="token punctuation">)</span>
            <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>iter<span class="token operator">-</span><span class="token operator">></span>parentFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
QDnotifyFileSystemWatcherEngine <span class="token operator">*</span>QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">qFatal</span><span class="token punctuation">(</span><span class="token string">"QDnotifyFileSystemWatcherEngine thread should not be run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">bool</span> isDir <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDir <span class="token operator">&amp;&amp;</span> directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Skip monitored directories</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDir <span class="token operator">&amp;&amp;</span> files<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Skip monitored files</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDir<span class="token punctuation">)</span>
            path <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">canonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Locate the directory entry (creating if needed)</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> pathToFD<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            QT_DIR <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token function">QT_OPENDIR</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Could not open directory</span>
            QT_DIR <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            QDir <span class="token function">parentDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parentDir<span class="token punctuation">.</span><span class="token function">isRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parentDir<span class="token punctuation">.</span><span class="token function">cdUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parent <span class="token operator">=</span> <span class="token function">QT_OPENDIR</span><span class="token punctuation">(</span>parentDir<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">QT_CLOSEDIR</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            fd <span class="token operator">=</span> <span class="token function">qt_safe_dup</span><span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">dirfd</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> parentFd <span class="token operator">=</span> parent <span class="token operator">?</span> <span class="token function">qt_safe_dup</span><span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">dirfd</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">QT_CLOSEDIR</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token function">QT_CLOSEDIR</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Q_ASSERT</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETSIG<span class="token punctuation">,</span> SIGIO<span class="token punctuation">)</span> <span class="token operator">||</span>
               <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_NOTIFY<span class="token punctuation">,</span> DN_MODIFY <span class="token operator">|</span> DN_CREATE <span class="token operator">|</span> DN_DELETE <span class="token operator">|</span>
                                     DN_RENAME <span class="token operator">|</span> DN_ATTRIB <span class="token operator">|</span> DN_MULTISHOT<span class="token punctuation">)</span> <span class="token operator">||</span>
               <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">,</span> F_SETSIG<span class="token punctuation">,</span> SIGIO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
               <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">,</span> F_NOTIFY<span class="token punctuation">,</span> DN_DELETE <span class="token operator">|</span> DN_RENAME <span class="token operator">|</span>
                                            DN_MULTISHOT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Could not set appropriate flags</span>
            <span class="token punctuation">}</span>
            Directory dir<span class="token punctuation">;</span>
            dir<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
            dir<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>
            dir<span class="token punctuation">.</span>parentFd <span class="token operator">=</span> parentFd<span class="token punctuation">;</span>
            fdToDirectory<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathToFD<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">)</span>
                parentToFD<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Directory <span class="token operator">&amp;</span>directory <span class="token operator">=</span> fdToDirectory<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directory<span class="token punctuation">.</span>isMonitored <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Directory<span class="token operator">::</span>File file<span class="token punctuation">;</span>
            file<span class="token punctuation">.</span>path <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">filePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            file<span class="token punctuation">.</span>lastWrite <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathToFD<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">filePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">filePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">dnotifySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> pathToFD<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fd<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        Directory <span class="token operator">&amp;</span>directory <span class="token operator">=</span> fdToDirectory<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isDir <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>path <span class="token operator">==</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isDir <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            directory<span class="token punctuation">.</span>isMonitored <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">.</span>path <span class="token operator">==</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>directory<span class="token punctuation">.</span>isMonitored <span class="token operator">&amp;&amp;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// No longer needed</span>
            <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathToFD<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fdToDirectory<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> wasParent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Directory<span class="token operator">></span><span class="token operator">::</span>Iterator iter <span class="token operator">=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>iter <span class="token operator">==</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>Iterator pIter <span class="token operator">=</span> parentToFD<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pIter <span class="token operator">==</span> parentToFD<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        iter <span class="token operator">=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">*</span>pIter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">==</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        wasParent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Directory <span class="token operator">&amp;</span>directory <span class="token operator">=</span> <span class="token operator">*</span>iter<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>wasParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Directory<span class="token operator">::</span>File <span class="token operator">&amp;</span>file <span class="token operator">=</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Emit signal</span>
                QString filePath <span class="token operator">=</span> file<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
                <span class="token keyword">bool</span> removed <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">QFileInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">--</span>ii<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> removed<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>isMonitored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// Emit signal</span>
        <span class="token keyword">bool</span> removed <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">QFileInfo</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> directory<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span>
            directory<span class="token punctuation">.</span>isMonitored <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> removed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>directory<span class="token punctuation">.</span>isMonitored <span class="token operator">&amp;&amp;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            parentToFD<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fdToDirectory<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span>Directory<span class="token operator">::</span>File<span class="token operator">::</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QDateTime nLastWrite <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint nOwnerId <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint nGroupId <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">groupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QFile<span class="token operator">::</span>Permissions nPermissions <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nLastWrite <span class="token operator">!=</span> lastWrite <span class="token operator">||</span>
       nOwnerId <span class="token operator">!=</span> ownerId <span class="token operator">||</span>
       nGroupId <span class="token operator">!=</span> groupId <span class="token operator">||</span>
       nPermissions <span class="token operator">!=</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ownerId <span class="token operator">=</span> nOwnerId<span class="token punctuation">;</span>
        groupId <span class="token operator">=</span> nGroupId<span class="token punctuation">;</span>
        permissions <span class="token operator">=</span> nPermissions<span class="token punctuation">;</span>
        lastWrite <span class="token operator">=</span> nLastWrite<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Dnotify"><a href="#Dnotify" class="headerlink" title="Dnotify"></a>Dnotify</h2><p>Dnotify同理，也是使用的Linux的系统函数 /usr/include/unistd.h  主要是这个头文件中的函数。有一些关于文件描述符相关的函数</p>
<p>里边主要监控的是其内部类的相关的信息</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">struct</span> Directory <span class="token punctuation">{</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">parentFd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isMonitored</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token keyword">const</span> Directory <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">fd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">parentFd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">isMonitored</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>isMonitored<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">files</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        QString path<span class="token punctuation">;</span>
        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
        <span class="token keyword">int</span> parentFd<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isMonitored<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> File <span class="token punctuation">{</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">groupId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">permissions</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token keyword">const</span> File <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">ownerId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ownerId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">groupId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">permissions</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>permissions<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">lastWrite</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>lastWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            QString path<span class="token punctuation">;</span>
            <span class="token keyword">bool</span> <span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint ownerId<span class="token punctuation">;</span>
            uint groupId<span class="token punctuation">;</span>
            QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
            QDateTime lastWrite<span class="token punctuation">;</span></code></pre>
<p>可以直接看这个结构D需要这四个描述信息</p>
<pre class=" language-cpp"><code class="language-cpp">        QString path<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//路径</span>
        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//文件的描述符</span>
        <span class="token keyword">int</span> parentFd<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父亲的描述符号</span>
        <span class="token keyword">bool</span> isMonitored<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否正在监控</span></code></pre>
<p>其中这四个信息都是通过<em>Linux的库函数</em>与结构体来获取的。 其中遍历文件夹则是使用Qt的QFileInfo来遍历添加paths的信息，存储到其类的成员变量中。</p>
<pre><code>// Directory iteration
#define QT_DIR DIR
#define QT_OPENDIR ::opendir
#define QT_CLOSEDIR ::closedir</code></pre><p>Dir下的file需要这些信息</p>
<pre class=" language-cpp"><code class="language-cpp">            QString path<span class="token punctuation">;</span>
            uint ownerId<span class="token punctuation">;</span>
            uint groupId<span class="token punctuation">;</span>
            QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
            QDateTime lastWrite<span class="token punctuation">;</span></code></pre>
<p>现在说一下关键代码</p>
<pre class=" language-cpp"><code class="language-cpp">    ret <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// set non-block too?</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> O_NONBLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>其中 pipefd[0]表示读，pipefd[1]表示写，实际上<br>关键代码在这里。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QSocketNotifier <span class="token function">sn</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> QSocketNotifier<span class="token operator">::</span>Read<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sn<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readFromDnotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QCoreApplication<span class="token operator">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">postEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">QEvent</span><span class="token punctuation">(</span>QEvent<span class="token operator">::</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这段代码实际上是使用QSocketNotifier实时检测出从pip管道中读取有关于文件信息的变化，加到了Qt在Linux下的事件循环中（还记上以前有个老哥写的那个u盘检测工具么？实际上原理跟这个一样，都是通过socket来读取文件描述符的状态来检测其变化）。然后等待其消息通知变化。这样来实时监控文件夹与文件的变化。其中QDnotify大量使用了Unix的库函数，建议有兴趣的可以多读读Unix高级环境编程这本书，可以当个字典来看。我也不一个个解释了。实际上这个类，我读起来也是有点吃力，因为大部分都是Linux的库函数，还是得补补课去看看《Unix环境高级编程》了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这两个类的主要原理是先缓存当前addpath的文件or文件夹的信息，然后再通过socket来实时检测其变化。获取当前的信息与缓存的信息做对比，如果有变化，就发送对应的信号。这样我们就可以检测到文件or文件夹的变化了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
  <entry>
    <title>Gtk widget 与 Qt Widget的相互嵌套</title>
    <url>/2020/06/27/gtk-widget-yu-qt-widget-de-xiang-hu-qian-tao/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>gtk qt窗口的相互嵌套。主要是使用了Gtk中的socket跟plug的模式，与Qt中的QX11EmbedContainer。这是两个不同的UI库的相互嵌套的方法。google了下发现有个老哥写出来了，但是gtk嵌入到Qt的代码中是有点问题的，所以我改了改他的代码。最后终于完成了，毕竟我对gtk不太熟悉=。=代码很简单，这里就不做任何说明了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>pro文件中添加</p>
<pre class=" language-cpp"><code class="language-cpp">unix<span class="token operator">:</span> CONFIG <span class="token operator">+</span><span class="token operator">=</span> link_pkgconfig
unix<span class="token operator">:</span> PKGCONFIG <span class="token operator">+</span><span class="token operator">=</span> gtk<span class="token operator">+-</span><span class="token number">2.0</span></code></pre>
<p>代码</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtk/gtk.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QX11EmbedContainer></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QX11EmbedWidget></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gdk/gdkx.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> MAINWINDOW_IS_QT true</span>
<span class="token macro property">#<span class="token directive keyword">define</span> EMBEDDED_IS_QT false</span>
<span class="token keyword">void</span> <span class="token function">create_qt_embed</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QX11EmbedWidget<span class="token operator">*</span> plug <span class="token operator">=</span> <span class="token keyword">new</span> QX11EmbedWidget<span class="token punctuation">;</span>
    plug<span class="token operator">-</span><span class="token operator">></span><span class="token function">embedInto</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPushButton<span class="token operator">*</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"My Label"</span><span class="token punctuation">,</span> plug<span class="token punctuation">)</span><span class="token punctuation">;</span>
    plug<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">create_gtk_plug</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//    GtkWidget* plug = gtk_plug_new(id);</span>
<span class="token comment" spellcheck="true">//    gtk_widget_show(plug);</span>
<span class="token comment" spellcheck="true">//    GtkWidget* button = gtk_button_new_with_label("My Label");</span>
<span class="token comment" spellcheck="true">//    gtk_widget_show(button);</span>
<span class="token comment" spellcheck="true">//    GDK_WINDOW_XID(button);</span>
<span class="token comment" spellcheck="true">//    gdk_x11_window_get_xid()</span>
<span class="token comment" spellcheck="true">//    gtk_container_add(GTK_CONTAINER(plug), button);</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">gtk_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>MAINWINDOW_IS_QT<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        QMainWindow<span class="token operator">*</span> main_window <span class="token operator">=</span> <span class="token keyword">new</span> QMainWindow<span class="token punctuation">;</span>
        QX11EmbedContainer<span class="token operator">*</span> container <span class="token operator">=</span> <span class="token keyword">new</span> QX11EmbedContainer<span class="token punctuation">;</span>
        main_window<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCentralWidget</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token operator">-</span><span class="token operator">></span><span class="token function">setStyleSheet</span><span class="token punctuation">(</span><span class="token string">"background-color:red;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>EMBEDDED_IS_QT<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">create_qt_embed</span><span class="token punctuation">(</span>container<span class="token operator">-</span><span class="token operator">></span><span class="token function">winId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//            gtk_widget_get_window(GTK_WIDGET(button));</span>
            GtkWidget<span class="token operator">*</span> window<span class="token punctuation">;</span>
            GtkWidget<span class="token operator">*</span> button<span class="token punctuation">;</span>
            window <span class="token operator">=</span> <span class="token function">gtk_window_new</span><span class="token punctuation">(</span>GTK_WINDOW_TOPLEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
            button <span class="token operator">=</span> <span class="token function">gtk_button_new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">gtk_widget_show</span> <span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">gtk_container_add</span> <span class="token punctuation">(</span><span class="token function">GTK_CONTAINER</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">gtk_widget_show</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
            XID id <span class="token operator">=</span> <span class="token function">GDK_WINDOW_XWINDOW</span> <span class="token punctuation">(</span><span class="token function">GTK_WIDGET</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
            container<span class="token operator">-</span><span class="token operator">></span><span class="token function">embedClient</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        main_window<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QApplication<span class="token operator">::</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        GtkWidget <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token function">gtk_window_new</span><span class="token punctuation">(</span>GTK_WINDOW_TOPLEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">g_signal_connect</span><span class="token punctuation">(</span><span class="token function">G_OBJECT</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"destroy"</span><span class="token punctuation">,</span>
                         <span class="token function">G_CALLBACK</span><span class="token punctuation">(</span>gtk_main_quit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gtk_widget_show</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GtkWidget<span class="token operator">*</span> container <span class="token operator">=</span> <span class="token function">gtk_socket_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gtk_widget_show</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gtk_container_add</span><span class="token punctuation">(</span><span class="token function">GTK_CONTAINER</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>EMBEDDED_IS_QT<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">create_qt_embed</span><span class="token punctuation">(</span><span class="token function">gtk_socket_get_id</span><span class="token punctuation">(</span><span class="token function">GTK_SOCKET</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">create_gtk_plug</span><span class="token punctuation">(</span><span class="token function">gtk_socket_get_id</span><span class="token punctuation">(</span><span class="token function">GTK_SOCKET</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">gtk_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>GTK</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileSystemWatcher源码剖析(Linux)_1</title>
    <url>/2020/06/27/qfilesystemwatcher-yuan-ma-pou-xi-linux-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇讲了QFileSystemWatcher来检测文件夹的变化，里边的实现有两个</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 这个用于检测文件类型的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QInotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine

<span class="token comment" spellcheck="true">// 这个用于监控Dir的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QDnotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
</code></pre>
<p>QFileSystemWatcher中这两个类监视文件夹的变化还有一个小小的缺点，就是无法监视连接到服务器的位置，一般挂载到服务器到Linux本地的路径是这里</p>
<pre class=" language-shell"><code class="language-shell">/run/user/1000/gvfs</code></pre>
<p>这个目录下的。没有办法只能自己暂时实现了。</p>
<h2 id="多线程-定时器"><a href="#多线程-定时器" class="headerlink" title="多线程 + 定时器"></a>多线程 + 定时器</h2><p>实际上一开始准备自己实现的，但是发现QFileSystemWatcher里边已经有一个类是对应的实现了。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token punctuation">{</span> PollingInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">QPollingFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
<span class="token punctuation">{</span>
    Q_OBJECT
    <span class="token keyword">class</span> <span class="token class-name">FileInfo</span>
    <span class="token punctuation">{</span>
        uint ownerId<span class="token punctuation">;</span>
        uint groupId<span class="token punctuation">;</span>
        QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
        QDateTime lastModified<span class="token punctuation">;</span>
        QStringList entries<span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">FileInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFileInfo <span class="token operator">&amp;</span>fileInfo<span class="token punctuation">)</span>
            <span class="token operator">:</span> <span class="token function">ownerId</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function">groupId</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">groupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function">permissions</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function">lastModified</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                entries <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span><span class="token function">absoluteDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entryList</span><span class="token punctuation">(</span>QDir<span class="token operator">::</span>AllEntries<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        FileInfo <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFileInfo <span class="token operator">&amp;</span>fileInfo<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">FileInfo</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFileInfo <span class="token operator">&amp;</span>fileInfo<span class="token punctuation">)</span> <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> entries <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">absoluteDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entryList</span><span class="token punctuation">(</span>QDir<span class="token operator">::</span>AllEntries<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>ownerId <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> groupId <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">groupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> permissions <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> lastModified <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">mutable</span> QMutex mutex<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span> files<span class="token punctuation">,</span> directories<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">QPollingFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> Q_SLOTS<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//--cpp</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"filewatcher.h"</span></span>
QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">QPollingFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> QT_NO_THREAD</span>
    <span class="token function">moveToThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QTimer timer<span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>PollingInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                fi <span class="token operator">=</span> <span class="token function">QFileInfo</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>directories<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                files<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>files<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>directories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>directories<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        locker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMetaObject<span class="token operator">::</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"quit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QMutableHashIterator<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span> <span class="token function">fit</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span><span class="token operator">::</span>iterator x <span class="token operator">=</span> fit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> fi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> fi<span class="token punctuation">;</span>
            emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    QMutableHashIterator<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span> <span class="token function">dit</span><span class="token punctuation">(</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>dit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span><span class="token operator">::</span>iterator x <span class="token operator">=</span> dit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            fi <span class="token operator">=</span> <span class="token function">QFileInfo</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> fi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fi<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> fi<span class="token punctuation">;</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到</span>
<span class="token keyword">class</span> <span class="token class-name">QPollingFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine</code></pre>
<p>这个类Qt没有对外接口暴露，实际上看QFileSystemWatcher的实现</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//poller在这里初始化</span>
<span class="token keyword">void</span> QFileSystemWatcherPrivate<span class="token operator">::</span><span class="token function">initPollerEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>poller<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">Q_Q</span><span class="token punctuation">(</span>QFileSystemWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    poller <span class="token operator">=</span> <span class="token keyword">new</span> QPollingFileSystemWatcherEngine<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// that was a mouthful</span>
    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>poller<span class="token punctuation">,</span>
                     <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">fileChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     q<span class="token punctuation">,</span>
                     <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">_q_fileChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>poller<span class="token punctuation">,</span>
                     <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">directoryChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     q<span class="token punctuation">,</span>
                     <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">_q_directoryChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//在这里调用</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">objectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"_qt_autotest_force_engine_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//这里也就是</span>
        <span class="token comment" spellcheck="true">// Normal runtime case - search intelligently for best engine</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">-</span><span class="token operator">></span>native<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            engine <span class="token operator">=</span> d<span class="token operator">-</span><span class="token operator">></span>native<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">initPollerEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//这里初始化，否则就走上边两个无法监视服务器的实现</span>
            engine <span class="token operator">=</span> d<span class="token operator">-</span><span class="token operator">></span>poller<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>发现QFileSystemWatcher设置objectName为<em>qt_autotest_force_engine</em> 就可以使用了。<br>然后接着</p>
<pre class=" language-cpp"><code class="language-cpp">    QFileSystemWatcher<span class="token operator">*</span> fileSystemWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QFileSystemWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fileSystemWatcher<span class="token operator">-</span><span class="token operator">></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"_qt_autotest_force_engine_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这样就可以监视</p>
<pre class=" language-shell"><code class="language-shell">/run/user/1000/gvfs</code></pre>
<p>目录下的文件，也就是服务器挂载到Linux本地下的文件变化了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 安装 kubuntu桌面</title>
    <url>/2020/06/27/ubuntu16-04-an-zhuang-kubuntu-zhuo-mian/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近想看看kde下的文件管理器是怎么实现的，因为发现Qt自带的文件管理器是有性能bug的,而且并没有ui线程上的交互处理，如果改的话，只能去更改Qt源码（但是这样改也太蛋疼了，哪有一言不合就去改Qt源码的）。所以想看看同样是Qt写的kde桌面是不是有这个问题。所以装了一个kde的环境来看看，因为也遇到了一些小问题，而且百度出来的全是csdn的乱七八糟的东西，只能自己总结下了。</p>
<h2 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h2><p>ubuntu自带的源没有找到，我就更新了下源。首先备份源</p>
<pre class=" language-shell"><code class="language-shell">cd /etc/apt/
sudo cp sources.list sources.list.bak</code></pre>
<p>然后都删掉里边的内容 ，添加</p>
<pre class=" language-shell"><code class="language-shell"># ubuntu16.04 source
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
</code></pre>
<p>然后再更新源</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get update</code></pre>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我的ubuntu环境是16.04所以就按照这个来讲了。</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install kubuntu-desktop</code></pre>
<p>我这里下载了大概1.5G的安装包，然后发现报错，让sudo apt-get -f install 下发现还是报错</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 第一个错误</span>
 kde<span class="token operator">-</span>telepathy<span class="token operator">-</span>minimal <span class="token operator">:</span> 依赖<span class="token operator">:</span> kde<span class="token operator">-</span>config<span class="token operator">-</span>telepathy<span class="token operator">-</span><span class="token function">accounts</span> <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">15.04</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span> 但是它将不会被安装

<span class="token comment" spellcheck="true">// -f install 之后还是报错。</span>
dpkg<span class="token operator">:</span> 处理归档 <span class="token operator">/</span>var<span class="token operator">/</span>cache<span class="token operator">/</span>apt<span class="token operator">/</span>archives<span class="token operator">/</span>kde<span class="token operator">-</span>config<span class="token operator">-</span>telepathy<span class="token operator">-</span>accounts_4<span class="token operator">%</span>3a15<span class="token number">.12</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span>0ubuntu1_amd64<span class="token punctuation">.</span><span class="token function">deb</span> <span class="token punctuation">(</span><span class="token operator">--</span>unpack<span class="token punctuation">)</span>时出错：
 正试图覆盖 <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>accounts<span class="token operator">/</span>services<span class="token operator">/</span>google<span class="token operator">-</span>im<span class="token punctuation">.</span>service，它同时被包含于软件包 account<span class="token operator">-</span>plugin<span class="token operator">-</span>google <span class="token number">0.12</span><span class="token operator">+</span><span class="token number">16.04</span><span class="token punctuation">.</span><span class="token number">20160126</span><span class="token operator">-</span>0ubuntu1</code></pre>
<p>发现这是Ubuntu的一个bug，把报错的软件包干掉就可以了。</p>
<pre class=" language-shell"><code class="language-shell">sudo dpkg -r account-plugin-google unity-scope-gdrive</code></pre>
<p>然后再</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get -f install </code></pre>
<p>就ok了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Ubuntu</tag>
        <tag>KDE</tag>
        <tag>kubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置更换全局用户名</title>
    <url>/2020/06/27/git-pei-zhi-geng-huan-quan-ju-yong-hu-ming/</url>
    <content><![CDATA[<h2 id="吐嘈"><a href="#吐嘈" class="headerlink" title="吐嘈"></a>吐嘈</h2><p>每次在github上提交代码，都发现是默认我原来的git的那个用户名，原来写了globle，现在得在当前git目录下再多设置一下，要不然还是得用默认的用户名</p>
<pre class=" language-shell"><code class="language-shell">git config user.name "xxx"
git config user.email "xxx"</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04编译KDE dolphin文件管理器</title>
    <url>/2020/06/27/ubuntu18-04-bian-yi-kde-dolphin-wen-jian-guan-li-qi/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>首先最近在研究（填坑）文件管理器，其中Qt实现的文件管理器做的最好的就是KDE实现的dolphin.所以特意装了个Ubuntu18.04的操作系统装了KDE的环境。来编译一下dolphin。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>ubuntu的kde环境</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install kubuntu-desktop</code></pre>
<h2 id="准备依赖"><a href="#准备依赖" class="headerlink" title="准备依赖"></a>准备依赖</h2><p>首先要安装dolphin的依赖。这里安装的全部都是kde的依赖</p>
<pre class=" language-shell"><code class="language-shell">sudo apt install kinit-dev libkf5crash-dev libkf5notifications-dev libkf5notifyconfig-dev libkf5parts-dev libkf5kcmutils-dev libkf5newstuff-dev libkf5coreaddons-dev libkf5i18n-dev libkf5dbusaddons-dev libkf5config-dev
sudo apt install libkf5activities-dev libphonon4qt5-dev
sudo apt install libkf5baloowidgets-dev libkf5filemetadata-dev libkf5kdelibs4support-dev
sudo apt install baloo-kf5-dev
sudo apt-get install git build-essential cmake qt5-default qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev</code></pre>
<p>由于是新的环境，还要安装新的编译开发工具。<br>然后可以开始下载源码</p>
<pre class=" language-shell"><code class="language-shell">sudo apt install git g++ build-essential qt5-qmake qt5-default cmake
sudo apt-get install qtcreator
sudo apt-get install extra-cmake-modules</code></pre>
<p>然后下载源码，并且编译Debug版本</p>
<pre class=" language-shell"><code class="language-shell">git clone git://anongit.kde.org/dolphin
cd dolphin
mkdir build
cd build
cmake ../ -DCMAKE_BUILD_TYPE=Debug
make</code></pre>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>kde</tag>
        <tag>dolphin</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt打印机原理源码剖析_Linux</title>
    <url>/2020/06/27/qt-da-yin-ji-yuan-li-yuan-ma-pou-xi-linux/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Qt在Linux下打印机的原理以及源码相关知识。<br>下边我就详细的讲一下Linux下的打印机原理。</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>Linux下简单的流程就是这样</p>
<div id="flowchart-0" class="flow-chart"></div>


<h1 id="CUPS"><a href="#CUPS" class="headerlink" title="CUPS"></a>CUPS</h1><p>目前Linux上打印的通用协议是CUPS协议。目前由苹果公司来维护。算了我还是粘一下wiki的词条吧。</p>
<p>wiki词条</p>
<blockquote>
<p>CUPS (formerly an acronym for Common UNIX Printing System) is a modular printing system for Unix-like computer operating systems which allows a computer to act as a print server. A computer running CUPS is a host that can accept print jobs from client computers, process them, and send them to the appropriate printer.<br>CUPS consists of a print spooler and scheduler, a filter system that converts the print data to a format that the printer will understand, and a backend system that sends this data to the print device. CUPS uses the Internet Printing Protocol (IPP) as the basis for managing print jobs and queues. It also provides the traditional command line interfaces for the System V and Berkeley print systems, and provides support for the Berkeley print system’s Line Printer Daemon protocol and limited support for the server message block (SMB) protocol. System administrators can configure the device drivers which CUPS supplies by editing text files in Adobe’s PostScript Printer Description (PPD) format. There are a number of user interfaces for different pl#atforms that can configure CUPS, and it has a built-in web-based interface. CUPS is free software, provided under the Apache License. </p>
</blockquote>
<blockquote>
<p>CUPS（前为Common Unix Printing System，即UNIX通用打印系统的缩写，但现无官方全名[来源请求]）是一个类Unix操作系统的组合式印刷系统，允许一台计算机作为打印服务器。CUPS接受一个客户端的计算机进程，并送到相应的打印机。<br>CUPS是自由软件，使用GNU通用公共许可证和GNU宽通用公共许可证的第2版。<br>迈克尔·斯维特，Easy Software Products的拥有者，于1997年开始开发CUPS。首次公开测试版于1999年发布。[2]原本设计的CUPS使用行式打印机后台程序协议，但由于LPD的限制和供应商不兼容，所以由互联网打印协议(IPP)代替。CUPS被迅速默认为一些Linux发行版的打印系统，如Red Hat Linux。2002年3月，苹果公司在Mac OS X v10.2中采用了CUPS。[3]2007年2月，苹果公司聘请了迈克尔·斯维特并购买了CUPS的源代码。[4]</p>
</blockquote>
<p>再次说一遍 <em>目前Unix系列的打印原理都是走的该协议。</em></p>
<h2 id="CUPS是开源的"><a href="#CUPS是开源的" class="headerlink" title="CUPS是开源的"></a>CUPS是开源的</h2><ul>
<li>官网 <a href="https://www.cups.org/" target="_blank" rel="noopener">https://www.cups.org/</a> </li>
<li>源码 <a href="https://github.com/apple/cups" target="_blank" rel="noopener">https://github.com/apple/cups</a></li>
</ul>
<p>我读过这里的源码，为了验证下边有个纠结的问题。全是c写的，也不难。</p>
<h2 id="Linux下的驱动"><a href="#Linux下的驱动" class="headerlink" title="Linux下的驱动"></a>Linux下的驱动</h2><p>秉承着Linux下的原则，一切皆文件，实际上Linux下的打印机驱动也是文件，在目录/etc/cups/ppd文件夹下。可以随意装个虚拟驱动来看下</p>
<p>简单的给大家看几行ppd文件，这是我本地下的驱动文件</p>
<pre><code>*PPD-Adobe: &quot;4.3&quot;
*%%%% PPD file for Generic Text-Only Printer with CUPS.
*%%%% Created by the CUPS PPD Compiler CUPS v2.2.7.
*% (c) 2014 OpenPrinting
*FormatVersion: &quot;4.3&quot;
*FileVersion: &quot;1.0&quot;
*LanguageVersion: English
*LanguageEncoding: ISOLatin1
*PCFileName: &quot;textonly.ppd&quot;
*Product: &quot;(Generic Text-Only Printer)&quot;
*Manufacturer: &quot;Generic&quot;
*ModelName: &quot;Generic Text-Only Printer&quot;
*ShortNickName: &quot;Generic Text-Only Printer&quot;
*NickName: &quot;Generic Text-Only Printer&quot;
*PSVersion: &quot;(3010.000) 0&quot;
*LanguageLevel: &quot;3&quot;
*ColorDevice: False
*DefaultColorSpace: Gray
*FileSystem: False
*Throughput: &quot;1&quot;
*LandscapeOrientation: Plus90
*TTRasterizer: Type42
*% Driver-defined attributes...
*cupsFilter2: &quot;text/plain text/plain 0 texttotext&quot;
*RequiresPageRegion All: True
*1284DeviceID: &quot;MFG:Generic;MDL:Text-Only Printer;DES:Generic Text-Only Printer;CLS:PRINTER;CMD:TXT;DRV:Dtextonly,R1,M0;&quot;
*cupsVersion: 2.2
*cupsModelNumber: 0
*cupsManualCopies: True
*cupsFilter: &quot;text/plain 0 texttotext&quot;
*cupsLanguages: &quot;en&quot;</code></pre><p>里边主要是一些字符串信息。你可以简单的理解，cups就是来解析ppd文件中的字符串信息的。</p>
<h2 id="Qt对CUPS的支持。"><a href="#Qt对CUPS的支持。" class="headerlink" title="Qt对CUPS的支持。"></a>Qt对CUPS的支持。</h2><p>实际上Qt对CUPS的支持是相当好的，源码级别的话都不到千行，将cups提供的信息封装了一层Qt的API来给大家使用。实际上QPrinter也是调用的Qt封装的QCUPSSupport。注意一下QPrinter在Linux下的初始化是非常慢的。不要频繁调用。</p>
<p>上源码QCUPSSupport</p>
<pre><code>//Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/gui/painting/ 源码在这里
/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtGui module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file. Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#ifndef QCUPS_P_H
#define QCUPS_P_H
//
// W A R N I N G
// -------------
//
// This file is not part of the Qt API. It exists purely as an
// implementation detail. This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
//
#include &quot;QtCore/qstring.h&quot;
#include &quot;QtCore/qstringlist.h&quot;
#include &quot;QtGui/qprinter.h&quot;
#ifndef QT_NO_CUPS
#include &lt;QtCore/qlibrary.h&gt;
#include &lt;cups/cups.h&gt;
#include &lt;cups/ppd.h&gt;
QT_BEGIN_NAMESPACE
Q_DECLARE_TYPEINFO(cups_option_t, Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE);
class QCUPSSupport
{
public:
    QCUPSSupport();
    ~QCUPSSupport();
    static bool isAvailable();
    static int cupsVersion() { return isAvailable() ? CUPS_VERSION_MAJOR*10000+CUPS_VERSION_MINOR*100+CUPS_VERSION_PATCH : 0; }
    int availablePrintersCount() const;
    const cups_dest_t* availablePrinters() const;
    int currentPrinterIndex() const;
    const ppd_file_t* setCurrentPrinter(int index);
    const ppd_file_t* currentPPD() const;
    const ppd_option_t* ppdOption(const char *key) const;
    const cups_option_t* printerOption(const QString &amp;key) const;
    const ppd_option_t* pageSizes() const;
    int markOption(const char* name, const char* value);
    void saveOptions(QList&lt;const ppd_option_t*&gt; options, QList&lt;const char*&gt; markedOptions);
    QRect paperRect(const char *choice) const;
    QRect pageRect(const char *choice) const;
    QStringList options() const;
    static bool printerHasPPD(const char *printerName);
    QString unicodeString(const char *s);
    QPair&lt;int, QString&gt; tempFd();
    int printFile(const char * printerName, const char * filename, const char * title,
                  int num_options, cups_option_t * options);
private:
    void collectMarkedOptions(QStringList&amp; list, const ppd_group_t* group = 0) const;
    void collectMarkedOptionsHelper(QStringList&amp; list, const ppd_group_t* group) const;
    int prnCount;
    cups_dest_t *printers;
    const ppd_option_t* page_sizes;
    int currPrinterIndex;
    ppd_file_t *currPPD;
#ifndef QT_NO_TEXTCODEC
    QTextCodec *codec;
#endif
};
QT_END_NAMESPACE
#endif // QT_NO_CUPS
#endif</code></pre><p>cpp</p>
<pre><code>//Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/gui/painting/qcups.cpp

/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtGui module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file. Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#include &lt;qdebug.h&gt;
#include &quot;qcups_p.h&quot;
#ifndef QT_NO_CUPS
#ifndef QT_LINUXBASE // LSB merges everything into cups.h
# include &lt;cups/language.h&gt;
#endif
#include &lt;qtextcodec.h&gt;
QT_BEGIN_NAMESPACE
typedef int (*CupsGetDests)(cups_dest_t **dests);
typedef void (*CupsFreeDests)(int num_dests, cups_dest_t *dests);
typedef const char* (*CupsGetPPD)(const char *printer);
typedef int (*CupsMarkOptions)(ppd_file_t *ppd, int num_options, cups_option_t *options);
typedef ppd_file_t* (*PPDOpenFile)(const char *filename);
typedef void (*PPDMarkDefaults)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*PPDClose)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*CupsFreeOptions)(int num_options, cups_option_t *options);
typedef void (*CupsSetDests)(int num_dests, cups_dest_t *dests);
typedef cups_lang_t* (*CupsLangGet)(const char *language);
typedef const char* (*CupsLangEncoding)(cups_lang_t *language);
typedef int (*CupsAddOption)(const char *name, const char *value, int num_options, cups_option_t **options);
typedef int (*CupsTempFd)(char *name, int len);
typedef int (*CupsPrintFile)(const char * name, const char * filename, const char * title, int num_options, cups_option_t * options);
static bool cupsLoaded = false;
static int qt_cups_num_printers = 0;
static CupsGetDests _cupsGetDests = 0;
static CupsFreeDests _cupsFreeDests = 0;
static CupsGetPPD _cupsGetPPD = 0;
static PPDOpenFile _ppdOpenFile = 0;
static PPDMarkDefaults _ppdMarkDefaults = 0;
static PPDClose _ppdClose = 0;
static CupsMarkOptions _cupsMarkOptions = 0;
static PPDMarkOption _ppdMarkOption = 0;
static CupsFreeOptions _cupsFreeOptions = 0;
static CupsSetDests _cupsSetDests = 0;
static CupsLangGet _cupsLangGet = 0;
static CupsLangEncoding _cupsLangEncoding = 0;
static CupsAddOption _cupsAddOption = 0;
static CupsTempFd _cupsTempFd = 0;
static CupsPrintFile _cupsPrintFile = 0;
static void resolveCups()
{
    QLibrary cupsLib(QLatin1String(&quot;cups&quot;), 2);
    if(cupsLib.load()) {
        _cupsGetDests = (CupsGetDests) cupsLib.resolve(&quot;cupsGetDests&quot;);
        _cupsFreeDests = (CupsFreeDests) cupsLib.resolve(&quot;cupsFreeDests&quot;);
        _cupsGetPPD = (CupsGetPPD) cupsLib.resolve(&quot;cupsGetPPD&quot;);
        _cupsLangGet = (CupsLangGet) cupsLib.resolve(&quot;cupsLangGet&quot;);
        _cupsLangEncoding = (CupsLangEncoding) cupsLib.resolve(&quot;cupsLangEncoding&quot;);
        _ppdOpenFile = (PPDOpenFile) cupsLib.resolve(&quot;ppdOpenFile&quot;);
        _ppdMarkDefaults = (PPDMarkDefaults) cupsLib.resolve(&quot;ppdMarkDefaults&quot;);
        _ppdClose = (PPDClose) cupsLib.resolve(&quot;ppdClose&quot;);
        _cupsMarkOptions = (CupsMarkOptions) cupsLib.resolve(&quot;cupsMarkOptions&quot;);
        _ppdMarkOption = (PPDMarkOption) cupsLib.resolve(&quot;ppdMarkOption&quot;);
        _cupsFreeOptions = (CupsFreeOptions) cupsLib.resolve(&quot;cupsFreeOptions&quot;);
        _cupsSetDests = (CupsSetDests) cupsLib.resolve(&quot;cupsSetDests&quot;);
        _cupsAddOption = (CupsAddOption) cupsLib.resolve(&quot;cupsAddOption&quot;);
        _cupsTempFd = (CupsTempFd) cupsLib.resolve(&quot;cupsTempFd&quot;);
        _cupsPrintFile = (CupsPrintFile) cupsLib.resolve(&quot;cupsPrintFile&quot;);
        if (_cupsGetDests &amp;&amp; _cupsFreeDests) {
            cups_dest_t *printers;
            int num_printers = _cupsGetDests(&amp;printers);
            if (num_printers)
                _cupsFreeDests(num_printers, printers);
            qt_cups_num_printers = num_printers;
        }
    }
    cupsLoaded = true;
}
// ================ CUPS Support class ========================
QCUPSSupport::QCUPSSupport()
    :
    prnCount(0),
    printers(0),
    page_sizes(0),
    currPrinterIndex(0),
    currPPD(0)
{
    if (!cupsLoaded)
        resolveCups();
    // getting all available printers
    if (!isAvailable())
        return;
    // Update the available printer count
    qt_cups_num_printers = prnCount = _cupsGetDests(&amp;printers);
    for (int i = 0; i &lt; prnCount; ++i) {
        if (printers[i].is_default) {
            currPrinterIndex = i;
            setCurrentPrinter(i);
            break;
        }
    }
#ifndef QT_NO_TEXTCODEC
    cups_lang_t *cupsLang = _cupsLangGet(0);
    codec = QTextCodec::codecForName(_cupsLangEncoding(cupsLang));
    if (!codec)
        codec = QTextCodec::codecForLocale();
#endif
}
QCUPSSupport::~QCUPSSupport()
{
     if (currPPD)
        _ppdClose(currPPD);
     if (prnCount)
         _cupsFreeDests(prnCount, printers);
}
int QCUPSSupport::availablePrintersCount() const
{
    return prnCount;
}
const cups_dest_t* QCUPSSupport::availablePrinters() const
{
    return printers;
}
const ppd_file_t* QCUPSSupport::currentPPD() const
{
    return currPPD;
}
const ppd_file_t* QCUPSSupport::setCurrentPrinter(int index)
{
    Q_ASSERT(index &gt;= 0 &amp;&amp; index &lt;= prnCount);
    if (index == prnCount)
        return 0;
    currPrinterIndex = index;
    if (currPPD)
        _ppdClose(currPPD);
    currPPD = 0;
    page_sizes = 0;
    const char *ppdFile = _cupsGetPPD(printers[index].name);
    if (!ppdFile)
      return 0;
    currPPD = _ppdOpenFile(ppdFile);
    unlink(ppdFile);
    // marking default options
    _ppdMarkDefaults(currPPD);
    // marking options explicitly set
    _cupsMarkOptions(currPPD, printers[currPrinterIndex].num_options, printers[currPrinterIndex].options);
    // getting pointer to page sizes
    page_sizes = ppdOption(&quot;PageSize&quot;);
    return currPPD;
}
int QCUPSSupport::currentPrinterIndex() const
{
    return currPrinterIndex;
}
bool QCUPSSupport::isAvailable()
{
    if(!cupsLoaded)
        resolveCups();
    return _cupsGetDests &amp;&amp;
        _cupsFreeDests &amp;&amp;
        _cupsGetPPD &amp;&amp;
        _ppdOpenFile &amp;&amp;
        _ppdMarkDefaults &amp;&amp;
        _ppdClose &amp;&amp;
        _cupsMarkOptions &amp;&amp;
        _ppdMarkOption &amp;&amp;
        _cupsFreeOptions &amp;&amp;
        _cupsSetDests &amp;&amp;
        _cupsLangGet &amp;&amp;
        _cupsLangEncoding &amp;&amp;
        _cupsAddOption &amp;&amp;
        (qt_cups_num_printers &gt; 0);
}
const ppd_option_t* QCUPSSupport::ppdOption(const char *key) const
{
    if (currPPD) {
        for (int gr = 0; gr &lt; currPPD-&gt;num_groups; ++gr) {
            for (int opt = 0; opt &lt; currPPD-&gt;groups[gr].num_options; ++opt) {
                if (qstrcmp(currPPD-&gt;groups[gr].options[opt].keyword, key) == 0)
                    return &amp;currPPD-&gt;groups[gr].options[opt];
            }
        }
    }
    return 0;
}
const cups_option_t* QCUPSSupport::printerOption(const QString &amp;key) const
{
    for (int i = 0; i &lt; printers[currPrinterIndex].num_options; ++i) {
        if (QLatin1String(printers[currPrinterIndex].options[i].name) == key)
            return &amp;printers[currPrinterIndex].options[i];
    }
    return 0;
}
const ppd_option_t* QCUPSSupport::pageSizes() const
{
    return page_sizes;
}
int QCUPSSupport::markOption(const char* name, const char* value)
{
    return _ppdMarkOption(currPPD, name, value);
}
void QCUPSSupport::saveOptions(QList&lt;const ppd_option_t*&gt; options, QList&lt;const char*&gt; markedOptions)
{
    int oldOptionCount = printers[currPrinterIndex].num_options;
    cups_option_t* oldOptions = printers[currPrinterIndex].options;
    int newOptionCount = 0;
    cups_option_t* newOptions = 0;
    // copying old options that are not on the new list
    for (int i = 0; i &lt; oldOptionCount; ++i) {
        bool contains = false;
        for (int j = 0; j &lt; options.count(); ++j) {
            if (qstrcmp(options.at(j)-&gt;keyword, oldOptions[i].name) == 0) {
                contains = true;
                break;
            }
        }
        if (!contains) {
            newOptionCount = _cupsAddOption(oldOptions[i].name, oldOptions[i].value, newOptionCount, &amp;newOptions);
        }
    }
    // we can release old option list
     _cupsFreeOptions(oldOptionCount, oldOptions);
    // adding marked options
    for (int i = 0; i &lt; markedOptions.count(); ++i) {
        const char* name = markedOptions.at(i);
        ++i;
        newOptionCount = _cupsAddOption(name, markedOptions.at(i), newOptionCount, &amp;newOptions);
    }
    // placing the new option list
    printers[currPrinterIndex].num_options = newOptionCount;
    printers[currPrinterIndex].options = newOptions;
    // saving new default values
    _cupsSetDests(prnCount, printers);
}
QRect QCUPSSupport::paperRect(const char *choice) const
{
    if (!currPPD)
        return QRect();
    for (int i = 0; i &lt; currPPD-&gt;num_sizes; ++i) {
        if (qstrcmp(currPPD-&gt;sizes[i].name, choice) == 0)
            return QRect(0, 0, qRound(currPPD-&gt;sizes[i].width), qRound(currPPD-&gt;sizes[i].length));
    }
    return QRect();
}
QRect QCUPSSupport::pageRect(const char *choice) const
{
    if (!currPPD)
        return QRect();
    for (int i = 0; i &lt; currPPD-&gt;num_sizes; ++i) {
        if (qstrcmp(currPPD-&gt;sizes[i].name, choice) == 0)
            return QRect(qRound(currPPD-&gt;sizes[i].left),
                         qRound(currPPD-&gt;sizes[i].length - currPPD-&gt;sizes[i].top),
                         qRound(currPPD-&gt;sizes[i].right - currPPD-&gt;sizes[i].left),
                         qRound(currPPD-&gt;sizes[i].top - currPPD-&gt;sizes[i].bottom));
    }
    return QRect();
}
QStringList QCUPSSupport::options() const
{
    QStringList list;
    collectMarkedOptions(list);
    return list;
}
bool QCUPSSupport::printerHasPPD(const char *printerName)
{
    if (!isAvailable())
        return false;
    const char *ppdFile = _cupsGetPPD(printerName);
    if (ppdFile)
        unlink(ppdFile);
    return (ppdFile != 0);
}
QString QCUPSSupport::unicodeString(const char *s)
{
#ifndef QT_NO_TEXTCODEC
    return codec-&gt;toUnicode(s);
#else
    return QLatin1String(s);
#endif
}
void QCUPSSupport::collectMarkedOptions(QStringList&amp; list, const ppd_group_t* group) const
{
    if (group == 0) {
        if (!currPPD)
            return;
        for (int i = 0; i &lt; currPPD-&gt;num_groups; ++i) {
            collectMarkedOptions(list, &amp;currPPD-&gt;groups[i]);
            collectMarkedOptionsHelper(list, &amp;currPPD-&gt;groups[i]);
        }
    } else {
        for (int i = 0; i &lt; group-&gt;num_subgroups; ++i)
            collectMarkedOptionsHelper(list, &amp;group-&gt;subgroups[i]);
    }
}
void QCUPSSupport::collectMarkedOptionsHelper(QStringList&amp; list, const ppd_group_t* group) const
{
    for (int i = 0; i &lt; group-&gt;num_options; ++i) {
        for (int j = 0; j &lt; group-&gt;options[i].num_choices; ++j) {
            if (group-&gt;options[i].choices[j].marked == 1 &amp;&amp; qstrcmp(group-&gt;options[i].choices[j].choice, group-&gt;options[i].defchoice) != 0)
                list &lt;&lt; QString::fromLocal8Bit(group-&gt;options[i].keyword) &lt;&lt; QString::fromLocal8Bit(group-&gt;options[i].choices[j].choice);
        }
    }
}
QPair&lt;int, QString&gt; QCUPSSupport::tempFd()
{
    char filename[512];
    int fd = _cupsTempFd(filename, 512);
    return QPair&lt;int, QString&gt;(fd, QString::fromLocal8Bit(filename));
}
// Prints the given file and returns a job id.
int QCUPSSupport::printFile(const char * printerName, const char * filename, const char * title,
                            int num_options, cups_option_t * options)
{
    return _cupsPrintFile(printerName, filename, title, num_options, options);
}
QT_END_NAMESPACE
#endif // QT_NO_CUPS</code></pre><p>总代码量大概也就600行，简单的来讲，Qt通过函数resolveCups()把cups的库函数封装了起来。别说一个博士生，估计一个刚上班的本科生看这点代码去适配Linux下的驱动小半天也就搞完了，更何况Qt都已经封装好了给大家使用了。</p>
<p>下边的代码是cups所有的库函数。</p>
<pre><code>typedef int (*CupsGetDests)(cups_dest_t **dests);
typedef void (*CupsFreeDests)(int num_dests, cups_dest_t *dests);
typedef const char* (*CupsGetPPD)(const char *printer);
typedef int (*CupsMarkOptions)(ppd_file_t *ppd, int num_options, cups_option_t *options);
typedef ppd_file_t* (*PPDOpenFile)(const char *filename);
typedef void (*PPDMarkDefaults)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*PPDClose)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*CupsFreeOptions)(int num_options, cups_option_t *options);
typedef void (*CupsSetDests)(int num_dests, cups_dest_t *dests);
typedef cups_lang_t* (*CupsLangGet)(const char *language);
typedef const char* (*CupsLangEncoding)(cups_lang_t *language);
typedef int (*CupsAddOption)(const char *name, const char *value, int num_options, cups_option_t **options);
typedef int (*CupsTempFd)(char *name, int len);
typedef int (*CupsPrintFile)(const char * name, const char * filename, const char * title, int num_options, cups_option_t * options);
static bool cupsLoaded = false;
static int qt_cups_num_printers = 0;
static CupsGetDests _cupsGetDests = 0;
static CupsFreeDests _cupsFreeDests = 0;
static CupsGetPPD _cupsGetPPD = 0;
static PPDOpenFile _ppdOpenFile = 0;
static PPDMarkDefaults _ppdMarkDefaults = 0;
static PPDClose _ppdClose = 0;
static CupsMarkOptions _cupsMarkOptions = 0;
static PPDMarkOption _ppdMarkOption = 0;
static CupsFreeOptions _cupsFreeOptions = 0;
static CupsSetDests _cupsSetDests = 0;
static CupsLangGet _cupsLangGet = 0;
static CupsLangEncoding _cupsLangEncoding = 0;
static CupsAddOption _cupsAddOption = 0;
static CupsTempFd _cupsTempFd = 0;
static CupsPrintFile _cupsPrintFile = 0;</code></pre><p>Qt的QPrinter打印对话框中的属性设置实际上就是调用的QCUPSSupport来设置的属性，对于程序员来讲，只需要关心QCUPSSupport外边暴露的接口就可以了。</p>
<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><p>实际上QCUPSSupport在使用中还是有两个比较严重的问题，但是都不是Qt的锅，基本上都是CUPS的问题</p>
<h2 id="QCUPSSupport初始化过慢"><a href="#QCUPSSupport初始化过慢" class="headerlink" title="QCUPSSupport初始化过慢"></a>QCUPSSupport初始化过慢</h2><p>QCUPSSupport初始化过慢，慢到了解析ppd驱动文件上。相应的QPrinter的构造函数也比较慢，所以尽量要申请一个QPrinter的变量来控制打印机属性，或者少用。当然这是代码设计的问题了。</p>
<h2 id="ppdMarkOption"><a href="#ppdMarkOption" class="headerlink" title="_ppdMarkOption"></a>_ppdMarkOption</h2><p>_ppdMarkOption 这个函数是设置打印机属性的。成功返回0，失败返回非0。</p>
<p>ppd驱动文件中有很多打印机的属性设置。</p>
<p>有的打印机某几个选项是冲突的，比如有的打印机可以设置A5纸张，但是不能同时设置双面打印。如果同时设置，实际上是设置失效的。比如，这时候，你先设置好了纸张大小A5，这时候再去设置打印机属性双面长边打印。这时候_ppdMarkOption是返回非0。（也就是这个设置失败了）。但是，敲重点，但是，即使设置错误，双面打印的属性依旧设置到了该打印机中，这时候再去打印，实际上是不会双面打印出来的。</p>
<p>上Github上看了看 CUPS中 _ppdMarkOption的实现源码，发现这个函数设计就是这样的,即使设置失败也不会设置回去原来的值。这样只能由我们调用者去兼容这个恶心的函数接口了。</p>
<h1 id="至于为啥没有上Qt5的源码"><a href="#至于为啥没有上Qt5的源码" class="headerlink" title="至于为啥没有上Qt5的源码"></a>至于为啥没有上Qt5的源码</h1><p>Qt5的工程结构已经变了cups的代码一部分呢已经放到qpainter里了。原理没变。</p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: QPrinter
op=>operation: QCUPSSupport
op1=>operation: CUPS
e=>end: Linux Core

st->op->op1->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
</search>
