<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Qt主界面卡死的解决方案-一些具体实现方式</title>
    <url>/2020/05/28/qt-zhu-jie-mian-qia-si-de-jie-jue-fang-an-yi-xie-ju-ti-shi-xian-fang-shi/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们在写UI文件的时候，有很多情况下，是需要界面来处理业务中某些耗时的操作，这时候如果不处理好界面相关的逻辑的话，主界面就会卡死，这时候就需要我们上多线程了</p>
<h2 id="逻辑1"><a href="#逻辑1" class="headerlink" title="逻辑1"></a>逻辑1</h2><p>首先上业务上一个很简单的栗子</p>
<p>比如我们的代码中有这么一个耗时的操作</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// 第一种耗时的操作</span>
    <span class="token keyword">auto</span> fWhile1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>把这个代码绑定到一个按钮事件上</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fWhile1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>然后点击。发现界面卡死了，很正常，必须得等到这段代码耗时完成之后才能继续操作界面，这段代码是太不友好了，不清真，所以我们要改一下。</p>
<hr>
<h2 id="逻辑2"><a href="#逻辑2" class="headerlink" title="逻辑2"></a>逻辑2</h2><p>如何改动，可以看下这个函数</p>
<pre class=" language-cpp"><code class="language-cpp">QCoreApplication<span class="token operator">::</span>processEvents</code></pre>
<p>来一起看下官网介绍</p>
<blockquote>
<p>Processes all pending events for the calling thread according to the specified flags until there are no more events to process.<br>You can call this function occasionally when your program is busy performing a long operation (e.g. copying a file).<br>In the event that you are running a local loop which calls this function continuously, without an event loop, the DeferredDelete events will not be processed. This can affect the behaviour of widgets, e.g. QToolTip, that rely on DeferredDelete events to function properly. An alternative would be to call sendPostedEvents() from within that local loop.<br>Calling this function processes events only for the calling thread.<br>Note: This function is thread-safe.</p>
</blockquote>
<ul>
<li>You can call this function occasionally when your program is busy performing a long operation (e.g. copying a file).</li>
<li>当程序忙于执行长时间操作（例如复制文件）时，您可以偶尔调用此功能。</li>
</ul>
<p>我们就暂时就这个（滑稽。<br>接下来可以把代码搞成这种了。</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">auto</span> fWhile2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            QApplication<span class="token operator">::</span><span class="token function">processEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fWhile2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这种代码在配置不好的机器上实际上还是有点小问题，比如我的小破本子。还是会有点卡的。我觉得用户一般是可以接受这种情况的。</p>
<hr>
<h2 id="逻辑3"><a href="#逻辑3" class="headerlink" title="逻辑3"></a>逻辑3</h2><p>实际上这个逻辑还有一个问题，就是如果我的业务代码不是循环该怎么办呢，这时候我们可以用新的类接口</p>
<pre class=" language-cpp"><code class="language-cpp">QtConcurrent<span class="token operator">::</span>run</code></pre>
<p>这个类。这个类是可以将一个函数放到新的线程里来执行。再加上</p>
<pre class=" language-cpp"><code class="language-cpp">QFuture<span class="token operator">&lt;</span>T<span class="token operator">></span></code></pre>
<p>这个类，可以控制这个新的线程函数开始，控制，结束。<br>具体可以查看官方文档，我这里就上个简单的栗子</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//耗时的操作</span>
<span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">function_needmoretime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// three</span>
    <span class="token keyword">auto</span> fWhile3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        QFuture<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> future <span class="token operator">=</span> QtConcurrent<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span>function_needmoretime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            QApplication<span class="token operator">::</span><span class="token function">processEvents</span><span class="token punctuation">(</span>QEventLoop<span class="token operator">::</span>AllEvents<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fWhile3<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre>
<p>QFuture + QtConcurrent这个框架非常强大，可以将线程同步异步状态抽象出来，让程序员不用太关心这些。这只是一个最简单的栗子。我的小破本子来运行这个是一点都不卡的。界面依旧如丝滑般流畅。</p>
<hr>
<h2 id="逻辑4-线程"><a href="#逻辑4-线程" class="headerlink" title="逻辑4-线程"></a>逻辑4-线程</h2><p>线程基础那种废话我就不多说了。道理大家都懂，我直接上wiki。</p>
<blockquote>
<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br>一个进程可以有很多线程，每条线程并行执行不同的任务。<br>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。 </p>
</blockquote>
<p>线程的创建有两种方式，第一种是继承QThread的方式，然后重写run，但是这种方式官方已经不推荐了。官方不推荐的我们就不要这样写了，我们这里讨论的是第二种方式。</p>
<p>继承QObject ，move到新的线程中。</p>
<h3 id="重写-QObject"><a href="#重写-QObject" class="headerlink" title="重写 QObject"></a>重写 QObject</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 头文件</span>
<span class="token keyword">class</span> <span class="token class-name">workThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">workThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">workThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//cpp</span>
workThread<span class="token operator">::</span><span class="token function">workThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QObject</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
workThread<span class="token operator">::</span><span class="token operator">~</span><span class="token function">workThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> workThread<span class="token operator">::</span><span class="token function">start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    emit <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> workThread<span class="token operator">::</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    emit <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>使用方法</p>
<pre class=" language-cpp"><code class="language-cpp">    QThread<span class="token operator">*</span> m_workerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    workThread<span class="token operator">*</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">workThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token operator">-</span><span class="token operator">></span><span class="token function">moveToThread</span><span class="token punctuation">(</span>m_workerThread<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>started<span class="token punctuation">,</span> worker<span class="token punctuation">,</span> <span class="token operator">&amp;</span>workThread<span class="token operator">::</span>start1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>worker<span class="token punctuation">,</span> <span class="token operator">&amp;</span>workThread<span class="token operator">::</span>workFinished<span class="token punctuation">,</span> m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>finished<span class="token punctuation">,</span> m_workerThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>deleteLater<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//也可以退出释放资源</span>
<span class="token comment" spellcheck="true">//    connect(qApp, &amp;QApplication::aboutToQuit, worker, &amp;QObject::deleteLater);</span>
<span class="token comment" spellcheck="true">//    connect(worker, &amp;QObject::destroyed, m_workerThread, &amp;QThread::quit);</span>
<span class="token comment" spellcheck="true">//    connect(m_workerThread, &amp;QThread::finished, m_workerThread, &amp;QThread::deleteLater);</span></code></pre>
<p>总结下这样的操作界面是一点都不卡的，因为延迟的操作我们放到新的线程中了。<br>如果需要传递数据的话，可以将数据通过信号槽的方式传递。</p>
<ul>
<li>之所以官方不推荐重写QThread也是因为无法使用信号槽</li>
<li>想继承QThread的话也可以，这个继承QThread的类也需要moveToThread，这种做法不清真，所以不希望大家用。</li>
</ul>
<hr>
<h2 id="逻辑5-线程-定时器"><a href="#逻辑5-线程-定时器" class="headerlink" title="逻辑5 线程 + 定时器"></a>逻辑5 线程 + 定时器</h2><p>实际上，就是逻辑4的进阶版本，再加个定时器，每隔两秒输出当前时间</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">TimerThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">TimerThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">TimerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> timerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
TimerThread<span class="token operator">::</span><span class="token function">TimerThread</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">QObject</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
TimerThread<span class="token operator">::</span><span class="token operator">~</span><span class="token function">TimerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> TimerThread<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    emit <span class="token function">workStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QTimer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTimer<span class="token operator">::</span>timeout<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>TimerThread<span class="token operator">::</span>doWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> TimerThread<span class="token operator">::</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    timerCount <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timerCount <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>
        emit <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>QTime<span class="token operator">::</span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>业务代码在这里</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">auto</span> fTimerThreadStart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        fiveThread<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>threadButton2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> fTimerThreadStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>started<span class="token punctuation">,</span> timerObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TimerThread<span class="token operator">::</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>timerObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TimerThread<span class="token operator">::</span>workFinished<span class="token punctuation">,</span> fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>finished<span class="token punctuation">,</span> fiveThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QThread<span class="token operator">::</span>deleteLater<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>界面也是灰常丝滑般流畅的。具体的业务逻辑需求可以再想。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt基础教程</title>
    <url>/2020/05/30/qt-ji-chu-jiao-cheng/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>磕磕绊绊，自己也学Qt很久了。本意想弄个视频教程来教大家如何入门Qt，然后自己还是懒癌犯了，我还是喜欢讲解Qt的源码。</p>
<p>目前Qt的基础教程还是很多的，但是质量堪忧。刚入门时我看的时豆子君的学习之路，然后还是学到了不少的东西，也慢慢的对Qt有了自己的看法。回头看豆子君的教程还是有一些可以补充的。</p>
<p>这次搞Qt的基础教程，我准备把我认为该补充的文章结合豆子大佬的教程搞一份新的教程出来。给豆子君发邮件也已经得到了他的允许。<a href="https://www.cryfeifei.cn/532.html" target="_blank" rel="noopener" title="往来邮件">往来邮件</a></p>
<p>还有二三里的教程-Qt一二三，我看已经停更了，我也准备把他的停更的文章以及模块补充一些。（看来高级部分已经收费了</p>
<p>目前基本就是这样的想法。准备整理一份新的Qt基础教程。</p>
<p>我会一点点整理出来的。</p>
<h1 id="Qt-基本概念"><a href="#Qt-基本概念" class="headerlink" title="Qt 基本概念"></a>Qt 基本概念</h1><ul>
<li><a href="https://www.cryfeifei.cn/539.html" target="_blank" rel="noopener" title="Qt的基本概念-WIKI">Qt的基本概念-WIKI</a></li>
</ul>
<p>引读</p>
<blockquote>
<p><a href="https://www.cryfeifei.top/2020/06/28/qt-jian-jie/" target="_blank" rel="noopener" title="Qt简介">Qt简介</a><br><a href="https://www.cryfeifei.top/2020/06/28/guan-yu-qt-de-li-shi/" target="_blank" rel="noopener" title="关于Qt的历史">关于Qt的历史</a><br><a href="https://cryfeifei.top/2020/06/28/mfc-wtl-wpf-wxwidgets-qt-gtk-ge-you-shi-me-te-dian/" title="姚冬对Qt的看法">姚冬对Qt的看法</a></p>
</blockquote>
<h1 id="开发环境的搭建"><a href="#开发环境的搭建" class="headerlink" title="开发环境的搭建"></a>开发环境的搭建</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul>
<li><a href="https://www.cryfeifei.top/2020/06/28/qt-compile-windows/" target="_blank" rel="noopener" title="Windows下VS2019编译Qt5.13.2源码">Windows下VS2019编译Qt5.13.2源码</a></li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="https://www.cryfeifei.top/2020/06/29/qt-linux-lazy/" target="_blank" rel="noopener" title="Linux搭建Qt5.14开发环境">Linux搭建Qt5.14开发环境-傻瓜式</a>;</li>
<li><a href="https://www.cryfeifei.top/2020/06/28/qt-compile-linux/" target="_blank" rel="noopener" title="Linux搭建Qt5.14开发环境-源码编译">Linux搭建Qt5.14开发环境-源码编译</a></li>
</ul>
<h1 id="Qt-比较重要的概念"><a href="#Qt-比较重要的概念" class="headerlink" title="Qt 比较重要的概念"></a>Qt 比较重要的概念</h1><ul>
<li><p><a href="https://www.cryfeifei.top/2020/06/27/shen-ru-liao-jie-qt-xiao-xi-xun-huan-ji-xian-cheng-xiang-guan-xing/" target="_blank" rel="noopener" title="深入了解QT消息循环及线程相关性_Windows">深入了解QT消息循环及线程相关性_Windows</a></p>
</li>
<li><p><a href="https://www.cryfeifei.top/2020/06/27/qt-yuan-dui-xiang-meta-object-xi-tong/" target="_blank" rel="noopener" title="Qt元对象系统">Qt元对象系统</a></p>
</li>
</ul>
<h1 id="Qt-容器类"><a href="#Qt-容器类" class="headerlink" title="Qt 容器类"></a>Qt 容器类</h1><h1 id="Qt-MVC"><a href="#Qt-MVC" class="headerlink" title="Qt MVC"></a>Qt MVC</h1><h1 id="Qt-Widget"><a href="#Qt-Widget" class="headerlink" title="Qt Widget"></a>Qt Widget</h1><h1 id="Qt-Core"><a href="#Qt-Core" class="headerlink" title="Qt Core"></a>Qt Core</h1><h1 id="Qt多线程"><a href="#Qt多线程" class="headerlink" title="Qt多线程"></a>Qt多线程</h1><h1 id="Qt网络"><a href="#Qt网络" class="headerlink" title="Qt网络"></a>Qt网络</h1><h1 id="Qt打印"><a href="#Qt打印" class="headerlink" title="Qt打印"></a>Qt打印</h1>]]></content>
  </entry>
  <entry>
    <title>Qt线程基础</title>
    <url>/2020/06/14/qt-xian-cheng-ji-chu/</url>
    <content><![CDATA[<h1 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h1><h2 id="WIKI："><a href="#WIKI：" class="headerlink" title="WIKI："></a>WIKI：</h2><blockquote>
<p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程，如Win32线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由内核与用户进程，如Windows 7的线程，进行混合调度。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br>一个进程可以有很多线程，每条线程并行执行不同的任务。<br>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p>
</blockquote>
<h1 id="Qt中的线程"><a href="#Qt中的线程" class="headerlink" title="Qt中的线程"></a>Qt中的线程</h1><p>Qt中的线程类是QThread。</p>
<p>一个QThread对象管理程序中的一个控制线程。QThreads开始在run()中执行。默认情况下，run()通过调用exec()启动事件循环，并在线程内部运行Qt事件循环。</p>
<p>跟C++标准库中的thread不一样，Qt中的QThread是默认自带一个事件循环的。也就是你可以通过信号槽来进行线程之间的通信（这样就不需要写各种回调函数了）。这大大的简便了线程通信的复杂逻辑。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>先上一个简单的例子，点击按钮，开启一个新的线程，线程中输出从1-1000,结束之后发送信号workfinished</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">WorkerThread</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">WorkerThread</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">QThread</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        emit <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">workFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

MainWindow<span class="token operator">::</span><span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>MainWindow<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ui<span class="token operator">-</span><span class="token operator">></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    WorkerThread<span class="token operator">*</span> workThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">WorkerThread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>pushButton<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        workThread<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>workThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>WorkerThread<span class="token operator">::</span>workFinished<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"workfinished"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这个例子很简单，点击按钮，线程启动。结束之后发送一个信号出来。</p>
<p>官方已经不推荐这种写法，这种写法只有run()函数才会在新的线程中。自己线程发的信号槽如果不注意的话，线程的槽函数也不会响应的。</p>
<p>下面介绍新的写法，重写QObject，move到新的线程中。</p>
<p>样例代码 </p>
<p><a href="https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1" target="_blank" rel="noopener" title="https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1">https://github.com/CryFeiFei/Qt_Teach/tree/master/Qt_Teach/Thread1</a></p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt多线程</tag>
        <tag>Qt基础教程</tag>
      </tags>
  </entry>
  <entry>
    <title>poppler-data(Windows)编译</title>
    <url>/2020/06/26/poppler-data-windows-bian-yi/</url>
    <content><![CDATA[<p>以Windows平台举例</p>
<p>下载 poppler-data ，进入目录</p>
<p>下载链接</p>
<p><a href="https://poppler.freedesktop.org/" target="_blank" rel="noopener">https://poppler.freedesktop.org/</a></p>
<pre><code>cmake . -DCMAKE_INSTALL_PREFIX=E:
mingw32-make
mingw32-make install</code></pre>]]></content>
      <tags>
        <tag>poppler</tag>
        <tag>poppler-data</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt在Linux下获取当前系统用户名</title>
    <url>/2020/06/26/qt-zai-linux-xia-huo-qu-dang-qian-xi-tong-yong-hu-ming/</url>
    <content><![CDATA[<p> Qt没有直接的接口去获取到当前系统用户名，只能够间接的通过现有的接口去获取。（比如下边的例子通过获取home路径）</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Qt4 version</span>

QString <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
     QString userName <span class="token operator">=</span> QDesktopServices<span class="token operator">::</span><span class="token function">storageLocation</span><span class="token punctuation">(</span>QDesktopServices<span class="token operator">::</span>HomeLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userName <span class="token operator">=</span> userName<span class="token punctuation">.</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> userName<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>



<span class="token comment" spellcheck="true">//Qt5 version</span>
QString <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QString userPath <span class="token operator">=</span> QStandardPaths<span class="token operator">::</span><span class="token function">writableLocation</span><span class="token punctuation">(</span>QStandardPaths<span class="token operator">::</span>HomeLocation<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    QString userName <span class="token operator">=</span> userPath<span class="token punctuation">.</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> userName<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Poppler在Mac OS下编译</title>
    <url>/2020/06/26/poppler-zai-mac-os-xia-bian-yi/</url>
    <content><![CDATA[<p>#前言<br>众所周知，Poppler-qt5是跨平台的，但是目前Poppler在Mac OS下编译的资料一直没有找到。但是目前手头也没有mac的机器来试试（我可是搞Linux的！但是都是一个Unix爹啊）。目前有两个方法去编译Mac版本的poppler。现在特意总结下。毕竟我还是想把自己的阅读器搞到Mac上试试的。（这就是你想买Mac的理由？）</p>
<h2 id="MacPorts"><a href="#MacPorts" class="headerlink" title="MacPorts"></a>MacPorts</h2><p>去Poppler的官方网站发现Poppler是支持MacPorts的。MacPorts是Mac上支持的第三方的包管理器（跟Ubuntu的 apt-get很像）。可以通过这个包管理器安装。</p>
<h2 id="自己编译"><a href="#自己编译" class="headerlink" title="自己编译"></a>自己编译</h2><p>浏览了半天，发现一个老外写的文章。特意把链接放到这里。有兴趣的可以自己编译下。<br>原文<a href="http://www.freebyte.fr/?p=8" target="_blank" rel="noopener">http://www.freebyte.fr/?p=8</a></p>
<p>这是我目前找到的所有在MacOS下编译的方法了。有想过使用google跟福昕合作开源的pdfium，先给自己挖个坑吧。</p>
<p>PS:<br>最新的Qt6预览版已经有了pdf模块，就是使用的webengine里的pdf模块。<br>等出来之后就可以更新自己的阅读器了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>poppler</tag>
      </tags>
  </entry>
  <entry>
    <title>Poppler在Windows下编译</title>
    <url>/2020/06/26/poppler-zai-windows-xia-bian-yi/</url>
    <content><![CDATA[<h2 id="windows库（已经编译好了。）"><a href="#windows库（已经编译好了。）" class="headerlink" title="windows库（已经编译好了。）"></a>windows库（已经编译好了。）</h2><p>Poppler在Windows下编译还是相当麻烦的，实际上很多库在windows下编译都会有问题。但是有老哥在Windows下使用GCC编译好了一个库，这里是下载链接，这个也是我在Windows上一直使用的一个库。<br><a href="https://sourceforge.net/projects/poppler-win32/" target="_blank" rel="noopener">https://sourceforge.net/projects/poppler-win32/</a></p>
<h2 id="Poppler-data"><a href="#Poppler-data" class="headerlink" title="Poppler-data"></a>Poppler-data</h2><p>有个老哥在github上给我提出了个issue，发现我的阅读器打开京东的pdf的发票有的字体显示不全，（他要基于我的代码做个打印发票的系统，改就改吧=，=）。他把官网的<a href="https://poppler.freedesktop.org/" target="_blank" rel="noopener">https://poppler.freedesktop.org/</a> 里边有个poppler-data编译好了，给我提了个push。然后也没有说明怎么编译。这就比较蛋疼了。经过验证发现确实是这个问题，然后我总结了下编译过程。</p>
<p>使用QtCreater自带的MinGW（里边的GCC）编译</p>
<p>下载官网界面下的poppler-data链接，进入目录，安装到E盘，然后把安装好的目录直接拷贝到阅读器中的3rdparty下，就显示正常了。</p>
<pre><code>cmake . -DCMAKE_INSTALL_PREFIX=E:
mingw32-make
mingw32-make install</code></pre>]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>poppler</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下pip3的安装，升级，卸载</title>
    <url>/2020/06/26/ubuntu16-04-xia-pip3-de-an-zhuang-sheng-ji-xie-zai/</url>
    <content><![CDATA[<p>最近开发机换了Ubuntu16.04，来记录下。</p>
<p>Python2与Python3是可以共存的，Ubuntu默认装好了。<br>命令python就是Python2<br>命令python3一般是Python3.5</p>
<p>以下命令适用于Python2，把pip3改成对应的pip就好</p>
<p>安装pip3</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install python3-pip</code></pre>
<p>升级pip3</p>
<pre class=" language-shell"><code class="language-shell">sudo pip3 install --upgrade pip</code></pre>
<p>卸载pip3</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get remove python3-pip</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>使用QtCteator编译QtCreator</title>
    <url>/2020/06/26/shi-yong-qtcteator-bian-yi-qtcreator/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原谅我标题党了，本文标题应该是使用Clang依赖Qt编译QtCreator。</p>
<p>目前在Linux上做开发，一直使用的IDE就是QtCreator。 实际上一直有想做一个编辑器的想法（因为我觉得QtCreator有点笨重，而我只是想要一个单纯的编辑器的功能。目前开源的优秀的使用Qt制作的编辑器好象是没有。我也一直喜欢使用vim，而且QtCreator也有fakevim的插件。QtCreator我也用着比较舒服，还是Qt写的，我也比较熟悉Qt的代码，所以想要魔改这个项目了。而且从官方fork的话，以后有啥bug可以直接cherry-pick过来，逃）。趁着这个机会，阅读下这个IDE的架构是如何设计的。</p>
<p>我个人一直很喜欢QtCreator这个IDE，当然没有vs强大（宇宙第一IDE可不是吹的），是不可多得的优秀的IDE。配置环境什么的也比较简单方便。目前我的开发机器环境为Ubuntu16.04,就暂时以这个环境来讲吧。</p>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>如果编译QtCreator，实际上官方的wiki是有的，链接在这里 <a href="https://wiki.qt.io/Building_Qt_Creator_from_Git" target="_blank" rel="noopener">https://wiki.qt.io/Building_Qt_Creator_from_Git</a> 简单的讲，就是如下几个条件</p>
<blockquote>
<ul>
<li>Qt5.6.2及以后版本以后版本的Qt库</li>
<li>clang5.0及之后版本的编译器</li>
</ul>
</blockquote>
<h3 id="Qt编译"><a href="#Qt编译" class="headerlink" title="Qt编译"></a>Qt编译</h3><p>截止2018年10月13日。目前最新的Qt版本是Qt5.11.2。（5.12还在测试中）那就以最新的Qt版本来编译QtCreator吧。去官网下载最新版本的Qt源码<a href="http://download.qt.io/archive/qt/5.11/5.11.2/single/" target="_blank" rel="noopener">http://download.qt.io/archive/qt/5.11/5.11.2/single/</a><br>比如我就下载到了 /home/zhangpf/Qt/Qt5.11下，解压到当前文件夹，然后新建个新的目录用于放编译好的Qt。</p>
<pre class=" language-shell"><code class="language-shell">mkdir qt5.11.2
cd /home/zhangpf/Qt/Qt5.11/qt-everywhere-src-5.11.2</code></pre>
<p>准备编译Qt。（在这里我一开始下载的Qt5.10的版本，因为我还怕5.11不稳定，但是发现编译的时候QtScript模块编译不过，QtCreator工程又依赖QtScript，google了下发现不只是我有这个问题，但是还未解决，已经报了QTBUG。所以我才又下载的Qt5.11的版本来编译的。）</p>
<p>然后继续</p>
<pre class=" language-shell"><code class="language-shell">./configure -prefix /home/zhangpf/Qt/Qt5.11/qt5.11.2 -debug -opensource -confirm-license
cd /home/zhangpf/Qt/Qt5.11/qt5.11.2
make && make install</code></pre>
<p>比如我的电脑cpu是i7-7700,4核8线程，我就可以make -j8。还是看自己电脑的性能了。<br>恩，这时候Qt5.11.2的库就准备好了。</p>
<h2 id="clang准备。"><a href="#clang准备。" class="headerlink" title="clang准备。"></a>clang准备。</h2><p>下载链接<a href="http://releases.llvm.org/download.html" target="_blank" rel="noopener">http://releases.llvm.org/download.html</a> 下载clang clang++ 5.0以后预编译好的版本，比如我就是下载clang6.0的Ubuntu16.04的版本。下载下来可以直接用。放到了/opt 下，然后我又做了个软链到/usr/local/bin/下。</p>
<h2 id="QtCreator准备"><a href="#QtCreator准备" class="headerlink" title="QtCreator准备"></a>QtCreator准备</h2><p>官方已经讲得很明确了，直接</p>
<pre><code>git clone --recursive https://code.qt.io/qt-creator/qt-creator.git</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="配置QtCreator"><a href="#配置QtCreator" class="headerlink" title="配置QtCreator"></a>配置QtCreator</h3><blockquote>
<ul>
<li>工具-选项-构建和运行-编译器   把刚才下载好的clang添加进去，点击应用</li>
<li>工具-选项-构建和运行-QtVersion 添加一个QtVersion 把编译好的Qt5.11.2 qmake路径加进去，点击应用</li>
<li>工具-选项-构建和运行-构建套件 添加一个构建套件取名qtcreator，编译器跟QtVersion选择成刚才添加的。点击应用</li>
</ul>
</blockquote>
<h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p>直接打开QtCreator的pro文件，构建套件选择刚才新建的qtcreator。然后直接右键pro文件，qmake-&gt;构建.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>qtcreator源码149m。编译出来的debug版本的QtCreator 1.5G。也是相当大的一个Qt工程了。从头折腾到尾，基本没发现啥大的编译问题与疑难杂症，也就只有一个Qt5.10版本QtScript编译不过的问题，还被我规避掉了。接下来就该阅读这个工程的源码，去更改我想要的结果了。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux更换difftool为meld</title>
    <url>/2020/06/26/linux-geng-huan-difftool-wei-meld/</url>
    <content><![CDATA[<h3 id="meld"><a href="#meld" class="headerlink" title="meld"></a>meld</h3><pre class=" language-shell"><code class="language-shell">#设置默认的git diff的比较工具
#配置比较工具.可以用git difftool 调用.
git config --global diff.tool meld
git config --global difftool.prompt false
</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>git</tag>
        <tag>meld</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileDialog中的tips</title>
    <url>/2020/06/26/qfiledialog-zhong-de-tips/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近看QFileDialog的实现比较多，也对比了几家操作系统厂商跟Qt的QFileDialog中的实现，也自己造了个小轮子。也学到了一些东西，特意来分享下。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>可以将类型诸如这种的格式</p>
<pre><code>WPS文字 文件(*.wps)  提取成这种 *.wps</code></pre><p>本来打算自己写正则表达式的，生怕自己写的效率比较低，就从QFileDialog的源码中扣取出来了。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//from QFileDialog</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>qt_file_dialog_filter_reg_exp <span class="token operator">=</span>
<span class="token string">"^(.*)\\(([a-zA-Z0-9_.*? +;#\\-\\[\\]@\\{\\}/!&lt;>\\$%&amp;=^~:\\|]*)\\)$"</span><span class="token punctuation">;</span>
QStringList <span class="token function">qt_clean_filter_list</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>filter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QRegExp <span class="token function">regexp</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">fromLatin1</span><span class="token punctuation">(</span>qt_file_dialog_filter_reg_exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString f <span class="token operator">=</span> filter<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">indexIn</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        f <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QString<span class="token operator">::</span>SkipEmptyParts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="QFileInfo的新奇使用方法"><a href="#QFileInfo的新奇使用方法" class="headerlink" title="QFileInfo的新奇使用方法"></a>QFileInfo的新奇使用方法</h3><p>实际上我又遇到了一个源码中关于QFileInfo一个原来没有用过的用法。</p>
<p>直接将</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token punctuation">.</span>wps </code></pre>
<p>这种字符当做QString放进了QFileInfo来获取其basename（文件名）跟 suffix（后缀），或者使用其它的函数。一般我都是传个文件路径的，没想到还能用这种方法解析字符串。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//这时候可以用QFileInfo把一些复杂的字符串的什么前缀，后缀名全都解析出来了，包括*.tar.gz这种复杂的，QFileInfo都有函数来提取</span>
QFileInfo <span class="token function">fileInfo</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"*.wps"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我本来想自己解析这个字符串的，发现QFileDialog的源码中还有这种用法，真的很神奇。</p>
<h3 id="文件管理器的吐槽"><a href="#文件管理器的吐槽" class="headerlink" title="文件管理器的吐槽"></a>文件管理器的吐槽</h3><p>最近看了看KDE的dolphin文件管理器代码的实现，还有深度的文件管理器的实现，还有一些乱七八糟第三方的，还有Qt自带的QFileDialog。就属KDE的dolphin做的最厉害，交互最好，优化的最好。</p>
<p>深度的文件管理器跟Qt自带QFileDialog遇到复杂的网络文件以及延迟都会卡死，也没有任何交互。QFileDialog我理解这个东西一开始就不是给网络文件用的，卡死我还是可以接受的，但是深度作为操作系统厂商做成这样就有点不太合适了。大概扫了下源码，也跟QFileDialog一样重写了model，model这里交互还是得好好优化下啊。这就是自己造轮子的坏处。</p>
<p>从一个开发的角度，简单的吐槽一下，反正给他们官方反馈了。因为deepin的文件管理器的bug实在太多了=。=。</p>
<p>嗯，KDE大法好！话说，一开始的设计可以从借鉴（copy）KDE的实现嘛，都这么多年了…</p>
<p>造轮子不要对自己太自信…实时上我自己造的小轮子也有这个问题=。=。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这是我前年的时候看各个厂商以及调研QFileDialog总结出来一点小结论。去年年底我又把这部分捡起来了。现在已经优化到加载千万级别的数据，界面不会卡住的地步了。有时间把这部分东西写出来</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>QFileDialog</tag>
      </tags>
  </entry>
  <entry>
    <title>error: &#39;this&#39; cannot be implicitly captured in this context</title>
    <url>/2020/06/26/error-this-cannot-be-implicitly-captured-in-this-context/</url>
    <content><![CDATA[<p>讲真，使用Qt反射 + 元对象 + C++11 的特性，写c++代码简直不要太爽，代码优雅的不是一丁半点。</p>
<p>今天使用lambda表达式的时候，发现报了个编译错误</p>
<pre class=" language-cpp"><code class="language-cpp">error<span class="token operator">:</span> <span class="token string">'this'</span> cannot be implicitly captured in <span class="token keyword">this</span> context</code></pre>
<p>纠其原因，在于我在lambda表达式中使用了某个成员变量，但是没有捕获this</p>
<p>把代码</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>加上this就可以了</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt源码之魔改QFileDialog之路-2 移动介质的处理</title>
    <url>/2020/06/26/qt-yuan-ma-zhi-mo-gai-qfiledialog-zhi-lu-2-yi-dong-jie-zhi-de-chu-li/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>移动介质，一般就是指当前Linux系统下的 <strong>U 盘 / 挂载硬盘</strong>。 这两个移动介质都是挂载在<strong>/media/yourusername</strong>下来做的处理。（fhs2.4）（实际上fhs3.0的标准已经改到/run/media/username下了）</p>
<h2 id="前期调研"><a href="#前期调研" class="headerlink" title="前期调研"></a>前期调研</h2><p>从网上找到关于u盘检测的插拔有两种方案（这两种方案硬盘挂载是检测不到的）：</p>
<h3 id="U盘插拔检测"><a href="#U盘插拔检测" class="headerlink" title="U盘插拔检测"></a>U盘插拔检测</h3><h4 id="QDbus的方案"><a href="#QDbus的方案" class="headerlink" title="QDbus的方案"></a>QDbus的方案</h4><blockquote>
<ul>
<li>使用QDbus来检测U盘的插拔的处理，原文链接 <a href="http://www.qtcn.org/bbs/read-htm-tid-14535.html" target="_blank" rel="noopener">http://www.qtcn.org/bbs/read-htm-tid-14535.html</a></li>
</ul>
</blockquote>
<p>防止网址被吞这里把代码上上</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//在pro文件中应该加入</span>
QT <span class="token operator">+</span><span class="token operator">=</span>dbus

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QtDBus/QDBusConnection></span></span>
<span class="token comment" spellcheck="true">//以下为检测设备的插入</span>
QDBusConnection<span class="token operator">::</span><span class="token function">systemBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span> <span class="token string">"org.freedesktop.Hal"</span><span class="token punctuation">,</span>
                        <span class="token string">"/org/freedesktop/Hal/Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"org.freedesktop.Hal.Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"DeviceAdded"</span><span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">,</span>
                        <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">slotDeviceAdded</span><span class="token punctuation">(</span>QString <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//以下为检查设备的拨出</span>
QDBusConnection<span class="token operator">::</span><span class="token function">systemBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span> <span class="token string">"org.freedesktop.Hal"</span><span class="token punctuation">,</span>
                        <span class="token string">"/org/freedesktop/Hal/Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"org.freedesktop.Hal.Manager"</span><span class="token punctuation">,</span>
                        <span class="token string">"DeviceRemoved"</span><span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">,</span>
                        <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">slotDeviceRemoved</span><span class="token punctuation">(</span>QString <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//在slotDeviceAdded(QString udi)函数中，要使用到</span>

QDBusInterface <span class="token function">device</span><span class="token punctuation">(</span><span class="token string">"org.freedesktop.Hal"</span><span class="token punctuation">,</span> udi<span class="token punctuation">,</span> <span class="token string">"org.freedesktop.Hal.Device"</span> <span class="token punctuation">,</span> QDBusConnection<span class="token operator">::</span><span class="token function">systemBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//通过HAL可以查询到设备为volume的设备，然后通过判断是否为/dev/sd*的设备，就可以判断出是否为U盘，然后调用mount就可以了。</span>
<span class="token comment" spellcheck="true">//这时记录下U盘的UDI，在检测到设备拨出时，再查询一下U盘的UDI是否还在，就知道U盘是否被拨出了。</span></code></pre>
<h4 id="QSocketNotifier来实现"><a href="#QSocketNotifier来实现" class="headerlink" title="QSocketNotifier来实现"></a>QSocketNotifier来实现</h4><p>这个是某个老哥使用socket来实现文件监控的，实际上这个方案完全可以使用QFileSystemWatcher来检测<strong>/proc/mounts</strong>（实际上Qt源码QSystemWatcher，里边的监控文件的实现就是使用的QSocketNotifier=。=，既然这个老哥自己想出来了，还是把他的链接贴上去吧，<a href="https://blog.csdn.net/penghuilater/article/details/53410646" target="_blank" rel="noopener">https://blog.csdn.net/penghuilater/article/details/53410646</a> 接下来我会讲QFileSystemWatcher的实现原理的），代码我还是照样贴上，防止网页被吞。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> VOLUMEMONITOR_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> VOLUMEMONITOR_H</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QObject></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSet></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSocketNotifier></span></span>
<span class="token keyword">class</span> <span class="token class-name">VolumeMonitor</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">VolumeMonitor</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">VolumeMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">deviceAdded</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> addDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">deviceRemoved</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> removeDe<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> slots<span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onFileChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_fileKde <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    QSocketNotifier<span class="token operator">*</span> m_socketNotifier<span class="token punctuation">;</span>
    QSet<span class="token operator">&lt;</span>QString<span class="token operator">></span> m_fileContentSet<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// VOLUMEMONITOR_H </span>


<span class="token comment" spellcheck="true">//-------------------------------------------------------</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"volumemonitor.h"</span></span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSet></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTextStream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> mountFile<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/proc/mounts"</span><span class="token punctuation">;</span>
    QSet <span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">getMountFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QFile <span class="token function">file</span><span class="token punctuation">(</span>mountFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QSet <span class="token operator">&lt;</span>QString<span class="token operator">></span> fileContentSet<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                QTextStream <span class="token function">textStream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                QString fileContent <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                QStringList items <span class="token operator">=</span> fileContent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">foreach</span> <span class="token punctuation">(</span>QString item<span class="token punctuation">,</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        fileContentSet <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> fileContentSet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    QString <span class="token function">getMountPoint</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> QStringList items <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

VolumeMonitor<span class="token operator">::</span><span class="token function">VolumeMonitor</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QObject</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> VolumeMonitor<span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//get the set of mounted device's info;</span>
    m_fileContentSet <span class="token operator">=</span> <span class="token function">getMountFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_fileKde <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>mountFile<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_fileKde <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qWarning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"open /proc/mounts failed!"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    m_socketNotifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSocketNotifier</span><span class="token punctuation">(</span>m_fileKde<span class="token punctuation">,</span>
                                           QSocketNotifier<span class="token operator">::</span>Write<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">connect</span><span class="token punctuation">(</span>m_socketNotifier<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QSocketNotifier<span class="token operator">::</span>activated<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>VolumeMonitor<span class="token operator">::</span>onFileChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> VolumeMonitor<span class="token operator">::</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_fileKde<span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m_socketNotifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> VolumeMonitor<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">close</span><span class="token punctuation">(</span>m_fileKde<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_fileKde <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> m_socketNotifier<span class="token punctuation">;</span>
        m_socketNotifier <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> VolumeMonitor<span class="token operator">::</span><span class="token function">onFileChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    QSet <span class="token operator">&lt;</span>QString<span class="token operator">></span> changedItemSet <span class="token operator">=</span> <span class="token function">getMountFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> item<span class="token operator">:</span> changedItemSet <span class="token operator">-</span> m_fileContentSet<span class="token punctuation">)</span>
        emit <span class="token function">deviceAdded</span><span class="token punctuation">(</span><span class="token function">getMountPoint</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> item<span class="token operator">:</span> m_fileContentSet <span class="token operator">-</span> changedItemSet<span class="token punctuation">)</span>
        emit <span class="token function">deviceRemoved</span><span class="token punctuation">(</span><span class="token function">getMountPoint</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    m_fileContentSet <span class="token operator">=</span> changedItemSet<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

VolumeMonitor<span class="token operator">::</span><span class="token operator">~</span><span class="token function">VolumeMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="QStorageInfo"><a href="#QStorageInfo" class="headerlink" title="QStorageInfo"></a>QStorageInfo</h4><p>实际上Qt 5.4之后在QtCore中引入了一个新的类叫做QStorageInfo，这个类可以获取到相关的磁盘信息。这个并不是关键的，因为本次我也没有使用这个类，就是在这里简单的提一下。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>实际上这一篇的关键技术是QFileSystemWatcher，把<strong>/media/yourusername</strong>添加到监视目录中，然后就可以通过QFileInfo and QDir来获取到相关的信息，其中QFileDialog中的QFileSystemModel也可以跟随实时更新。这样依旧可以依旧获取到移动介质的信息以及插拔信息。这个才是最终的解决方案。接下来要讲一下QFileSystemWatcher的源码。可能你看到的源码版本与我的版本不同。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt源码之魔改QFileDialog之路-1</title>
    <url>/2020/06/26/qt-yuan-ma-zhi-mo-gai-qfiledialog-zhi-lu-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前着急发Linux社区版本的WPS，所以这里都没有好好的去更改打开本地文件对话框那里的逻辑。由于这里的代码是从其它平台迁移过来的，所以这里的逻辑就没有动。对于用户交互来讲可以说是非常恶心心了。因为我们是做产品的，产品驱动技术。这次呢，前前后后大概花了两周的时间终于把这个产品稳定下来了。里边碰到了一些技术要点与难点。这里简单的总结下。</p>
<p>图1. 原来没有</p>
<h2 id="自己造轮子"><a href="#自己造轮子" class="headerlink" title="自己造轮子"></a>自己造轮子</h2><p>实际上这是我的第一个方案，一开始想得太简单，用了个递归的方式去读取QFileInfo的信息，发现栈爆了，然后用QFileSystQFileemModel来读取当前文件夹的信息。总结下就是使用QFileSystQFileemModel +QFileSystemWatcher +  QAbstractItemDelegate的方式去做，做了一个星期，完成了七八成，但是发现细节真的太多了，再给我两个星期我可能都做不完，于是放弃这个方案。突然想起来Qt还有个自带的QFileDialog。于是才开始我的第二个方案。</p>
<h2 id="使用QFileDialog类"><a href="#使用QFileDialog类" class="headerlink" title="使用QFileDialog类"></a>使用QFileDialog类</h2><p>这个方案我一开始连想都没有想，只是想尝试下看看能不能改造下，发现最终经过了一个星期的改造+适配也是把这个功能完成了。然后加到WPS中了。下边开始讲我在开发中遇到的一些技术要点。</p>
<h3 id="QFileDialog简单介绍"><a href="#QFileDialog简单介绍" class="headerlink" title="QFileDialog简单介绍"></a>QFileDialog简单介绍</h3><p>QFileDialog实现基本上是我自己实现的复杂版本，基本要点也是QFileSystemModel类来显示当前的目录信息，使用QFileInfoGatherer 线程类专门监视目录的变化。QFileInfoGatherer线程类基本实现核心也是QFileSystemWatcher，使用了 条件变量 + 锁来做同步。具体的实现还是相当多的， 大家有兴趣可以去阅读下Qt的源码。</p>
<h3 id="如何改造QFileDialog类"><a href="#如何改造QFileDialog类" class="headerlink" title="如何改造QFileDialog类"></a>如何改造QFileDialog类</h3><h4 id="改造利器"><a href="#改造利器" class="headerlink" title="改造利器"></a>改造利器</h4><p>与其说是如何改造QFileDialog类，不如说是如何改造Qt官方提供的控件，这种方式有一个缺点，就是严重依赖Qt官方源码（ps，有兴趣的可以把这个类的代码提取出来，我去fork，逃））。像WPS自己维护的Qt分支，这个方式我是可以接受的，因为源码就在我这里，哈哈。跑偏了，基本上这样改造是没有多大问题的，官方现在对于QWidget这套代码改动实际上是很少的。现在说一下改造QFileDialog的利器</p>
<ul>
<li>findChild()</li>
<li>findChildren()</li>
<li>metaObject()-&gt;className() (实际上这个基本没用到，了解下也是很好的)</li>
</ul>
<h4 id="改造原理"><a href="#改造原理" class="headerlink" title="改造原理"></a>改造原理</h4><p>todo findchild与findchildren的文章。<br>findChild&lt;QLineEdit*&gt;(“fileNameEdit”);</p>
<ul>
<li>设置QFileDialog的setOption</li>
<li>使用fildChild通过控件名 或者通过findChildren 找到 需要隐藏的左边列表，然后setVisible(false);</li>
</ul>
<p>这样最关键的问题解决了，可以把这个东西设置成无边框然后嵌入到右边的控件中。然后在对话框中左边加上几个侧边栏，然后主要问题就解决了。</p>
<h4 id="改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。"><a href="#改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。" class="headerlink" title="改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。"></a>改造细节，其它的相关细节，比如过滤器相关的属性设置QFileDialog都有相关的接口去设置（这个自己去阅读API文档去），唯一一个需要我去解决的就是保存时要将后缀名取出来，然后用到了QtFileDialog中的正则表达式，我已经提取出来了。</h4><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>以为这就完了？图样图内务。还有移动介质呢？！</p>
<h1 id="NOW"><a href="#NOW" class="headerlink" title="NOW"></a>NOW</h1><p>这是我18年的解决方案了。现在准备自己重写这个东西，感觉也没有什么难得地方。这里准备重写了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileSystemWatcher源码剖析(Linux)</title>
    <url>/2020/06/27/qfilesystemwatcher-yuan-ma-pou-xi-linux/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>QFileSystemWatcher的作用是监视本地文件夹的变化以及文件的变化。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>QFileSystemWatcher的实现类是QFileSystemWatcherPrivate。 其中QFileSystemWatcherPrivate中的关键成员变量QFileSystemWatcherEngine用于监视目录以及文件的变化，发送信号给QFileystemWatcher。其中QFileSystemWatcherEngine派生了三个类。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QThread</code></pre>
<p>其派生的子类三种类型分别为</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 这个用于监控Dir的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QDnotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine

<span class="token comment" spellcheck="true">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到</span>
<span class="token keyword">class</span> <span class="token class-name">QPollingFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine

<span class="token comment" spellcheck="true">// 这个用于检测文件类型的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QInotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine</code></pre>
<h2 id="QInotifyFileSystemWatcherEngine"><a href="#QInotifyFileSystemWatcherEngine" class="headerlink" title="QInotifyFileSystemWatcherEngine"></a>QInotifyFileSystemWatcherEngine</h2><p>QInotifyFileSystemWatcherEngine用于监视文件的变化。</p>
<p>// 太长可以忽略，这是详细实现</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//media/zhangpf/workspace1/Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/corelib/io/qfilesystemwatcher_inotify_p.h</span>


<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"qfilesystemwatcher_p.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> QT_NO_FILESYSTEMWATCHER</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;qhash.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;qmutex.h></span></span>
QT_BEGIN_NAMESPACE
<span class="token keyword">class</span> <span class="token class-name">QInotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token operator">~</span><span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> QInotifyFileSystemWatcherEngine <span class="token operator">*</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//单例模式</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> Q_SLOTS<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">readFromInotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> inotifyFd<span class="token punctuation">;</span>
    QMutex mutex<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pathToID<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> QString<span class="token operator">></span> idToPath<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
QT_END_NAMESPACE
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// QT_NO_FILESYSTEMWATCHER</span>
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// QFILESYSTEMWATCHER_INOTIFY_P_H</span>

<span class="token comment" spellcheck="true">// cpp</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/inotify.h></span></span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
QT_BEGIN_NAMESPACE
QInotifyFileSystemWatcherEngine <span class="token operator">*</span>QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> IN_CLOEXEC</span>
    fd <span class="token operator">=</span> <span class="token function">inotify_init1</span><span class="token punctuation">(</span>IN_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fd <span class="token operator">=</span> <span class="token function">inotify_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">inotifyFd</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fcntl</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">moveToThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QInotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> pathToID<span class="token punctuation">)</span>
        <span class="token function">inotify_rm_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>id <span class="token operator">:</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QSocketNotifier <span class="token function">sn</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> QSocketNotifier<span class="token operator">::</span>Read<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//通过socket来监视文件的变化，替代thread一个很好的方式</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sn<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readFromInotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isDir <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> wd <span class="token operator">=</span> <span class="token function">inotify_add_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span>
                                   QFile<span class="token operator">::</span><span class="token function">encodeName</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                   <span class="token punctuation">(</span>isDir
                                    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">0</span>
                                       <span class="token operator">|</span> IN_ATTRIB
                                       <span class="token operator">|</span> IN_MOVE
                                       <span class="token operator">|</span> IN_CREATE
                                       <span class="token operator">|</span> IN_DELETE
                                       <span class="token operator">|</span> IN_DELETE_SELF
                                       <span class="token punctuation">)</span>
                                    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0</span>
                                       <span class="token operator">|</span> IN_ATTRIB
                                       <span class="token operator">|</span> IN_MODIFY
                                       <span class="token operator">|</span> IN_MOVE
                                       <span class="token operator">|</span> IN_MOVE_SELF
                                       <span class="token operator">|</span> IN_DELETE_SELF
                                       <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>wd <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"QInotifyFileSystemWatcherEngine::addPaths: inotify_add_watch failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> isDir <span class="token operator">?</span> <span class="token operator">-</span>wd <span class="token operator">:</span> wd<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pathToID<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        idToPath<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> pathToID<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString x <span class="token operator">=</span> idToPath<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token operator">!=</span> path<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> wd <span class="token operator">=</span> id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>id <span class="token operator">:</span> id<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "removing watch for path" &lt;&lt; path &lt;&lt; "wd" &lt;&lt; wd;</span>
        <span class="token function">inotify_rm_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> wd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QInotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">readFromInotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//主要是通过unix库函数来获取文件对应的详细信息。再跟addpath实现中缓存下来的信息做对比，来检测文件的变化。</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "QInotifyFileSystemWatcherEngine::readFromInotify";</span>
    <span class="token keyword">int</span> buffSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> FIONREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buffSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QVarLengthArray<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token operator">></span> <span class="token function">buffer</span><span class="token punctuation">(</span>buffSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffSize <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>at <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> end <span class="token operator">=</span> at <span class="token operator">+</span> buffSize<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> inotify_event <span class="token operator">*</span><span class="token operator">></span> eventForId<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>at <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inotify_event <span class="token operator">*</span>event <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>inotify_event <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventForId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>event<span class="token operator">-</span><span class="token operator">></span>wd<span class="token punctuation">)</span><span class="token punctuation">)</span>
            eventForId<span class="token punctuation">[</span>event<span class="token operator">-</span><span class="token operator">></span>wd<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>mask <span class="token operator">|</span><span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span>mask<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            eventForId<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>event<span class="token operator">-</span><span class="token operator">></span>wd<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        at <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>inotify_event<span class="token punctuation">)</span> <span class="token operator">+</span> event<span class="token operator">-</span><span class="token operator">></span>len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> inotify_event <span class="token operator">*</span><span class="token operator">></span><span class="token operator">::</span>const_iterator it <span class="token operator">=</span> eventForId<span class="token punctuation">.</span><span class="token function">constBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> eventForId<span class="token punctuation">.</span><span class="token function">constEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> inotify_event <span class="token operator">&amp;</span>event <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>it<span class="token punctuation">;</span>
        <span class="token operator">++</span>it<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "inotify event, wd" &lt;&lt; event.wd &lt;&lt; "mask" &lt;&lt; hex &lt;&lt; event.mask;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> event<span class="token punctuation">.</span>wd<span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> idToPath<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// perhaps a directory?</span>
            id <span class="token operator">=</span> <span class="token operator">-</span>id<span class="token punctuation">;</span>
            path <span class="token operator">=</span> idToPath<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// qDebug() &lt;&lt; "event for path" &lt;&lt; path;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span>IN_DELETE_SELF <span class="token operator">|</span> IN_MOVE_SELF <span class="token operator">|</span> IN_UNMOUNT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pathToID<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            idToPath<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">inotify_rm_watch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> event<span class="token punctuation">.</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
QT_END_NAMESPACE
<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// QT_NO_FILESYSTEMWATCHER</span></code></pre>
<p>这是一个单例模式，里边的核心代码其实就是讲的是Inotify相关的函数。其中的关键的点，我已经打上备注。这个类中的主要实现是Linux下的Inotify的使用相关。</p>
<h2 id="Inotify"><a href="#Inotify" class="headerlink" title="Inotify"></a>Inotify</h2><p>Inotify简单的来讲是在Linux下监视文件与文件夹的相关机制，本来想自己写这一部分教程的，可是有一篇文章写的太好了，忍不住给大家分享了。<br><a href="https://www.ibm.com/developerworks/cn/linux/l-inotify/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-inotify/</a> 看完这一篇文章之后我觉得你对Linux下如何监视文件应该有了解了，甚至可以自己封装一个类给大家用。</p>
<h1 id="文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine"><a href="#文件夹的检测变化实现类-QDnotifyFileSystemWatcherEngine" class="headerlink" title="文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine"></a>文件夹的检测变化实现类 QDnotifyFileSystemWatcherEngine</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QDnotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
<span class="token punctuation">{</span>
    Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> QDnotifyFileSystemWatcherEngine <span class="token operator">*</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> Q_SLOTS<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment" spellcheck="true">//这个结构体比较关键</span>
    <span class="token keyword">struct</span> Directory <span class="token punctuation">{</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">parentFd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isMonitored</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token keyword">const</span> Directory <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">fd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">parentFd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">isMonitored</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>isMonitored<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">files</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        QString path<span class="token punctuation">;</span>
        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
        <span class="token keyword">int</span> parentFd<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isMonitored<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//这个结构体也比较关键</span>
        <span class="token keyword">struct</span> File <span class="token punctuation">{</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">groupId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">permissions</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token keyword">const</span> File <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">ownerId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ownerId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">groupId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">permissions</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>permissions<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">lastWrite</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>lastWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            QString path<span class="token punctuation">;</span>
            <span class="token keyword">bool</span> <span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint ownerId<span class="token punctuation">;</span>
            uint groupId<span class="token punctuation">;</span>
            QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
            QDateTime lastWrite<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        QList<span class="token operator">&lt;</span>File<span class="token operator">></span> files<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QMutex mutex<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pathToFD<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Directory<span class="token operator">></span> fdToDirectory<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> parentToFD<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">//cpp</span>
QDnotifySignalThread<span class="token operator">::</span><span class="token function">QDnotifySignalThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">:</span> <span class="token function">isExecing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">moveToThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qt_safe_pipe</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> sigaction oldAction<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> sigaction action<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>action<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    action<span class="token punctuation">.</span>sa_sigaction <span class="token operator">=</span> qfswd_sigio_monitor<span class="token punctuation">;</span>
    action<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_SIGINFO<span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">sigaction</span><span class="token punctuation">(</span>SIGIO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>action<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oldAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>oldAction<span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;</span> SA_SIGINFO<span class="token punctuation">)</span><span class="token punctuation">)</span>
        qfswd_old_sigio_handler <span class="token operator">=</span> oldAction<span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        qfswd_old_sigio_action <span class="token operator">=</span> oldAction<span class="token punctuation">.</span>sa_sigaction<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QDnotifySignalThread<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QDnotifySignalThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QThread<span class="token operator">::</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">event</span><span class="token punctuation">(</span>QEvent <span class="token operator">*</span>e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isExecing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        wait<span class="token punctuation">.</span><span class="token function">wakeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> QThread<span class="token operator">::</span><span class="token function">event</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">startNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Note: All this fancy waiting for the thread to enter its event</span>
    <span class="token comment" spellcheck="true">// loop is to avoid nasty messages at app shutdown when the</span>
    <span class="token comment" spellcheck="true">// QDnotifySignalThread singleton is deleted</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>isExecing<span class="token punctuation">)</span>
        wait<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QSocketNotifier <span class="token function">sn</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> QSocketNotifier<span class="token operator">::</span>Read<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sn<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readFromDnotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QCoreApplication<span class="token operator">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">postEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">QEvent</span><span class="token punctuation">(</span>QEvent<span class="token operator">::</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">readFromDnotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">int</span> readrv <span class="token operator">=</span> <span class="token function">qt_safe_read</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Only expect EAGAIN or EINTR. Other errors are assumed to be impossible.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>readrv <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Q_ASSERT</span><span class="token punctuation">(</span>readrv <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>readrv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span>
            <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            emit <span class="token function">fdChanged</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token function">dnotifySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">fdChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>DirectConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Directory<span class="token operator">></span><span class="token operator">::</span>ConstIterator iter <span class="token operator">=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">constBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            iter <span class="token operator">!=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">constEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>iter<span class="token operator">-</span><span class="token operator">></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token operator">-</span><span class="token operator">></span>parentFd<span class="token punctuation">)</span>
            <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>iter<span class="token operator">-</span><span class="token operator">></span>parentFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
QDnotifyFileSystemWatcherEngine <span class="token operator">*</span>QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">QDnotifyFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">qFatal</span><span class="token punctuation">(</span><span class="token string">"QDnotifyFileSystemWatcherEngine thread should not be run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">bool</span> isDir <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDir <span class="token operator">&amp;&amp;</span> directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Skip monitored directories</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDir <span class="token operator">&amp;&amp;</span> files<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Skip monitored files</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDir<span class="token punctuation">)</span>
            path <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">canonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Locate the directory entry (creating if needed)</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> pathToFD<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            QT_DIR <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token function">QT_OPENDIR</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Could not open directory</span>
            QT_DIR <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            QDir <span class="token function">parentDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parentDir<span class="token punctuation">.</span><span class="token function">isRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parentDir<span class="token punctuation">.</span><span class="token function">cdUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parent <span class="token operator">=</span> <span class="token function">QT_OPENDIR</span><span class="token punctuation">(</span>parentDir<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">QT_CLOSEDIR</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            fd <span class="token operator">=</span> <span class="token function">qt_safe_dup</span><span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">dirfd</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> parentFd <span class="token operator">=</span> parent <span class="token operator">?</span> <span class="token function">qt_safe_dup</span><span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">dirfd</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">QT_CLOSEDIR</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token function">QT_CLOSEDIR</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Q_ASSERT</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETSIG<span class="token punctuation">,</span> SIGIO<span class="token punctuation">)</span> <span class="token operator">||</span>
               <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_NOTIFY<span class="token punctuation">,</span> DN_MODIFY <span class="token operator">|</span> DN_CREATE <span class="token operator">|</span> DN_DELETE <span class="token operator">|</span>
                                     DN_RENAME <span class="token operator">|</span> DN_ATTRIB <span class="token operator">|</span> DN_MULTISHOT<span class="token punctuation">)</span> <span class="token operator">||</span>
               <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">,</span> F_SETSIG<span class="token punctuation">,</span> SIGIO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
               <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">,</span> F_NOTIFY<span class="token punctuation">,</span> DN_DELETE <span class="token operator">|</span> DN_RENAME <span class="token operator">|</span>
                                            DN_MULTISHOT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Could not set appropriate flags</span>
            <span class="token punctuation">}</span>
            Directory dir<span class="token punctuation">;</span>
            dir<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
            dir<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>
            dir<span class="token punctuation">.</span>parentFd <span class="token operator">=</span> parentFd<span class="token punctuation">;</span>
            fdToDirectory<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathToFD<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">)</span>
                parentToFD<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>parentFd<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Directory <span class="token operator">&amp;</span>directory <span class="token operator">=</span> fdToDirectory<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directory<span class="token punctuation">.</span>isMonitored <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Directory<span class="token operator">::</span>File file<span class="token punctuation">;</span>
            file<span class="token punctuation">.</span>path <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">filePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            file<span class="token punctuation">.</span>lastWrite <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathToFD<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">filePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">filePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">dnotifySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> pathToFD<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fd<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        Directory <span class="token operator">&amp;</span>directory <span class="token operator">=</span> fdToDirectory<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isDir <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>path <span class="token operator">==</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isDir <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            directory<span class="token punctuation">.</span>isMonitored <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">.</span>path <span class="token operator">==</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>directory<span class="token punctuation">.</span>isMonitored <span class="token operator">&amp;&amp;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// No longer needed</span>
            <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathToFD<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fdToDirectory<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> wasParent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Directory<span class="token operator">></span><span class="token operator">::</span>Iterator iter <span class="token operator">=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>iter <span class="token operator">==</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QHash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>Iterator pIter <span class="token operator">=</span> parentToFD<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pIter <span class="token operator">==</span> parentToFD<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        iter <span class="token operator">=</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">*</span>pIter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">==</span> fdToDirectory<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        wasParent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Directory <span class="token operator">&amp;</span>directory <span class="token operator">=</span> <span class="token operator">*</span>iter<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>wasParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Directory<span class="token operator">::</span>File <span class="token operator">&amp;</span>file <span class="token operator">=</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Emit signal</span>
                QString filePath <span class="token operator">=</span> file<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
                <span class="token keyword">bool</span> removed <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">QFileInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">--</span>ii<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> removed<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>isMonitored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// Emit signal</span>
        <span class="token keyword">bool</span> removed <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">QFileInfo</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> directory<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span>
            directory<span class="token punctuation">.</span>isMonitored <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> removed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>directory<span class="token punctuation">.</span>isMonitored <span class="token operator">&amp;&amp;</span> directory<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">qt_safe_close</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            parentToFD<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fdToDirectory<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> QDnotifyFileSystemWatcherEngine<span class="token operator">::</span>Directory<span class="token operator">::</span>File<span class="token operator">::</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QDateTime nLastWrite <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint nOwnerId <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint nGroupId <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">groupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QFile<span class="token operator">::</span>Permissions nPermissions <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nLastWrite <span class="token operator">!=</span> lastWrite <span class="token operator">||</span>
       nOwnerId <span class="token operator">!=</span> ownerId <span class="token operator">||</span>
       nGroupId <span class="token operator">!=</span> groupId <span class="token operator">||</span>
       nPermissions <span class="token operator">!=</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ownerId <span class="token operator">=</span> nOwnerId<span class="token punctuation">;</span>
        groupId <span class="token operator">=</span> nGroupId<span class="token punctuation">;</span>
        permissions <span class="token operator">=</span> nPermissions<span class="token punctuation">;</span>
        lastWrite <span class="token operator">=</span> nLastWrite<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Dnotify"><a href="#Dnotify" class="headerlink" title="Dnotify"></a>Dnotify</h2><p>Dnotify同理，也是使用的Linux的系统函数 /usr/include/unistd.h  主要是这个头文件中的函数。有一些关于文件描述符相关的函数</p>
<p>里边主要监控的是其内部类的相关的信息</p>
<pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">struct</span> Directory <span class="token punctuation">{</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">parentFd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isMonitored</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token keyword">const</span> Directory <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">fd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">parentFd</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>parentFd<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">isMonitored</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>isMonitored<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token function">files</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        QString path<span class="token punctuation">;</span>
        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
        <span class="token keyword">int</span> parentFd<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isMonitored<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> File <span class="token punctuation">{</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">groupId</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">permissions</span><span class="token punctuation">(</span><span class="token number">0u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
            <span class="token function">File</span><span class="token punctuation">(</span><span class="token keyword">const</span> File <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">path</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">ownerId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ownerId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">groupId</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">permissions</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>permissions<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token function">lastWrite</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>lastWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            QString path<span class="token punctuation">;</span>
            <span class="token keyword">bool</span> <span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            uint ownerId<span class="token punctuation">;</span>
            uint groupId<span class="token punctuation">;</span>
            QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
            QDateTime lastWrite<span class="token punctuation">;</span></code></pre>
<p>可以直接看这个结构D需要这四个描述信息</p>
<pre class=" language-cpp"><code class="language-cpp">        QString path<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//路径</span>
        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//文件的描述符</span>
        <span class="token keyword">int</span> parentFd<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父亲的描述符号</span>
        <span class="token keyword">bool</span> isMonitored<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否正在监控</span></code></pre>
<p>其中这四个信息都是通过<em>Linux的库函数</em>与结构体来获取的。 其中遍历文件夹则是使用Qt的QFileInfo来遍历添加paths的信息，存储到其类的成员变量中。</p>
<pre><code>// Directory iteration
#define QT_DIR DIR
#define QT_OPENDIR ::opendir
#define QT_CLOSEDIR ::closedir</code></pre><p>Dir下的file需要这些信息</p>
<pre class=" language-cpp"><code class="language-cpp">            QString path<span class="token punctuation">;</span>
            uint ownerId<span class="token punctuation">;</span>
            uint groupId<span class="token punctuation">;</span>
            QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
            QDateTime lastWrite<span class="token punctuation">;</span></code></pre>
<p>现在说一下关键代码</p>
<pre class=" language-cpp"><code class="language-cpp">    ret <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFD<span class="token punctuation">,</span> FD_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// set non-block too?</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> O_NONBLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">fcntl</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>其中 pipefd[0]表示读，pipefd[1]表示写，实际上<br>关键代码在这里。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> QDnotifySignalThread<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QSocketNotifier <span class="token function">sn</span><span class="token punctuation">(</span>qfswd_fileChanged_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> QSocketNotifier<span class="token operator">::</span>Read<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sn<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readFromDnotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QCoreApplication<span class="token operator">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">postEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">QEvent</span><span class="token punctuation">(</span>QEvent<span class="token operator">::</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这段代码实际上是使用QSocketNotifier实时检测出从pip管道中读取有关于文件信息的变化，加到了Qt在Linux下的事件循环中（还记上以前有个老哥写的那个u盘检测工具么？实际上原理跟这个一样，都是通过socket来读取文件描述符的状态来检测其变化）。然后等待其消息通知变化。这样来实时监控文件夹与文件的变化。其中QDnotify大量使用了Unix的库函数，建议有兴趣的可以多读读Unix高级环境编程这本书，可以当个字典来看。我也不一个个解释了。实际上这个类，我读起来也是有点吃力，因为大部分都是Linux的库函数，还是得补补课去看看《Unix环境高级编程》了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这两个类的主要原理是先缓存当前addpath的文件or文件夹的信息，然后再通过socket来实时检测其变化。获取当前的信息与缓存的信息做对比，如果有变化，就发送对应的信号。这样我们就可以检测到文件or文件夹的变化了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
  <entry>
    <title>Gtk widget 与 Qt Widget的相互嵌套</title>
    <url>/2020/06/27/gtk-widget-yu-qt-widget-de-xiang-hu-qian-tao/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>gtk qt窗口的相互嵌套。主要是使用了Gtk中的socket跟plug的模式，与Qt中的QX11EmbedContainer。这是两个不同的UI库的相互嵌套的方法。google了下发现有个老哥写出来了，但是gtk嵌入到Qt的代码中是有点问题的，所以我改了改他的代码。最后终于完成了，毕竟我对gtk不太熟悉=。=代码很简单，这里就不做任何说明了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>pro文件中添加</p>
<pre class=" language-cpp"><code class="language-cpp">unix<span class="token operator">:</span> CONFIG <span class="token operator">+</span><span class="token operator">=</span> link_pkgconfig
unix<span class="token operator">:</span> PKGCONFIG <span class="token operator">+</span><span class="token operator">=</span> gtk<span class="token operator">+-</span><span class="token number">2.0</span></code></pre>
<p>代码</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtk/gtk.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QX11EmbedContainer></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QX11EmbedWidget></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gdk/gdkx.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> MAINWINDOW_IS_QT true</span>
<span class="token macro property">#<span class="token directive keyword">define</span> EMBEDDED_IS_QT false</span>
<span class="token keyword">void</span> <span class="token function">create_qt_embed</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QX11EmbedWidget<span class="token operator">*</span> plug <span class="token operator">=</span> <span class="token keyword">new</span> QX11EmbedWidget<span class="token punctuation">;</span>
    plug<span class="token operator">-</span><span class="token operator">></span><span class="token function">embedInto</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPushButton<span class="token operator">*</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"My Label"</span><span class="token punctuation">,</span> plug<span class="token punctuation">)</span><span class="token punctuation">;</span>
    plug<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">create_gtk_plug</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//    GtkWidget* plug = gtk_plug_new(id);</span>
<span class="token comment" spellcheck="true">//    gtk_widget_show(plug);</span>
<span class="token comment" spellcheck="true">//    GtkWidget* button = gtk_button_new_with_label("My Label");</span>
<span class="token comment" spellcheck="true">//    gtk_widget_show(button);</span>
<span class="token comment" spellcheck="true">//    GDK_WINDOW_XID(button);</span>
<span class="token comment" spellcheck="true">//    gdk_x11_window_get_xid()</span>
<span class="token comment" spellcheck="true">//    gtk_container_add(GTK_CONTAINER(plug), button);</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">gtk_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>MAINWINDOW_IS_QT<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        QMainWindow<span class="token operator">*</span> main_window <span class="token operator">=</span> <span class="token keyword">new</span> QMainWindow<span class="token punctuation">;</span>
        QX11EmbedContainer<span class="token operator">*</span> container <span class="token operator">=</span> <span class="token keyword">new</span> QX11EmbedContainer<span class="token punctuation">;</span>
        main_window<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCentralWidget</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token operator">-</span><span class="token operator">></span><span class="token function">setStyleSheet</span><span class="token punctuation">(</span><span class="token string">"background-color:red;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>EMBEDDED_IS_QT<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">create_qt_embed</span><span class="token punctuation">(</span>container<span class="token operator">-</span><span class="token operator">></span><span class="token function">winId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//            gtk_widget_get_window(GTK_WIDGET(button));</span>
            GtkWidget<span class="token operator">*</span> window<span class="token punctuation">;</span>
            GtkWidget<span class="token operator">*</span> button<span class="token punctuation">;</span>
            window <span class="token operator">=</span> <span class="token function">gtk_window_new</span><span class="token punctuation">(</span>GTK_WINDOW_TOPLEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
            button <span class="token operator">=</span> <span class="token function">gtk_button_new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">gtk_widget_show</span> <span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">gtk_container_add</span> <span class="token punctuation">(</span><span class="token function">GTK_CONTAINER</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">gtk_widget_show</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
            XID id <span class="token operator">=</span> <span class="token function">GDK_WINDOW_XWINDOW</span> <span class="token punctuation">(</span><span class="token function">GTK_WIDGET</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
            container<span class="token operator">-</span><span class="token operator">></span><span class="token function">embedClient</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        main_window<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QApplication<span class="token operator">::</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        GtkWidget <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token function">gtk_window_new</span><span class="token punctuation">(</span>GTK_WINDOW_TOPLEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">g_signal_connect</span><span class="token punctuation">(</span><span class="token function">G_OBJECT</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"destroy"</span><span class="token punctuation">,</span>
                         <span class="token function">G_CALLBACK</span><span class="token punctuation">(</span>gtk_main_quit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gtk_widget_show</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GtkWidget<span class="token operator">*</span> container <span class="token operator">=</span> <span class="token function">gtk_socket_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gtk_widget_show</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gtk_container_add</span><span class="token punctuation">(</span><span class="token function">GTK_CONTAINER</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>EMBEDDED_IS_QT<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">create_qt_embed</span><span class="token punctuation">(</span><span class="token function">gtk_socket_get_id</span><span class="token punctuation">(</span><span class="token function">GTK_SOCKET</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">create_gtk_plug</span><span class="token punctuation">(</span><span class="token function">gtk_socket_get_id</span><span class="token punctuation">(</span><span class="token function">GTK_SOCKET</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">gtk_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>GTK</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileSystemWatcher源码剖析(Linux)_1</title>
    <url>/2020/06/27/qfilesystemwatcher-yuan-ma-pou-xi-linux-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇讲了QFileSystemWatcher来检测文件夹的变化，里边的实现有两个</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 这个用于检测文件类型的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QInotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine

<span class="token comment" spellcheck="true">// 这个用于监控Dir的变化</span>
<span class="token keyword">class</span> <span class="token class-name">QDnotifyFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
</code></pre>
<p>QFileSystemWatcher中这两个类监视文件夹的变化还有一个小小的缺点，就是无法监视连接到服务器的位置，一般挂载到服务器到Linux本地的路径是这里</p>
<pre class=" language-shell"><code class="language-shell">/run/user/1000/gvfs</code></pre>
<p>这个目录下的。没有办法只能自己暂时实现了。</p>
<h2 id="多线程-定时器"><a href="#多线程-定时器" class="headerlink" title="多线程 + 定时器"></a>多线程 + 定时器</h2><p>实际上一开始准备自己实现的，但是发现QFileSystemWatcher里边已经有一个类是对应的实现了。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token punctuation">{</span> PollingInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">QPollingFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine
<span class="token punctuation">{</span>
    Q_OBJECT
    <span class="token keyword">class</span> <span class="token class-name">FileInfo</span>
    <span class="token punctuation">{</span>
        uint ownerId<span class="token punctuation">;</span>
        uint groupId<span class="token punctuation">;</span>
        QFile<span class="token operator">::</span>Permissions permissions<span class="token punctuation">;</span>
        QDateTime lastModified<span class="token punctuation">;</span>
        QStringList entries<span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">FileInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFileInfo <span class="token operator">&amp;</span>fileInfo<span class="token punctuation">)</span>
            <span class="token operator">:</span> <span class="token function">ownerId</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function">groupId</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">groupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function">permissions</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function">lastModified</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                entries <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span><span class="token function">absoluteDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entryList</span><span class="token punctuation">(</span>QDir<span class="token operator">::</span>AllEntries<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        FileInfo <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFileInfo <span class="token operator">&amp;</span>fileInfo<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">FileInfo</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFileInfo <span class="token operator">&amp;</span>fileInfo<span class="token punctuation">)</span> <span class="token keyword">const</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> entries <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">absoluteDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entryList</span><span class="token punctuation">(</span>QDir<span class="token operator">::</span>AllEntries<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>ownerId <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">ownerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> groupId <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">groupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> permissions <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> lastModified <span class="token operator">!=</span> fileInfo<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">mutable</span> QMutex mutex<span class="token punctuation">;</span>
    QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span> files<span class="token punctuation">,</span> directories<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">QPollingFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList <span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span> QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> Q_SLOTS<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//--cpp</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"filewatcher.h"</span></span>
QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">QPollingFileSystemWatcherEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> QT_NO_THREAD</span>
    <span class="token function">moveToThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QTimer timer<span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>PollingInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">addPaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                      QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                fi <span class="token operator">=</span> <span class="token function">QFileInfo</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>directories<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token operator">-</span><span class="token operator">></span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                files<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>files<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QStringList QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">removePaths</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStringList <span class="token operator">&amp;</span>paths<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>files<span class="token punctuation">,</span>
                                                         QStringList <span class="token operator">*</span>directories<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QStringList p <span class="token operator">=</span> paths<span class="token punctuation">;</span>
    QMutableListIterator<span class="token operator">&lt;</span>QString<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QString path <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>directories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directories<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            files<span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>directories<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        locker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMetaObject<span class="token operator">::</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"quit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> QPollingFileSystemWatcherEngine<span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QMutexLocker <span class="token function">locker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    QMutableHashIterator<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span> <span class="token function">fit</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span><span class="token operator">::</span>iterator x <span class="token operator">=</span> fit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> fi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> fi<span class="token punctuation">;</span>
            emit <span class="token function">fileChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    QMutableHashIterator<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span> <span class="token function">dit</span><span class="token punctuation">(</span>directories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>dit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QHash<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> FileInfo<span class="token operator">></span><span class="token operator">::</span>iterator x <span class="token operator">=</span> dit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QString path <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QFileInfo <span class="token function">fi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            fi <span class="token operator">=</span> <span class="token function">QFileInfo</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> fi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fi<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                x<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> fi<span class="token punctuation">;</span>
                emit <span class="token function">directoryChanged</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 这个外部没有暴露对应的变化接口，但是检测其它类型的目录变化时我们会用到</span>
<span class="token keyword">class</span> <span class="token class-name">QPollingFileSystemWatcherEngine</span> <span class="token operator">:</span> <span class="token keyword">public</span> QFileSystemWatcherEngine</code></pre>
<p>这个类Qt没有对外接口暴露，实际上看QFileSystemWatcher的实现</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//poller在这里初始化</span>
<span class="token keyword">void</span> QFileSystemWatcherPrivate<span class="token operator">::</span><span class="token function">initPollerEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>poller<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">Q_Q</span><span class="token punctuation">(</span>QFileSystemWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    poller <span class="token operator">=</span> <span class="token keyword">new</span> QPollingFileSystemWatcherEngine<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// that was a mouthful</span>
    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>poller<span class="token punctuation">,</span>
                     <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">fileChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     q<span class="token punctuation">,</span>
                     <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">_q_fileChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>poller<span class="token punctuation">,</span>
                     <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">directoryChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     q<span class="token punctuation">,</span>
                     <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">_q_directoryChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//在这里调用</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">objectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"_qt_autotest_force_engine_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//这里也就是</span>
        <span class="token comment" spellcheck="true">// Normal runtime case - search intelligently for best engine</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">-</span><span class="token operator">></span>native<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            engine <span class="token operator">=</span> d<span class="token operator">-</span><span class="token operator">></span>native<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">initPollerEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//这里初始化，否则就走上边两个无法监视服务器的实现</span>
            engine <span class="token operator">=</span> d<span class="token operator">-</span><span class="token operator">></span>poller<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>发现QFileSystemWatcher设置objectName为<em>qt_autotest_force_engine</em> 就可以使用了。<br>然后接着</p>
<pre class=" language-cpp"><code class="language-cpp">    QFileSystemWatcher<span class="token operator">*</span> fileSystemWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QFileSystemWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fileSystemWatcher<span class="token operator">-</span><span class="token operator">></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"_qt_autotest_force_engine_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这样就可以监视</p>
<pre class=" language-shell"><code class="language-shell">/run/user/1000/gvfs</code></pre>
<p>目录下的文件，也就是服务器挂载到Linux本地下的文件变化了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 安装 kubuntu桌面</title>
    <url>/2020/06/27/ubuntu16-04-an-zhuang-kubuntu-zhuo-mian/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近想看看kde下的文件管理器是怎么实现的，因为发现Qt自带的文件管理器是有性能bug的,而且并没有ui线程上的交互处理，如果改的话，只能去更改Qt源码（但是这样改也太蛋疼了，哪有一言不合就去改Qt源码的）。所以想看看同样是Qt写的kde桌面是不是有这个问题。所以装了一个kde的环境来看看，因为也遇到了一些小问题，而且百度出来的全是csdn的乱七八糟的东西，只能自己总结下了。</p>
<h2 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h2><p>ubuntu自带的源没有找到，我就更新了下源。首先备份源</p>
<pre class=" language-shell"><code class="language-shell">cd /etc/apt/
sudo cp sources.list sources.list.bak</code></pre>
<p>然后都删掉里边的内容 ，添加</p>
<pre class=" language-shell"><code class="language-shell"># ubuntu16.04 source
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
</code></pre>
<p>然后再更新源</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get update</code></pre>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我的ubuntu环境是16.04所以就按照这个来讲了。</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install kubuntu-desktop</code></pre>
<p>我这里下载了大概1.5G的安装包，然后发现报错，让sudo apt-get -f install 下发现还是报错</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 第一个错误</span>
 kde<span class="token operator">-</span>telepathy<span class="token operator">-</span>minimal <span class="token operator">:</span> 依赖<span class="token operator">:</span> kde<span class="token operator">-</span>config<span class="token operator">-</span>telepathy<span class="token operator">-</span><span class="token function">accounts</span> <span class="token punctuation">(</span><span class="token operator">>=</span> <span class="token number">15.04</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span> 但是它将不会被安装

<span class="token comment" spellcheck="true">// -f install 之后还是报错。</span>
dpkg<span class="token operator">:</span> 处理归档 <span class="token operator">/</span>var<span class="token operator">/</span>cache<span class="token operator">/</span>apt<span class="token operator">/</span>archives<span class="token operator">/</span>kde<span class="token operator">-</span>config<span class="token operator">-</span>telepathy<span class="token operator">-</span>accounts_4<span class="token operator">%</span>3a15<span class="token number">.12</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span>0ubuntu1_amd64<span class="token punctuation">.</span><span class="token function">deb</span> <span class="token punctuation">(</span><span class="token operator">--</span>unpack<span class="token punctuation">)</span>时出错：
 正试图覆盖 <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>accounts<span class="token operator">/</span>services<span class="token operator">/</span>google<span class="token operator">-</span>im<span class="token punctuation">.</span>service，它同时被包含于软件包 account<span class="token operator">-</span>plugin<span class="token operator">-</span>google <span class="token number">0.12</span><span class="token operator">+</span><span class="token number">16.04</span><span class="token punctuation">.</span><span class="token number">20160126</span><span class="token operator">-</span>0ubuntu1</code></pre>
<p>发现这是Ubuntu的一个bug，把报错的软件包干掉就可以了。</p>
<pre class=" language-shell"><code class="language-shell">sudo dpkg -r account-plugin-google unity-scope-gdrive</code></pre>
<p>然后再</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get -f install </code></pre>
<p>就ok了。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Ubuntu</tag>
        <tag>KDE</tag>
        <tag>kubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置更换全局用户名</title>
    <url>/2020/06/27/git-pei-zhi-geng-huan-quan-ju-yong-hu-ming/</url>
    <content><![CDATA[<h2 id="吐嘈"><a href="#吐嘈" class="headerlink" title="吐嘈"></a>吐嘈</h2><p>每次在github上提交代码，都发现是默认我原来的git的那个用户名，原来写了globle，现在得在当前git目录下再多设置一下，要不然还是得用默认的用户名</p>
<pre class=" language-shell"><code class="language-shell">git config user.name "xxx"
git config user.email "xxx"</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04编译KDE dolphin文件管理器</title>
    <url>/2020/06/27/ubuntu18-04-bian-yi-kde-dolphin-wen-jian-guan-li-qi/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>首先最近在研究（填坑）文件管理器，其中Qt实现的文件管理器做的最好的就是KDE实现的dolphin.所以特意装了个Ubuntu18.04的操作系统装了KDE的环境。来编译一下dolphin。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>ubuntu的kde环境</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install kubuntu-desktop</code></pre>
<h2 id="准备依赖"><a href="#准备依赖" class="headerlink" title="准备依赖"></a>准备依赖</h2><p>首先要安装dolphin的依赖。这里安装的全部都是kde的依赖</p>
<pre class=" language-shell"><code class="language-shell">sudo apt install kinit-dev libkf5crash-dev libkf5notifications-dev libkf5notifyconfig-dev libkf5parts-dev libkf5kcmutils-dev libkf5newstuff-dev libkf5coreaddons-dev libkf5i18n-dev libkf5dbusaddons-dev libkf5config-dev
sudo apt install libkf5activities-dev libphonon4qt5-dev
sudo apt install libkf5baloowidgets-dev libkf5filemetadata-dev libkf5kdelibs4support-dev
sudo apt install baloo-kf5-dev
sudo apt-get install git build-essential cmake qt5-default qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev</code></pre>
<p>由于是新的环境，还要安装新的编译开发工具。<br>然后可以开始下载源码</p>
<pre class=" language-shell"><code class="language-shell">sudo apt install git g++ build-essential qt5-qmake qt5-default cmake
sudo apt-get install qtcreator
sudo apt-get install extra-cmake-modules</code></pre>
<p>然后下载源码，并且编译Debug版本</p>
<pre class=" language-shell"><code class="language-shell">git clone git://anongit.kde.org/dolphin
cd dolphin
mkdir build
cd build
cmake ../ -DCMAKE_BUILD_TYPE=Debug
make</code></pre>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>kde</tag>
        <tag>dolphin</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt打印机原理源码剖析_Linux</title>
    <url>/2020/06/27/qt-da-yin-ji-yuan-li-yuan-ma-pou-xi-linux/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Qt在Linux下打印机的原理以及源码相关知识。<br>下边我就详细的讲一下Linux下的打印机原理。</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>Linux下简单的流程就是这样</p>
<div id="flowchart-0" class="flow-chart"></div>


<h1 id="CUPS"><a href="#CUPS" class="headerlink" title="CUPS"></a>CUPS</h1><p>目前Linux上打印的通用协议是CUPS协议。目前由苹果公司来维护。算了我还是粘一下wiki的词条吧。</p>
<p>wiki词条</p>
<blockquote>
<p>CUPS (formerly an acronym for Common UNIX Printing System) is a modular printing system for Unix-like computer operating systems which allows a computer to act as a print server. A computer running CUPS is a host that can accept print jobs from client computers, process them, and send them to the appropriate printer.<br>CUPS consists of a print spooler and scheduler, a filter system that converts the print data to a format that the printer will understand, and a backend system that sends this data to the print device. CUPS uses the Internet Printing Protocol (IPP) as the basis for managing print jobs and queues. It also provides the traditional command line interfaces for the System V and Berkeley print systems, and provides support for the Berkeley print system’s Line Printer Daemon protocol and limited support for the server message block (SMB) protocol. System administrators can configure the device drivers which CUPS supplies by editing text files in Adobe’s PostScript Printer Description (PPD) format. There are a number of user interfaces for different pl#atforms that can configure CUPS, and it has a built-in web-based interface. CUPS is free software, provided under the Apache License. </p>
</blockquote>
<blockquote>
<p>CUPS（前为Common Unix Printing System，即UNIX通用打印系统的缩写，但现无官方全名[来源请求]）是一个类Unix操作系统的组合式印刷系统，允许一台计算机作为打印服务器。CUPS接受一个客户端的计算机进程，并送到相应的打印机。<br>CUPS是自由软件，使用GNU通用公共许可证和GNU宽通用公共许可证的第2版。<br>迈克尔·斯维特，Easy Software Products的拥有者，于1997年开始开发CUPS。首次公开测试版于1999年发布。[2]原本设计的CUPS使用行式打印机后台程序协议，但由于LPD的限制和供应商不兼容，所以由互联网打印协议(IPP)代替。CUPS被迅速默认为一些Linux发行版的打印系统，如Red Hat Linux。2002年3月，苹果公司在Mac OS X v10.2中采用了CUPS。[3]2007年2月，苹果公司聘请了迈克尔·斯维特并购买了CUPS的源代码。[4]</p>
</blockquote>
<p>再次说一遍 <em>目前Unix系列的打印原理都是走的该协议。</em></p>
<h2 id="CUPS是开源的"><a href="#CUPS是开源的" class="headerlink" title="CUPS是开源的"></a>CUPS是开源的</h2><ul>
<li>官网 <a href="https://www.cups.org/" target="_blank" rel="noopener">https://www.cups.org/</a> </li>
<li>源码 <a href="https://github.com/apple/cups" target="_blank" rel="noopener">https://github.com/apple/cups</a></li>
</ul>
<p>我读过这里的源码，为了验证下边有个纠结的问题。全是c写的，也不难。</p>
<h2 id="Linux下的驱动"><a href="#Linux下的驱动" class="headerlink" title="Linux下的驱动"></a>Linux下的驱动</h2><p>秉承着Linux下的原则，一切皆文件，实际上Linux下的打印机驱动也是文件，在目录/etc/cups/ppd文件夹下。可以随意装个虚拟驱动来看下</p>
<p>简单的给大家看几行ppd文件，这是我本地下的驱动文件</p>
<pre><code>*PPD-Adobe: &quot;4.3&quot;
*%%%% PPD file for Generic Text-Only Printer with CUPS.
*%%%% Created by the CUPS PPD Compiler CUPS v2.2.7.
*% (c) 2014 OpenPrinting
*FormatVersion: &quot;4.3&quot;
*FileVersion: &quot;1.0&quot;
*LanguageVersion: English
*LanguageEncoding: ISOLatin1
*PCFileName: &quot;textonly.ppd&quot;
*Product: &quot;(Generic Text-Only Printer)&quot;
*Manufacturer: &quot;Generic&quot;
*ModelName: &quot;Generic Text-Only Printer&quot;
*ShortNickName: &quot;Generic Text-Only Printer&quot;
*NickName: &quot;Generic Text-Only Printer&quot;
*PSVersion: &quot;(3010.000) 0&quot;
*LanguageLevel: &quot;3&quot;
*ColorDevice: False
*DefaultColorSpace: Gray
*FileSystem: False
*Throughput: &quot;1&quot;
*LandscapeOrientation: Plus90
*TTRasterizer: Type42
*% Driver-defined attributes...
*cupsFilter2: &quot;text/plain text/plain 0 texttotext&quot;
*RequiresPageRegion All: True
*1284DeviceID: &quot;MFG:Generic;MDL:Text-Only Printer;DES:Generic Text-Only Printer;CLS:PRINTER;CMD:TXT;DRV:Dtextonly,R1,M0;&quot;
*cupsVersion: 2.2
*cupsModelNumber: 0
*cupsManualCopies: True
*cupsFilter: &quot;text/plain 0 texttotext&quot;
*cupsLanguages: &quot;en&quot;</code></pre><p>里边主要是一些字符串信息。你可以简单的理解，cups就是来解析ppd文件中的字符串信息的。</p>
<h2 id="Qt对CUPS的支持。"><a href="#Qt对CUPS的支持。" class="headerlink" title="Qt对CUPS的支持。"></a>Qt对CUPS的支持。</h2><p>实际上Qt对CUPS的支持是相当好的，源码级别的话都不到千行，将cups提供的信息封装了一层Qt的API来给大家使用。实际上QPrinter也是调用的Qt封装的QCUPSSupport。注意一下QPrinter在Linux下的初始化是非常慢的。不要频繁调用。</p>
<p>上源码QCUPSSupport</p>
<pre><code>//Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/gui/painting/ 源码在这里
/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtGui module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file. Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#ifndef QCUPS_P_H
#define QCUPS_P_H
//
// W A R N I N G
// -------------
//
// This file is not part of the Qt API. It exists purely as an
// implementation detail. This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
//
#include &quot;QtCore/qstring.h&quot;
#include &quot;QtCore/qstringlist.h&quot;
#include &quot;QtGui/qprinter.h&quot;
#ifndef QT_NO_CUPS
#include &lt;QtCore/qlibrary.h&gt;
#include &lt;cups/cups.h&gt;
#include &lt;cups/ppd.h&gt;
QT_BEGIN_NAMESPACE
Q_DECLARE_TYPEINFO(cups_option_t, Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE);
class QCUPSSupport
{
public:
    QCUPSSupport();
    ~QCUPSSupport();
    static bool isAvailable();
    static int cupsVersion() { return isAvailable() ? CUPS_VERSION_MAJOR*10000+CUPS_VERSION_MINOR*100+CUPS_VERSION_PATCH : 0; }
    int availablePrintersCount() const;
    const cups_dest_t* availablePrinters() const;
    int currentPrinterIndex() const;
    const ppd_file_t* setCurrentPrinter(int index);
    const ppd_file_t* currentPPD() const;
    const ppd_option_t* ppdOption(const char *key) const;
    const cups_option_t* printerOption(const QString &amp;key) const;
    const ppd_option_t* pageSizes() const;
    int markOption(const char* name, const char* value);
    void saveOptions(QList&lt;const ppd_option_t*&gt; options, QList&lt;const char*&gt; markedOptions);
    QRect paperRect(const char *choice) const;
    QRect pageRect(const char *choice) const;
    QStringList options() const;
    static bool printerHasPPD(const char *printerName);
    QString unicodeString(const char *s);
    QPair&lt;int, QString&gt; tempFd();
    int printFile(const char * printerName, const char * filename, const char * title,
                  int num_options, cups_option_t * options);
private:
    void collectMarkedOptions(QStringList&amp; list, const ppd_group_t* group = 0) const;
    void collectMarkedOptionsHelper(QStringList&amp; list, const ppd_group_t* group) const;
    int prnCount;
    cups_dest_t *printers;
    const ppd_option_t* page_sizes;
    int currPrinterIndex;
    ppd_file_t *currPPD;
#ifndef QT_NO_TEXTCODEC
    QTextCodec *codec;
#endif
};
QT_END_NAMESPACE
#endif // QT_NO_CUPS
#endif</code></pre><p>cpp</p>
<pre><code>//Qt4.8.7/qt-everywhere-opensource-src-4.8.7/src/gui/painting/qcups.cpp

/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtGui module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file. Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#include &lt;qdebug.h&gt;
#include &quot;qcups_p.h&quot;
#ifndef QT_NO_CUPS
#ifndef QT_LINUXBASE // LSB merges everything into cups.h
# include &lt;cups/language.h&gt;
#endif
#include &lt;qtextcodec.h&gt;
QT_BEGIN_NAMESPACE
typedef int (*CupsGetDests)(cups_dest_t **dests);
typedef void (*CupsFreeDests)(int num_dests, cups_dest_t *dests);
typedef const char* (*CupsGetPPD)(const char *printer);
typedef int (*CupsMarkOptions)(ppd_file_t *ppd, int num_options, cups_option_t *options);
typedef ppd_file_t* (*PPDOpenFile)(const char *filename);
typedef void (*PPDMarkDefaults)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*PPDClose)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*CupsFreeOptions)(int num_options, cups_option_t *options);
typedef void (*CupsSetDests)(int num_dests, cups_dest_t *dests);
typedef cups_lang_t* (*CupsLangGet)(const char *language);
typedef const char* (*CupsLangEncoding)(cups_lang_t *language);
typedef int (*CupsAddOption)(const char *name, const char *value, int num_options, cups_option_t **options);
typedef int (*CupsTempFd)(char *name, int len);
typedef int (*CupsPrintFile)(const char * name, const char * filename, const char * title, int num_options, cups_option_t * options);
static bool cupsLoaded = false;
static int qt_cups_num_printers = 0;
static CupsGetDests _cupsGetDests = 0;
static CupsFreeDests _cupsFreeDests = 0;
static CupsGetPPD _cupsGetPPD = 0;
static PPDOpenFile _ppdOpenFile = 0;
static PPDMarkDefaults _ppdMarkDefaults = 0;
static PPDClose _ppdClose = 0;
static CupsMarkOptions _cupsMarkOptions = 0;
static PPDMarkOption _ppdMarkOption = 0;
static CupsFreeOptions _cupsFreeOptions = 0;
static CupsSetDests _cupsSetDests = 0;
static CupsLangGet _cupsLangGet = 0;
static CupsLangEncoding _cupsLangEncoding = 0;
static CupsAddOption _cupsAddOption = 0;
static CupsTempFd _cupsTempFd = 0;
static CupsPrintFile _cupsPrintFile = 0;
static void resolveCups()
{
    QLibrary cupsLib(QLatin1String(&quot;cups&quot;), 2);
    if(cupsLib.load()) {
        _cupsGetDests = (CupsGetDests) cupsLib.resolve(&quot;cupsGetDests&quot;);
        _cupsFreeDests = (CupsFreeDests) cupsLib.resolve(&quot;cupsFreeDests&quot;);
        _cupsGetPPD = (CupsGetPPD) cupsLib.resolve(&quot;cupsGetPPD&quot;);
        _cupsLangGet = (CupsLangGet) cupsLib.resolve(&quot;cupsLangGet&quot;);
        _cupsLangEncoding = (CupsLangEncoding) cupsLib.resolve(&quot;cupsLangEncoding&quot;);
        _ppdOpenFile = (PPDOpenFile) cupsLib.resolve(&quot;ppdOpenFile&quot;);
        _ppdMarkDefaults = (PPDMarkDefaults) cupsLib.resolve(&quot;ppdMarkDefaults&quot;);
        _ppdClose = (PPDClose) cupsLib.resolve(&quot;ppdClose&quot;);
        _cupsMarkOptions = (CupsMarkOptions) cupsLib.resolve(&quot;cupsMarkOptions&quot;);
        _ppdMarkOption = (PPDMarkOption) cupsLib.resolve(&quot;ppdMarkOption&quot;);
        _cupsFreeOptions = (CupsFreeOptions) cupsLib.resolve(&quot;cupsFreeOptions&quot;);
        _cupsSetDests = (CupsSetDests) cupsLib.resolve(&quot;cupsSetDests&quot;);
        _cupsAddOption = (CupsAddOption) cupsLib.resolve(&quot;cupsAddOption&quot;);
        _cupsTempFd = (CupsTempFd) cupsLib.resolve(&quot;cupsTempFd&quot;);
        _cupsPrintFile = (CupsPrintFile) cupsLib.resolve(&quot;cupsPrintFile&quot;);
        if (_cupsGetDests &amp;&amp; _cupsFreeDests) {
            cups_dest_t *printers;
            int num_printers = _cupsGetDests(&amp;printers);
            if (num_printers)
                _cupsFreeDests(num_printers, printers);
            qt_cups_num_printers = num_printers;
        }
    }
    cupsLoaded = true;
}
// ================ CUPS Support class ========================
QCUPSSupport::QCUPSSupport()
    :
    prnCount(0),
    printers(0),
    page_sizes(0),
    currPrinterIndex(0),
    currPPD(0)
{
    if (!cupsLoaded)
        resolveCups();
    // getting all available printers
    if (!isAvailable())
        return;
    // Update the available printer count
    qt_cups_num_printers = prnCount = _cupsGetDests(&amp;printers);
    for (int i = 0; i &lt; prnCount; ++i) {
        if (printers[i].is_default) {
            currPrinterIndex = i;
            setCurrentPrinter(i);
            break;
        }
    }
#ifndef QT_NO_TEXTCODEC
    cups_lang_t *cupsLang = _cupsLangGet(0);
    codec = QTextCodec::codecForName(_cupsLangEncoding(cupsLang));
    if (!codec)
        codec = QTextCodec::codecForLocale();
#endif
}
QCUPSSupport::~QCUPSSupport()
{
     if (currPPD)
        _ppdClose(currPPD);
     if (prnCount)
         _cupsFreeDests(prnCount, printers);
}
int QCUPSSupport::availablePrintersCount() const
{
    return prnCount;
}
const cups_dest_t* QCUPSSupport::availablePrinters() const
{
    return printers;
}
const ppd_file_t* QCUPSSupport::currentPPD() const
{
    return currPPD;
}
const ppd_file_t* QCUPSSupport::setCurrentPrinter(int index)
{
    Q_ASSERT(index &gt;= 0 &amp;&amp; index &lt;= prnCount);
    if (index == prnCount)
        return 0;
    currPrinterIndex = index;
    if (currPPD)
        _ppdClose(currPPD);
    currPPD = 0;
    page_sizes = 0;
    const char *ppdFile = _cupsGetPPD(printers[index].name);
    if (!ppdFile)
      return 0;
    currPPD = _ppdOpenFile(ppdFile);
    unlink(ppdFile);
    // marking default options
    _ppdMarkDefaults(currPPD);
    // marking options explicitly set
    _cupsMarkOptions(currPPD, printers[currPrinterIndex].num_options, printers[currPrinterIndex].options);
    // getting pointer to page sizes
    page_sizes = ppdOption(&quot;PageSize&quot;);
    return currPPD;
}
int QCUPSSupport::currentPrinterIndex() const
{
    return currPrinterIndex;
}
bool QCUPSSupport::isAvailable()
{
    if(!cupsLoaded)
        resolveCups();
    return _cupsGetDests &amp;&amp;
        _cupsFreeDests &amp;&amp;
        _cupsGetPPD &amp;&amp;
        _ppdOpenFile &amp;&amp;
        _ppdMarkDefaults &amp;&amp;
        _ppdClose &amp;&amp;
        _cupsMarkOptions &amp;&amp;
        _ppdMarkOption &amp;&amp;
        _cupsFreeOptions &amp;&amp;
        _cupsSetDests &amp;&amp;
        _cupsLangGet &amp;&amp;
        _cupsLangEncoding &amp;&amp;
        _cupsAddOption &amp;&amp;
        (qt_cups_num_printers &gt; 0);
}
const ppd_option_t* QCUPSSupport::ppdOption(const char *key) const
{
    if (currPPD) {
        for (int gr = 0; gr &lt; currPPD-&gt;num_groups; ++gr) {
            for (int opt = 0; opt &lt; currPPD-&gt;groups[gr].num_options; ++opt) {
                if (qstrcmp(currPPD-&gt;groups[gr].options[opt].keyword, key) == 0)
                    return &amp;currPPD-&gt;groups[gr].options[opt];
            }
        }
    }
    return 0;
}
const cups_option_t* QCUPSSupport::printerOption(const QString &amp;key) const
{
    for (int i = 0; i &lt; printers[currPrinterIndex].num_options; ++i) {
        if (QLatin1String(printers[currPrinterIndex].options[i].name) == key)
            return &amp;printers[currPrinterIndex].options[i];
    }
    return 0;
}
const ppd_option_t* QCUPSSupport::pageSizes() const
{
    return page_sizes;
}
int QCUPSSupport::markOption(const char* name, const char* value)
{
    return _ppdMarkOption(currPPD, name, value);
}
void QCUPSSupport::saveOptions(QList&lt;const ppd_option_t*&gt; options, QList&lt;const char*&gt; markedOptions)
{
    int oldOptionCount = printers[currPrinterIndex].num_options;
    cups_option_t* oldOptions = printers[currPrinterIndex].options;
    int newOptionCount = 0;
    cups_option_t* newOptions = 0;
    // copying old options that are not on the new list
    for (int i = 0; i &lt; oldOptionCount; ++i) {
        bool contains = false;
        for (int j = 0; j &lt; options.count(); ++j) {
            if (qstrcmp(options.at(j)-&gt;keyword, oldOptions[i].name) == 0) {
                contains = true;
                break;
            }
        }
        if (!contains) {
            newOptionCount = _cupsAddOption(oldOptions[i].name, oldOptions[i].value, newOptionCount, &amp;newOptions);
        }
    }
    // we can release old option list
     _cupsFreeOptions(oldOptionCount, oldOptions);
    // adding marked options
    for (int i = 0; i &lt; markedOptions.count(); ++i) {
        const char* name = markedOptions.at(i);
        ++i;
        newOptionCount = _cupsAddOption(name, markedOptions.at(i), newOptionCount, &amp;newOptions);
    }
    // placing the new option list
    printers[currPrinterIndex].num_options = newOptionCount;
    printers[currPrinterIndex].options = newOptions;
    // saving new default values
    _cupsSetDests(prnCount, printers);
}
QRect QCUPSSupport::paperRect(const char *choice) const
{
    if (!currPPD)
        return QRect();
    for (int i = 0; i &lt; currPPD-&gt;num_sizes; ++i) {
        if (qstrcmp(currPPD-&gt;sizes[i].name, choice) == 0)
            return QRect(0, 0, qRound(currPPD-&gt;sizes[i].width), qRound(currPPD-&gt;sizes[i].length));
    }
    return QRect();
}
QRect QCUPSSupport::pageRect(const char *choice) const
{
    if (!currPPD)
        return QRect();
    for (int i = 0; i &lt; currPPD-&gt;num_sizes; ++i) {
        if (qstrcmp(currPPD-&gt;sizes[i].name, choice) == 0)
            return QRect(qRound(currPPD-&gt;sizes[i].left),
                         qRound(currPPD-&gt;sizes[i].length - currPPD-&gt;sizes[i].top),
                         qRound(currPPD-&gt;sizes[i].right - currPPD-&gt;sizes[i].left),
                         qRound(currPPD-&gt;sizes[i].top - currPPD-&gt;sizes[i].bottom));
    }
    return QRect();
}
QStringList QCUPSSupport::options() const
{
    QStringList list;
    collectMarkedOptions(list);
    return list;
}
bool QCUPSSupport::printerHasPPD(const char *printerName)
{
    if (!isAvailable())
        return false;
    const char *ppdFile = _cupsGetPPD(printerName);
    if (ppdFile)
        unlink(ppdFile);
    return (ppdFile != 0);
}
QString QCUPSSupport::unicodeString(const char *s)
{
#ifndef QT_NO_TEXTCODEC
    return codec-&gt;toUnicode(s);
#else
    return QLatin1String(s);
#endif
}
void QCUPSSupport::collectMarkedOptions(QStringList&amp; list, const ppd_group_t* group) const
{
    if (group == 0) {
        if (!currPPD)
            return;
        for (int i = 0; i &lt; currPPD-&gt;num_groups; ++i) {
            collectMarkedOptions(list, &amp;currPPD-&gt;groups[i]);
            collectMarkedOptionsHelper(list, &amp;currPPD-&gt;groups[i]);
        }
    } else {
        for (int i = 0; i &lt; group-&gt;num_subgroups; ++i)
            collectMarkedOptionsHelper(list, &amp;group-&gt;subgroups[i]);
    }
}
void QCUPSSupport::collectMarkedOptionsHelper(QStringList&amp; list, const ppd_group_t* group) const
{
    for (int i = 0; i &lt; group-&gt;num_options; ++i) {
        for (int j = 0; j &lt; group-&gt;options[i].num_choices; ++j) {
            if (group-&gt;options[i].choices[j].marked == 1 &amp;&amp; qstrcmp(group-&gt;options[i].choices[j].choice, group-&gt;options[i].defchoice) != 0)
                list &lt;&lt; QString::fromLocal8Bit(group-&gt;options[i].keyword) &lt;&lt; QString::fromLocal8Bit(group-&gt;options[i].choices[j].choice);
        }
    }
}
QPair&lt;int, QString&gt; QCUPSSupport::tempFd()
{
    char filename[512];
    int fd = _cupsTempFd(filename, 512);
    return QPair&lt;int, QString&gt;(fd, QString::fromLocal8Bit(filename));
}
// Prints the given file and returns a job id.
int QCUPSSupport::printFile(const char * printerName, const char * filename, const char * title,
                            int num_options, cups_option_t * options)
{
    return _cupsPrintFile(printerName, filename, title, num_options, options);
}
QT_END_NAMESPACE
#endif // QT_NO_CUPS</code></pre><p>总代码量大概也就600行，简单的来讲，Qt通过函数resolveCups()把cups的库函数封装了起来。别说一个博士生，估计一个刚上班的本科生看这点代码去适配Linux下的驱动小半天也就搞完了，更何况Qt都已经封装好了给大家使用了。</p>
<p>下边的代码是cups所有的库函数。</p>
<pre><code>typedef int (*CupsGetDests)(cups_dest_t **dests);
typedef void (*CupsFreeDests)(int num_dests, cups_dest_t *dests);
typedef const char* (*CupsGetPPD)(const char *printer);
typedef int (*CupsMarkOptions)(ppd_file_t *ppd, int num_options, cups_option_t *options);
typedef ppd_file_t* (*PPDOpenFile)(const char *filename);
typedef void (*PPDMarkDefaults)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*PPDClose)(ppd_file_t *ppd);
typedef int (*PPDMarkOption)(ppd_file_t *ppd, const char *keyword, const char *option);
typedef void (*CupsFreeOptions)(int num_options, cups_option_t *options);
typedef void (*CupsSetDests)(int num_dests, cups_dest_t *dests);
typedef cups_lang_t* (*CupsLangGet)(const char *language);
typedef const char* (*CupsLangEncoding)(cups_lang_t *language);
typedef int (*CupsAddOption)(const char *name, const char *value, int num_options, cups_option_t **options);
typedef int (*CupsTempFd)(char *name, int len);
typedef int (*CupsPrintFile)(const char * name, const char * filename, const char * title, int num_options, cups_option_t * options);
static bool cupsLoaded = false;
static int qt_cups_num_printers = 0;
static CupsGetDests _cupsGetDests = 0;
static CupsFreeDests _cupsFreeDests = 0;
static CupsGetPPD _cupsGetPPD = 0;
static PPDOpenFile _ppdOpenFile = 0;
static PPDMarkDefaults _ppdMarkDefaults = 0;
static PPDClose _ppdClose = 0;
static CupsMarkOptions _cupsMarkOptions = 0;
static PPDMarkOption _ppdMarkOption = 0;
static CupsFreeOptions _cupsFreeOptions = 0;
static CupsSetDests _cupsSetDests = 0;
static CupsLangGet _cupsLangGet = 0;
static CupsLangEncoding _cupsLangEncoding = 0;
static CupsAddOption _cupsAddOption = 0;
static CupsTempFd _cupsTempFd = 0;
static CupsPrintFile _cupsPrintFile = 0;</code></pre><p>Qt的QPrinter打印对话框中的属性设置实际上就是调用的QCUPSSupport来设置的属性，对于程序员来讲，只需要关心QCUPSSupport外边暴露的接口就可以了。</p>
<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><p>实际上QCUPSSupport在使用中还是有两个比较严重的问题，但是都不是Qt的锅，基本上都是CUPS的问题</p>
<h2 id="QCUPSSupport初始化过慢"><a href="#QCUPSSupport初始化过慢" class="headerlink" title="QCUPSSupport初始化过慢"></a>QCUPSSupport初始化过慢</h2><p>QCUPSSupport初始化过慢，慢到了解析ppd驱动文件上。相应的QPrinter的构造函数也比较慢，所以尽量要申请一个QPrinter的变量来控制打印机属性，或者少用。当然这是代码设计的问题了。</p>
<h2 id="ppdMarkOption"><a href="#ppdMarkOption" class="headerlink" title="_ppdMarkOption"></a>_ppdMarkOption</h2><p>_ppdMarkOption 这个函数是设置打印机属性的。成功返回0，失败返回非0。</p>
<p>ppd驱动文件中有很多打印机的属性设置。</p>
<p>有的打印机某几个选项是冲突的，比如有的打印机可以设置A5纸张，但是不能同时设置双面打印。如果同时设置，实际上是设置失效的。比如，这时候，你先设置好了纸张大小A5，这时候再去设置打印机属性双面长边打印。这时候_ppdMarkOption是返回非0。（也就是这个设置失败了）。但是，敲重点，但是，即使设置错误，双面打印的属性依旧设置到了该打印机中，这时候再去打印，实际上是不会双面打印出来的。</p>
<p>上Github上看了看 CUPS中 _ppdMarkOption的实现源码，发现这个函数设计就是这样的,即使设置失败也不会设置回去原来的值。这样只能由我们调用者去兼容这个恶心的函数接口了。</p>
<h1 id="至于为啥没有上Qt5的源码"><a href="#至于为啥没有上Qt5的源码" class="headerlink" title="至于为啥没有上Qt5的源码"></a>至于为啥没有上Qt5的源码</h1><p>Qt5的工程结构已经变了cups的代码一部分呢已经放到qpainter里了。原理没变。</p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: QPrinter
op=>operation: QCUPSSupport
op1=>operation: CUPS
e=>end: Linux Core

st->op->op1->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下sh终端启动代理</title>
    <url>/2020/06/27/linux-xia-sh-zhong-duan-qi-dong-dai-li/</url>
    <content><![CDATA[<pre><code>export ALL_PROXY=socks5://127.0.0.1:1080</code></pre><p>临时启用下，老家这个破网clone不了github的代码。</p>
<p>—-应该也可以下pdfium的编译工具链了，又给自己挖了一个大坑</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>QApplication::setGraphicsSystem</title>
    <url>/2020/06/27/qapplication-setgraphicssystem/</url>
    <content><![CDATA[<h2 id="QApplication-setGraphicsSystem-QString"><a href="#QApplication-setGraphicsSystem-QString" class="headerlink" title="QApplication::setGraphicsSystem(QString )"></a>QApplication::setGraphicsSystem(QString )</h2><p>这个函数是整个application全局的设置，主要是设置全局文字，图像的绘制引擎。</p>
<p>绘制引擎大家都知道，选择好的绘制引擎对于程序的提升是非常大的。</p>
<p>其中有三个值可以设置</p>
<ul>
<li>native: 本地引擎</li>
<li>raster：QT自带光栅引擎</li>
<li>opengl: 需开发板支持</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><p>这个函数需要QApplication构造函数之前调用</p>
</li>
<li><p>5.11中这个函数已经被废弃掉</p>
</li>
<li><p>opengl需要本地支持</p>
</li>
<li><p>x11下本地引擎比较慢，最好使用raster。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>QFontDatabase: Cannot find font directory</title>
    <url>/2020/06/27/qfontdatabase-cannot-find-font-directory/</url>
    <content><![CDATA[<p>QFontDatabase: Cannot find font directory qt5 </p>
<p>按照提示，在安装目录中 lib文件夹下新建个fonts文件夹，把字体拷贝进去就行。</p>
<pre class=" language-cpp"><code class="language-cpp">QString fontPath <span class="token operator">=</span> <span class="token string">":/fonts/MyFont.ttf"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fontId <span class="token operator">=</span> QFontDatabase<span class="token operator">::</span><span class="token function">addApplicationFont</span><span class="token punctuation">(</span>fontPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>fontId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QFont <span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"MyFont"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>QFontDatabase</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt中报错error: allocation of incomplete type &#39;Ui::‘</title>
    <url>/2020/06/27/qt-zhong-bao-cuo-error-allocation-of-incomplete-type-ui/</url>
    <content><![CDATA[<p>每次在Qt中单独添加UI文件的时候，都会遇到这个问题。需要注意这么几点<br>切记要与类名保持一致<br>举个栗子我的类名叫</p>
<pre><code>CMainWidget</code></pre><p>那我的文件名就叫</p>
<pre><code>cmainwidget.h
cmainwidget.cpp</code></pre><p>那需要在cmainwidget.h头文件中添加</p>
<pre><code>namespace Ui {
class cmainwidget;
}</code></pre><p>在cmainwidget.cpp添加</p>
<pre><code>#include &quot;ui_cmainwidget.h&quot;</code></pre><p>添加私有成员变量</p>
<pre><code>private:
    Ui::cmainwidget* ui;</code></pre><p>初始化成员变量</p>
<pre><code>    ui(new Ui::cmainwidget)</code></pre><p>构造函数中</p>
<pre><code>    ui-&gt;setupUi(this);</code></pre><h2 id="最重要的一点"><a href="#最重要的一点" class="headerlink" title="最重要的一点"></a>最重要的一点</h2><p><em>最后一条，别忘了把cmainwidget.ui中的widget名字改成cmainwidget，这个最重要！</em></p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro18 gnome KDE xfce 基础配置流程</title>
    <url>/2020/06/27/manjaro18-gnome-kde-xfce-ji-chu-pei-zhi-liu-cheng/</url>
    <content><![CDATA[<h3 id="首先更换国内源"><a href="#首先更换国内源" class="headerlink" title="首先更换国内源"></a>首先更换国内源</h3><pre><code>sudo pacman -Syy
sudo pacman-mirrors -i -c China -m rank  #选一个清华源就行
sudo pacman -Syyu</code></pre><h3 id="先安装vim"><a href="#先安装vim" class="headerlink" title="先安装vim"></a>先安装vim</h3><pre><code>sudo pacman -S vim</code></pre><h3 id="添加arch源"><a href="#添加arch源" class="headerlink" title="添加arch源"></a>添加arch源</h3><pre><code>sudo vim /etc/pacman.conf</code></pre><p>把下边这个添加进去</p>
<pre><code>[archlinuxcn]
SigLevel = Optional TrustedOnly
Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</code></pre><p>然后</p>
<pre><code>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></pre><h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><pre><code>sudo pacman -S git
sudo pacman -S zsh
sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
chsh -s /bin/zsha</code></pre><h3 id="更换输入法"><a href="#更换输入法" class="headerlink" title="更换输入法"></a>更换输入法</h3><pre><code>sudo pacman -S fcitx-sogoupinyin
sudo pacman -S fcitx-im # 全部安装
sudo pacman -S fcitx-configtool # 图形化配置工具
</code></pre><p>设置中文输入法环境变量，编辑~/.xprofile文件，增加下面几行(如果文件不存在，则新建)</p>
<pre><code>export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=&quot;@im=fcitx&quot;</code></pre><h3 id="然后安装我常用的软件"><a href="#然后安装我常用的软件" class="headerlink" title="然后安装我常用的软件"></a>然后安装我常用的软件</h3><pre><code>sudo pacman -Sy yaourt
sudo pacman -S archlinuxcn-keyring
sudo pacman -S wiznote #为知笔记
sudo pacman -S shadowsocks-qt5 # 和谐上网必备
sudo pacman -S qtcreator # 牛逼的IDE
sudo pacman -S visual-studio-code-bin # vscode
sudo pacman -S make # 牛逼的工具
sudo pacman -S screenfetch # 显示Linux环境工具
sudo pacman -S deepin.com.qq.office # qq
sudo pacman -S clang # 牛逼的编译器
sudo pacman -S electronic-wechat-git #微信
sudo pacman -S gdb # 默认没有
sudo pacman -S flameshot-git #截图工具
sudo pacman -S wps-office</code></pre><p>还有 我的阅读器的开发包,第一次用arch系的系统，把我的PDF阅读器的依赖也搞定了</p>
<pre><code>yaourt -S poppler-qt5</code></pre>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>KDE</tag>
        <tag>manjaro</tag>
        <tag>gnome</tag>
        <tag>xfce</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-zsh git 慢/卡顿问题解决</title>
    <url>/2020/06/27/oh-my-zsh-git-man-qia-dun-wen-ti-jie-jue/</url>
    <content><![CDATA[<h2 id="快一点"><a href="#快一点" class="headerlink" title="快一点"></a>快一点</h2><p>进入git的目录</p>
<pre><code>git config --add oh-my-zsh.hide-dirty 1</code></pre><h2 id="再快一点"><a href="#再快一点" class="headerlink" title="再快一点"></a>再快一点</h2><pre><code>git config --add oh-my-zsh.hide-status 1</code></pre>]]></content>
      <tags>
        <tag>git</tag>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileSystemWatcher无法释放的问题</title>
    <url>/2020/06/27/qfilesystemwatcher-wu-fa-shi-fang-de-wen-ti/</url>
    <content><![CDATA[<p>QFileSystemWatcher 在单例类中，不能指定父类，不能用智能指针，否则会释放不掉，发生资源竞争。<br>要这样释放。</p>
<pre class=" language-cpp"><code class="language-cpp">    QObject<span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>qApp<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">aboutToQuit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m_pCupsFileWatcher<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这是源码中的注意点</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*!
    Destroys the file system watcher.
    \note To avoid deadlocks on shutdown, all instances of QFileSystemWatcher
    need to be destroyed before QCoreApplication. Note that passing
    QCoreApplication::instance() as the parent object when creating
    QFileSystemWatcher is not sufficient.
*/</span>
QFileSystemWatcher<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QFileSystemWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>QFileSystemWatcher</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装系统出现错误failed to load ldlinux.c32</title>
    <url>/2020/06/27/linux-an-zhuang-xi-tong-chu-xian-cuo-wu-failed-to-load-ldlinux-c32/</url>
    <content><![CDATA[<p>UltraISO 刻录映像时写入方式选择”RAW”</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网速测试方法</title>
    <url>/2020/06/27/linux-wang-su-ce-shi-fang-fa/</url>
    <content><![CDATA[<pre class=" language-shell"><code class="language-shell">pip install speedtest-cli</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>CPP lambda表达式</title>
    <url>/2020/06/27/cpp-lambda-biao-da-shi/</url>
    <content><![CDATA[<p>其实一直有个疑问，就是lambda表达式捕获this变量的时候是不是引用传递。想用代码测试下是不是引用传递。生怕有拷贝构造函数啊！</p>
<pre><code>    m_test1 = 1;  //成员便来嗯
    auto fTest = [this]()
    {
        this-&gt;m_test1 = 3;
    };
    fTest();
    qDebug()&lt;&lt;this-&gt;m_test1&lt;&lt;endl;</code></pre><p>发现输出3。看来是引用传递，也就是指针传递。</p>
<p>本质this就是个指针嘛。</p>
<p>stackoverflow上有个答案总结的很好了</p>
<ul>
<li><a href="https://stackoverflow.com/questions/16323032/why-cant-i-capture-this-by-reference-this-in-lambda" target="_blank" rel="noopener">https://stackoverflow.com/questions/16323032/why-cant-i-capture-this-by-reference-this-in-lambda</a></li>
</ul>
]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>QImage 增加 Format_Grayscale8 枚举值</title>
    <url>/2020/06/27/qimage-zeng-jia-format-grayscale8-mei-ju-zhi/</url>
    <content><![CDATA[<p>Qt5.5之后才支持这个东西。所以我一直推荐使用高版本的Qt。</p>
<p>Qt中的commit记录 </p>
<pre class=" language-shell"><code class="language-shell">d84a6eab5129ba29951a7ba6d82820b21cc9872e
Add Grayscale8 and Alpha8 formats to QImage and drawing</code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>QImage</tag>
        <tag>Format_Grayscale8</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt元对象(Meta-Object)系统</title>
    <url>/2020/06/27/qt-yuan-dui-xiang-meta-object-xi-tong/</url>
    <content><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p> -在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。[1]用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。</p>
<p>要注意术语“反射”和“内省”（type introspection）的关系。内省（或称“自省”）机制仅指程序在运行时对自身信息（称为元数据）的检测；反射机制不仅包括要能在运行时对程序自身信息进行检测，还要求程序能进一步根据这些信息改变程序状态或结构。</p>
<h2 id="C-的反射"><a href="#C-的反射" class="headerlink" title="C++的反射"></a>C++的反射</h2><p>C++的标准语法是不提供反射的特性的，不过随着C++17的定稿，估计这个关键词不会加到标准中了。不过这个我们可以用template来实现，这次就不写template了。今天主要是讲的是Qt。</p>
<h2 id="Qt的反射"><a href="#Qt的反射" class="headerlink" title="Qt的反射"></a>Qt的反射</h2><p>Qt最大的特点就是增加了moc的过程，个人理解，Qt扩展了C++的语法，以及增强了自己的基本库。</p>
<blockquote>
<p>Meta Object System is a part of Qt framework core provided to support Qt extensions to C++ like signals/slots for inter-object communication, run-time type information, and the dynamic property system.[1]<br>Architecture<br>The Meta object system consists of 3 things: QObject class, Q_OBJECT macro and a tool called moc (Meta-Object Compiler). QObject is the base class for all Qt classes, Q_OBJECT macro is used to enable meta-object features in classes and finally moc is a preprocessor that changes Q_OBJECT macro instances to C++ source code to enable meta object system mechanism in the class in which it is used.[2]<br>Using the meta object system has brought some criticism. In Qt documentation, several reasons have been given for the use of the meta object system, including benefits of code generation, dynamism of GUIs, automatic binding to scripting languages, not adding limitations and also reasonable performance in signal/slot implementation with moc.[3] There are some efforts to make Qt needless of a preprocessor. These efforts include re-implementing Qt moc using libclang.[4] </p>
</blockquote>
<p>moc可以理解将Qt中的一些关键词，比如Q_Object ，Q_PROPERTY等转化为c++的基本语法，所以我们在编译Qt的工程时，首先要qmake-&gt;make。</p>
<p>个人认为Qt有两个我比较看重的特点。</p>
<ul>
<li>STL基础库的扩展。</li>
<li>C++基本语法与特性的扩展。</li>
</ul>
<p>尤其是基本语法的扩展，比如信号槽，元对象系统，让C++一个静态语言有了动态语言的特性（当然你也可以用template来实现，但是这玩意儿一般人又用不起，而且写起来也比较恶心）。这一点我就可以吹爆了。</p>
<p>下边开始讲Qt的反射。Qt的反射是基于Qt的元对象系统的。当然Qt还不能做到像java那样通过类名来创建一个对象，这个需要我们自己写一个工厂模式。个人认为，除了这一点，与java中的反射没有啥区别了。都可以动态的去访问其成员变量，成员函数，以及设置属性。当然必须加上Qt自己的语法。</p>
<p>举个栗子</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//1 .继承 QObject </span>
<span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token operator">:</span> <span class="token keyword">public</span> QObject
<span class="token punctuation">{</span>
    Q_OBJECT <span class="token comment" spellcheck="true">// 2.声明Q_OBJECT</span>
    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span>QString text READ text WRITE setText NOTIFY textChange<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3. Q_PROPERTY 注册成员变量</span>
    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span>QString text MEMBER m_text NOTIFY textChange<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4. 注册的成员变量能够响应自定义的signals textChange</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">TestObject</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//------</span>
    Q_INVOKABLE QString <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5.注册类的成员函数</span>
    Q_INVOKABLE <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> strText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5.注册类的成员函数</span>
    QString m_text<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类的成员变量</span>
signals<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">textChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自定义的signals</span>
<span class="token keyword">public</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">textslot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"textslot"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//自定义的signals响应的槽函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//cpp</span>
TestObject<span class="token operator">::</span><span class="token function">TestObject</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QObject</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token string">"TestObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">textChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">textslot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
TestObject<span class="token operator">::</span><span class="token operator">~</span><span class="token function">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> TestObject<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"*********************"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"init"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QString TestObject<span class="token operator">::</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> m_text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> TestObject<span class="token operator">::</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString<span class="token operator">&amp;</span> strText<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_text <span class="token operator">==</span> strText<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    m_text <span class="token operator">=</span> strText<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//    emit textChange(); //有了第四条这个语句已经不需要了。</span>
<span class="token punctuation">}</span></code></pre>
<p>这里看调用方法</p>
<pre><code>    TestObject* obj = new TestObject(this);  // new一个对象

    qDebug()&lt;&lt;obj-&gt;objectName()&lt;&lt;endl; //输出对象的名字
    // custom object property
    obj-&gt;setProperty(&quot;text&quot;, &quot;hahaha&quot;);    //设置对象的属性
    qDebug()&lt;&lt;obj-&gt;property(&quot;text&quot;).toString()&lt;&lt;endl; //输出对象的属性

    //得到注册的类成员函数
    qDebug()&lt;&lt;&quot;begin--------------------custom class method&quot;&lt;&lt;endl;
    const QMetaObject* mobj = obj-&gt;metaObject();

    qDebug()&lt;&lt;mobj-&gt;methodCount()&lt;&lt;endl;
    for(int i = 0; i &lt; mobj-&gt;methodCount(); i++)
    {
        QMetaMethod mMethod = mobj-&gt;method(i);
        QByteArray byteArray = mMethod.name();
        //输出函数类型与函数名称
        qDebug()&lt;&lt;mMethod.typeName()&lt;&lt;&quot;-&gt;&quot;&lt;&lt;QString(byteArray)&lt;&lt;endl; 
    }
    qDebug()&lt;&lt;&quot;end----------------------custom class method&quot;&lt;&lt;endl;

    //调用注册的成员函数，通过Q_RETURN_ARG来获取返回值
    qDebug()&lt;&lt;&quot;begin    QMetaObject::invokeMethod&quot;&lt;&lt;endl;
    QString invokeString;
    //调用类的成员函数
    QMetaObject::invokeMethod(obj, &quot;text&quot;, Qt::DirectConnection, Q_RETURN_ARG(QString, invokeString));
    qDebug()&lt;&lt;invokeString&lt;&lt;endl;
    qDebug()&lt;&lt;&quot;end            QMetaObject::invokeMethod&quot;&lt;&lt;endl;

    // 再次设置text值，可以响应这个信号，可以参考4
    obj-&gt;setProperty(&quot;text&quot;, &quot;luelueluelue&quot;);</code></pre><p>看上边的代码，C++能够随时获取当前类的成员变量与成员函数以及调用。(并不是通过C++的type id)这就是反射。反射在写GUI的时候是非常有用的。也就是我们可以随时获取当前对象的任何我们想要的属性以及想要调用的函数。静态语言有了动态语言的特性。这就是Qt强大的地方。</p>
<h2 id="Qt通过类名来实现真正的反射"><a href="#Qt通过类名来实现真正的反射" class="headerlink" title="Qt通过类名来实现真正的反射"></a>Qt通过类名来实现真正的反射</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QByteArray></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMetaObject></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QHash></span></span>

<span class="token macro property">#<span class="token directive keyword">ifndef</span> OBJECTFACTORY_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> OBJECTFACTORY_H</span>

<span class="token keyword">class</span> <span class="token class-name">ObjectFactory</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">constructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> T<span class="token operator">::</span>staticMetaObject<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>constructorHelper<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> QObject<span class="token operator">*</span> <span class="token function">createObject</span><span class="token punctuation">(</span> <span class="token keyword">const</span> QByteArray<span class="token operator">&amp;</span> className<span class="token punctuation">,</span> QObject<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Constructor constructor <span class="token operator">=</span> <span class="token function">constructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span> className <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> constructor <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>constructor<span class="token punctuation">)</span><span class="token punctuation">(</span> parent <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> QObject<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>Constructor<span class="token punctuation">)</span><span class="token punctuation">(</span> QObject<span class="token operator">*</span> parent <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>
    <span class="token keyword">static</span> QObject<span class="token operator">*</span> <span class="token function">constructorHelper</span><span class="token punctuation">(</span> QObject<span class="token operator">*</span> parent <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span> parent <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> QHash<span class="token operator">&lt;</span>QByteArray<span class="token punctuation">,</span> Constructor<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token function">constructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> QHash<span class="token operator">&lt;</span>QByteArray<span class="token punctuation">,</span> Constructor<span class="token operator">></span> instance<span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// OBJECTFACTORY_H</span></code></pre>
<p>下边是使用方法。todo ，这个东西应该写成单例模式的。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//使用方法</span>
    ObjectFactory fac<span class="token punctuation">;</span>
    fac<span class="token punctuation">.</span>registerClass<span class="token operator">&lt;</span>TestObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"begin-------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    TestObject<span class="token operator">*</span> object <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>TestObject<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>fac<span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span> <span class="token string">"TestObject"</span> <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    object<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"template factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>元对象</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>lp指令</title>
    <url>/2020/06/27/lp-zhi-ling/</url>
    <content><![CDATA[<h2 id="lp指令详解"><a href="#lp指令详解" class="headerlink" title="lp指令详解"></a>lp指令详解</h2><p><a href="https://www.computerhope.com/unix/ulp.htm#co" target="_blank" rel="noopener">https://www.computerhope.com/unix/ulp.htm#co</a>   </p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>暂时用这个来</p>
<pre class=" language-shell"><code class="language-shell">lp -o copies=2 -o collate=false -o sides=two-sided-long-edge ~/桌面/1.pdf</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>lp</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>scp的使用方法</title>
    <url>/2020/06/27/scp-de-shi-yong-fang-fa/</url>
    <content><![CDATA[<p>每次往服务器传patch都有点小忘（主要是传的少=。=）</p>
<p>从服务器往下</p>
<pre><code>scp -P 端口号 服务器地址 本地地址</code></pre><p>从本地上传到服务器</p>
<pre><code>scp -P 26399 本地地址 服务器地址</code></pre>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>pro工程转vs工程</title>
    <url>/2020/06/27/pro-gong-cheng-zhuan-vs-gong-cheng/</url>
    <content><![CDATA[<ul>
<li>找到vs的x86 native tool</li>
<li>qmake添加到系统环境变量</li>
<li>进入pro文件目录</li>
<li>qmake -tp vc xxxx.pro</li>
</ul>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>qmake</tag>
        <tag>pro</tag>
        <tag>vs</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt源码剖析绘制文字原理(Linux)</title>
    <url>/2020/06/27/qt-yuan-ma-pou-xi-hui-zhi-wen-zi-yuan-li-linux/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Qt在Linux绘制字体是使用的FreeType。</p>
<blockquote>
<p>FreeType是一个用C语言实现的一个字体光栅化库。它可以用来将字符栅格化并映射成位图以及提供其他字体相关业务的支持。<br>FreeType并不提供API以运行更高级的功能，如文字布局或图形处理（例如彩色文本渲染、“空洞化”等）。然而，它提供了一个简单、易用并统一的接口来访问字体文件的内容，从而极大地简化了这些任务。它支持各种字体格式，包括TrueType、Type 1、以及OpenType。<br>FreeType在两个自由软件许可证的许可下发布：GNU通用公共许可证或者以及一个类BSD许可证。因此这个库能够使用于任何类型的项目中，无论其是否是专有软件。同时也包括正在使用的主要自由桌面系统软件。 </p>
</blockquote>
<p>流程很简单，Qt在绘制字体时，首先将字体中的描述点以及字形信息保存到QPainterPath中。然后再绘制出来。</p>
<p>下面的代码是我从Qt中扣出来了，这是Qt具体描点到Path的过程，Qt在绘制大号字体的时候会调用下面的逻辑</p>
<p>下面上代码</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>pro文件中加</p>
<pre class=" language-cpp"><code class="language-cpp">LIBS <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">-</span>lfreetype
INCLUDEPATH <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>freetype2</code></pre>
<p>头文件</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;freetype2/ft2build.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;freetype2/freetype/freetype.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;freetype/freetype.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;freetype/ftoutln.h></span></span></code></pre>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">scaleOutline</span><span class="token punctuation">(</span>FT_Face face<span class="token punctuation">,</span> FT_GlyphSlot g<span class="token punctuation">,</span> FT_Fixed x_scale<span class="token punctuation">,</span> FT_Fixed y_scale<span class="token punctuation">,</span> QVector<span class="token operator">&lt;</span>QPoint<span class="token operator">></span><span class="token operator">&amp;</span> vectors<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    x_scale <span class="token operator">=</span> <span class="token function">FT_MulDiv</span><span class="token punctuation">(</span>x_scale<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> face<span class="token operator">-</span><span class="token operator">></span>units_per_EM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    y_scale <span class="token operator">=</span> <span class="token function">FT_MulDiv</span><span class="token punctuation">(</span>y_scale<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> face<span class="token operator">-</span><span class="token operator">></span>units_per_EM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FT_Vector <span class="token operator">*</span>p <span class="token operator">=</span> g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">;</span>
    <span class="token keyword">const</span> FT_Vector <span class="token operator">*</span>e <span class="token operator">=</span> p <span class="token operator">+</span> g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>n_points<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token operator">-</span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token function">FT_MulFix</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">,</span> x_scale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">-</span><span class="token operator">></span>y <span class="token operator">=</span> <span class="token function">FT_MulFix</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">,</span> y_scale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vectors<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">QPoint</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>x<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token operator">></span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 将字形中的</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GLYPH2PATH_DEBUG QT_NO_QDEBUG_MACRO </span><span class="token comment" spellcheck="true">// qDebug</span>
<span class="token keyword">void</span> <span class="token function">addGlyphToPath</span><span class="token punctuation">(</span>FT_Face face<span class="token punctuation">,</span> FT_GlyphSlot g<span class="token punctuation">,</span> <span class="token keyword">const</span> QFixedPoint <span class="token operator">&amp;</span>point<span class="token punctuation">,</span> QPainterPath <span class="token operator">*</span>path<span class="token punctuation">,</span> FT_Fixed x_scale<span class="token punctuation">,</span> FT_Fixed y_scale<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> qreal factor <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">64</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    QVector<span class="token operator">&lt;</span>QPoint<span class="token operator">></span> vectors<span class="token punctuation">;</span>
    <span class="token function">scaleOutline</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x_scale<span class="token punctuation">,</span> y_scale<span class="token punctuation">,</span> vectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//</span>
    <span class="token keyword">int</span> xMin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> xMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">foreach</span> <span class="token punctuation">(</span>QPoint point<span class="token punctuation">,</span> vectors<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> xMax<span class="token punctuation">)</span>
            xMax <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> xMin<span class="token punctuation">)</span>
            xMin <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> glyphWidth <span class="token operator">=</span> xMax <span class="token operator">-</span> xMin<span class="token punctuation">;</span>
    QPointF cp <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">toPointF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// convert the outline to a painter path</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>n_contours<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> last_point <span class="token operator">=</span> g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>contours<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"contour:"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"to"</span> <span class="token operator">&lt;&lt;</span> last_point<span class="token punctuation">;</span>
        QPointF start <span class="token operator">=</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>factor<span class="token punctuation">,</span> <span class="token operator">-</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>factor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// start point is not on curve:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>tags<span class="token punctuation">[</span>last_point<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// end point is not on curve:</span>
                <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" start and end point are not on curve"</span><span class="token punctuation">;</span>
                start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>last_point<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>factor<span class="token punctuation">,</span>
                                <span class="token operator">-</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>last_point<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>factor<span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" end point is on curve, start is not"</span><span class="token punctuation">;</span>
                start <span class="token operator">=</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>last_point<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>factor<span class="token punctuation">,</span>
                               <span class="token operator">-</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>last_point<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>factor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token operator">--</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to use original start point as control point below</span>
        <span class="token punctuation">}</span>
        start <span class="token operator">+</span><span class="token operator">=</span> cp<span class="token punctuation">;</span>
        <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" start at"</span> <span class="token operator">&lt;&lt;</span> start<span class="token punctuation">;</span>
        path<span class="token operator">-</span><span class="token operator">></span><span class="token function">moveTo</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        QPointF c<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> last_point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span>i<span class="token punctuation">;</span>
            c<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> cp <span class="token operator">+</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">*</span>factor<span class="token punctuation">,</span> <span class="token operator">-</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">*</span>factor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"tag ="</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                               <span class="token operator">&lt;&lt;</span> <span class="token string">": on curve ="</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>n<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">.</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token comment" spellcheck="true">// cubic bezier element</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">--</span>i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token comment" spellcheck="true">// quadratic bezier element</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
                c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
                c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
                <span class="token operator">--</span>i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" lineTo"</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    path<span class="token operator">-</span><span class="token operator">></span><span class="token function">lineTo</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
                    c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" cubicTo"</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            path<span class="token operator">-</span><span class="token operator">></span><span class="token function">cubicTo</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" closeSubpath"</span><span class="token punctuation">;</span>
            path<span class="token operator">-</span><span class="token operator">></span><span class="token function">closeSubpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
                c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">GLYPH2PATH_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" close cubicTo"</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            path<span class="token operator">-</span><span class="token operator">></span><span class="token function">cubicTo</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">///////////////////</span>

    <span class="token comment" spellcheck="true">//这里是调用freetype相关的函数</span>

    QPainterPath path<span class="token punctuation">;</span>
    FT_Library library<span class="token punctuation">;</span>
    FT_Face face<span class="token punctuation">;</span>
    FT_Error error <span class="token operator">=</span> <span class="token function">FT_Init_FreeType</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>library <span class="token punctuation">)</span><span class="token punctuation">;</span>
    QString strFileName <span class="token operator">=</span> QString<span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"/home/zhangpf/freeType/FZXBSJW_0.TTF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>string strFile <span class="token operator">=</span> strFileName<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName <span class="token operator">=</span> strFile<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    error <span class="token operator">=</span> <span class="token function">FT_New_Face</span><span class="token punctuation">(</span>library<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>face <span class="token punctuation">)</span><span class="token punctuation">;</span>
    uint ch <span class="token operator">=</span> <span class="token string">'h'</span><span class="token punctuation">;</span>
    FT_UInt idxGlyph <span class="token operator">=</span> <span class="token function">FT_Get_Char_Index</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FT_Set_Char_Size</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> face<span class="token operator">-</span><span class="token operator">></span>units_per_EM <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> face<span class="token operator">-</span><span class="token operator">></span>units_per_EM <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 这是斜体</span>
<span class="token comment" spellcheck="true">//    FT_Matrix matrix;</span>
<span class="token comment" spellcheck="true">//    double angle = ( 25.0 / 360 ) * 3.14159 * 2; // 180/12=15 度</span>
<span class="token comment" spellcheck="true">//    matrix.xx = (FT_Fixed)(cos(angle) * 0x10000);</span>
<span class="token comment" spellcheck="true">//    matrix.xy = (FT_Fixed)(-sin(angle) * 0x10000);</span>
<span class="token comment" spellcheck="true">//    matrix.yx = (FT_Fixed)(sin(angle) * 0x10000);</span>
<span class="token comment" spellcheck="true">//    matrix.yy = (FT_Fixed)(cos(angle) * 0x10000);</span>
<span class="token comment" spellcheck="true">//    FT_Set_Transform(face, &amp;matrix, 0); // 设置或重置旋转</span>
    FT_Error err <span class="token operator">=</span> <span class="token function">FT_Load_Glyph</span> <span class="token punctuation">(</span>face<span class="token punctuation">,</span> idxGlyph<span class="token punctuation">,</span> FT_LOAD_NO_BITMAP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FT_BBox bbox <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">FT_Outline_Get_CBox</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>face<span class="token operator">-</span><span class="token operator">></span>glyph<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* only oblique outline glyphs */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> face<span class="token operator">-</span><span class="token operator">></span>glyph<span class="token operator">-</span><span class="token operator">></span>format <span class="token operator">!=</span> FT_GLYPH_FORMAT_OUTLINE <span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 用这个也可以缩放一半</span>
<span class="token comment" spellcheck="true">//    FT_Outline* outline = &amp;(face->glyph->outline);</span>
<span class="token comment" spellcheck="true">//    FT_Matrix transform;</span>
<span class="token comment" spellcheck="true">//    transform.xx = 0x10000L * 0.5;</span>
<span class="token comment" spellcheck="true">//    transform.yx = 0x00000L;</span>
<span class="token comment" spellcheck="true">//    transform.xy = 0x00000L;</span>
<span class="token comment" spellcheck="true">//    transform.yy = 0x10000L;</span>
<span class="token comment" spellcheck="true">//    FT_Outline_Transform( outline, &amp;transform );</span>
    QFixedPoint p<span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FT_IS_SCALABLE</span><span class="token punctuation">(</span>face<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"123"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        <span class="token function">addGlyphToPath</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> face<span class="token operator">-</span><span class="token operator">></span>glyph<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span>face<span class="token operator">-</span><span class="token operator">></span>units_per_EM <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> face<span class="token operator">-</span><span class="token operator">></span>units_per_EM <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//宽度缩放一半</span></code></pre>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>最后在paintevent中可以绘制出来，由于字形的point中有负数，painter需要transform一下</p>
<pre class=" language-cpp"><code class="language-cpp">    QPainter <span class="token function">painter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    QTransform transform<span class="token punctuation">;</span>
    transform<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    painter<span class="token punctuation">.</span><span class="token function">setTransform</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>
    painter<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这是Qt绘制文字的一部分逻辑，我扣出来Demo来给大家学习。主要是使用了QPainterPath来描述字体中的点，以及保存成字体中的贝塞尔曲线。生成QPainterPath来描述具体的字形。代码中我还添加了缩放的变形，实际上字体的绘制变形有很多方法。就拿缩放来讲，就有这么几种</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 用这个也可以缩放一半</span>
FT_Outline<span class="token operator">*</span> outline <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>face<span class="token operator">-</span><span class="token operator">></span>glyph<span class="token operator">-</span><span class="token operator">></span>outline<span class="token punctuation">)</span><span class="token punctuation">;</span>
FT_Matrix transform<span class="token punctuation">;</span>
transform<span class="token punctuation">.</span>xx <span class="token operator">=</span> <span class="token number">0x10000L</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
transform<span class="token punctuation">.</span>yx <span class="token operator">=</span> <span class="token number">0x00000L</span><span class="token punctuation">;</span>
transform<span class="token punctuation">.</span>xy <span class="token operator">=</span> <span class="token number">0x00000L</span><span class="token punctuation">;</span>
transform<span class="token punctuation">.</span>yy <span class="token operator">=</span> <span class="token number">0x10000L</span><span class="token punctuation">;</span>
 <span class="token function">FT_Outline_Transform</span><span class="token punctuation">(</span> outline<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 这是斜体实现，matrix.xx * 0.5 可以缩放 0.5倍</span>
FT_Matrix matrix<span class="token punctuation">;</span>
<span class="token keyword">double</span> angle <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">25.0</span> <span class="token operator">/</span> <span class="token number">360</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25 度</span>
matrix<span class="token punctuation">.</span>xx <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
matrix<span class="token punctuation">.</span>xy <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
matrix<span class="token punctuation">.</span>yx <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
matrix<span class="token punctuation">.</span>yy <span class="token operator">=</span> <span class="token punctuation">(</span>FT_Fixed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">FT_Set_Transform</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> <span class="token operator">&amp;</span>matrix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置或重置旋转</span>

<span class="token comment" spellcheck="true">//甚至可以在 点->path这一步来做   (face->units_per_EM &lt;&lt; 6) / 2,</span>
 <span class="token comment" spellcheck="true">//addGlyphToPath(face, face->glyph, p, &amp;path, (face->units_per_EM &lt;&lt; 6) / 2, face->units_per_EM &lt;&lt; 6);  //宽度缩放一半</span>
 <span class="token punctuation">(</span>face<span class="token operator">-</span><span class="token operator">></span>units_per_EM <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span></code></pre>
<p>所以大部分UI库都有自己的实现方法。这也是freetype灵活的地方.</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Qt源码</tag>
        <tag>Qt源码剖析</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt在Linux下Wayland桌面上抓取桌面的一个坑</title>
    <url>/2020/06/27/qt-zai-linux-xia-wayland-zhuo-mian-shang-zhua-qu-zhuo-mian-de-yi-ge-keng/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近WPS在适配了下Wayland的桌面环境，不得不说Gnome下的wayland比KDE的wayland的要稳定的多，然而，还是遇到了一些小坑，这里记录下。</p>
<blockquote>
<p>Wayland只是一个协议（Protocol），就像X Window当前的协议——X11一样，它只定义了如何与内核通讯、如何与Client通讯，具体的策略，依然是交给开发者自己。所以Wayland依然 是贯彻“提供机制，而非策略”的Unix程序。</p>
</blockquote>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>先说问题，我这边发现调用Qt的抓屏函数<code>screen-&gt;grabWindow</code>，发现截图出来是黑的。具体表现就是WPS的截图功能无效；</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>由于安全原因，Wayland下不支持非系统的软件截桌面的图</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>但是我这边看过一个开源的截图工具，在wayland下的解决方案是调用系统的<br><a href="https://github.com/lupoDharkael/flameshot/blob/b0326bcb6cb5ed5048e5574c682fce75cbfa7bbe/src/utils/screengrabber.cpp#L47" target="_blank" rel="noopener">https://github.com/lupoDharkael/flameshot/blob/b0326bcb6cb5ed5048e5574c682fce75cbfa7bbe/src/utils/screengrabber.cpp#L47</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_LINUX</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m_info<span class="token punctuation">.</span><span class="token function">waylandDectected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QPixmap res<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// handle screenshot based on DE</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>m_info<span class="token punctuation">.</span><span class="token function">windowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> DesktopInfo<span class="token operator">::</span>GNOME<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// https://github.com/GNOME/gnome-shell/blob/695bfb96160033be55cfb5ac41c121998f98c328/data/org.gnome.Shell.Screenshot.xml</span>
            QString path <span class="token operator">=</span> <span class="token function">FileNameHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateAbsolutePath</span><span class="token punctuation">(</span>QDir<span class="token operator">::</span><span class="token function">tempPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">;</span>
            QDBusInterface <span class="token function">gnomeInterface</span><span class="token punctuation">(</span><span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"org.gnome.Shell"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                          <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"/org/gnome/Shell/Screenshot"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                          <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"org.gnome.Shell.Screenshot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            QDBusReply<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> reply <span class="token operator">=</span> gnomeInterface<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Screenshot"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">case</span> DesktopInfo<span class="token operator">::</span>KDE<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// https://github.com/KDE/spectacle/blob/517a7baf46a4ca0a45f32fd3f2b1b7210b180134/src/PlatformBackends/KWinWaylandImageGrabber.cpp#L145</span>
            QDBusInterface <span class="token function">kwinInterface</span><span class="token punctuation">(</span><span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"org.kde.KWin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                         <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"/Screenshot"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                         <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"org.kde.kwin.Screenshot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            QDBusReply<span class="token operator">&lt;</span>QString<span class="token operator">></span> reply <span class="token operator">=</span> kwinInterface<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"screenshotFullscreen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">default</span><span class="token operator">:</span>
            ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">SystemNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Unable to capture screen"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Linux</tag>
        <tag>Wayland</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt编码的一个坑</title>
    <url>/2020/06/27/qt-bian-ma-de-yi-ge-keng/</url>
    <content><![CDATA[<h1 id="编码编码"><a href="#编码编码" class="headerlink" title="编码编码"></a>编码编码</h1><p>虽说上班这么多年了，昨天修复一个bug的时候还是被屎一样的代码给坑了</p>
<p>先说逻辑<br>业务本质是想把 Unicode编码转成GBK编码</p>
<pre class=" language-cpp"><code class="language-cpp">    QTextCodec<span class="token operator">*</span> codec <span class="token operator">=</span> QTextCodec<span class="token operator">::</span><span class="token function">codecForName</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ushort ss <span class="token operator">=</span> <span class="token number">23435</span><span class="token punctuation">;</span>
    QString strUn <span class="token operator">=</span> QString<span class="token operator">::</span><span class="token function">fromUtf16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>codec <span class="token operator">&amp;&amp;</span> codec<span class="token operator">-</span><span class="token operator">></span><span class="token function">canEncode</span><span class="token punctuation">(</span>strUn<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        QString gStr <span class="token operator">=</span> codec<span class="token operator">-</span><span class="token operator">></span><span class="token function">fromUnicode</span><span class="token punctuation">(</span>strUn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token operator">::</span>string <span class="token operator">=</span> gStr<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>在某些unix环境中，这个gStr就已经是空的了。<br>原因是 codec-&gt;fromUnicode(strUn); 返回的是QByteArray。</p>
<p>QByteArray转QString是调用的Qt的fromAscii_helper这个函数，也就是本次是gdk又强转了一次latin的编码，导致丢数据。</p>
<p>Qt中的转化代码是走的这里。 敲重点，目前QByteArray是gbk编码，但是这样强转会当做Ascii来解析，所以出现了丢数据。<br>Qt源码</p>
<pre class=" language-cpp"><code class="language-cpp">QString<span class="token operator">::</span>Data <span class="token operator">*</span>QString<span class="token operator">::</span><span class="token function">fromAscii_helper</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
</code></pre>
<p>具体到WPS的某个功能的话我就懒得吐槽了，反正这么多年windows也一直没事儿。逃)</p>
<h1 id="toStdString"><a href="#toStdString" class="headerlink" title="toStdString"></a>toStdString</h1><p>这个函数也慎用，不管你是啥编码的QString，这样导出最后也是会当做ascii来转，也会出现乱码或者丢数据，慎用慎用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode字符范围</title>
    <url>/2020/06/27/unicode-zi-fu-fan-wei/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/m372897500/article/details/37592543" target="_blank" rel="noopener">https://blog.csdn.net/m372897500/article/details/37592543</a></p>
<table>
<thead>
<tr>
<th>十进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>十六进制</th>
<th>字符数</th>
<th>编码分类（中文）</th>
<th>编码分类（英文）</th>
</tr>
</thead>
<tbody><tr>
<td>起始</td>
<td>终止</td>
<td>起始</td>
<td>终止</td>
<td>(个)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0</td>
<td>127</td>
<td>0000</td>
<td>007F</td>
<td>128</td>
<td>C0控制符及基本拉丁文</td>
<td>C0 Control and Basic Latin</td>
</tr>
<tr>
<td>128</td>
<td>255</td>
<td>0080</td>
<td>00FF</td>
<td>128</td>
<td>C1控制符及拉丁文补充-1</td>
<td>C1 Control and Latin 1 Supplement</td>
</tr>
<tr>
<td>256</td>
<td>383</td>
<td>0100</td>
<td>017F</td>
<td>128</td>
<td>拉丁文扩展-A</td>
<td>Latin Extended-A</td>
</tr>
<tr>
<td>384</td>
<td>591</td>
<td>0180</td>
<td>024F</td>
<td>208</td>
<td>拉丁文扩展-B</td>
<td>Latin Extended-B</td>
</tr>
<tr>
<td>592</td>
<td>687</td>
<td>0250</td>
<td>02AF</td>
<td>96</td>
<td>国际音标扩展</td>
<td>IPA Extensions</td>
</tr>
<tr>
<td>688</td>
<td>767</td>
<td>02B0</td>
<td>02FF</td>
<td>80</td>
<td>空白修饰字母</td>
<td>Spacing Modifiers</td>
</tr>
<tr>
<td>768</td>
<td>879</td>
<td>0300</td>
<td>036F</td>
<td>112</td>
<td>结合用读音符号</td>
<td>Combining Diacritics Marks</td>
</tr>
<tr>
<td>880</td>
<td>1023</td>
<td>0370</td>
<td>03FF</td>
<td>144</td>
<td>希腊文及科普特文</td>
<td>Greek and Coptic</td>
</tr>
<tr>
<td>1024</td>
<td>1279</td>
<td>0400</td>
<td>04FF</td>
<td>256</td>
<td>西里尔字母</td>
<td>Cyrillic</td>
</tr>
<tr>
<td>1280</td>
<td>1327</td>
<td>0500</td>
<td>052F</td>
<td>48</td>
<td>西里尔字母补充</td>
<td>Cyrillic Supplement</td>
</tr>
<tr>
<td>1328</td>
<td>1423</td>
<td>0530</td>
<td>058F</td>
<td>96</td>
<td>亚美尼亚语</td>
<td>Armenian</td>
</tr>
<tr>
<td>1424</td>
<td>1535</td>
<td>0590</td>
<td>05FF</td>
<td>112</td>
<td>希伯来文</td>
<td>Hebrew</td>
</tr>
<tr>
<td>1536</td>
<td>1791</td>
<td>0600</td>
<td>06FF</td>
<td>256</td>
<td>阿拉伯文</td>
<td>Arabic</td>
</tr>
<tr>
<td>1792</td>
<td>1871</td>
<td>0700</td>
<td>074F</td>
<td>80</td>
<td>叙利亚文</td>
<td>Syriac</td>
</tr>
<tr>
<td>1872</td>
<td>1919</td>
<td>0750</td>
<td>077F</td>
<td>48</td>
<td>阿拉伯文补充</td>
<td>Arabic Supplement</td>
</tr>
<tr>
<td>1920</td>
<td>1983</td>
<td>0780</td>
<td>07BF</td>
<td>64</td>
<td>马尔代夫语</td>
<td>Thaana</td>
</tr>
<tr>
<td>1984</td>
<td>2047</td>
<td>07C0</td>
<td>07FF</td>
<td>64</td>
<td>西非書面語言</td>
<td>N’Ko</td>
</tr>
<tr>
<td>2048</td>
<td>2143</td>
<td>0800</td>
<td>085F</td>
<td>96</td>
<td>阿维斯塔语及巴列维语</td>
<td>Avestan and Pahlavi</td>
</tr>
<tr>
<td>2144</td>
<td>2175</td>
<td>0860</td>
<td>087F</td>
<td>32</td>
<td>Mandaic</td>
<td>Mandaic</td>
</tr>
<tr>
<td>2176</td>
<td>2223</td>
<td>0880</td>
<td>08AF</td>
<td>48</td>
<td>撒马利亚语</td>
<td>Samaritan</td>
</tr>
<tr>
<td>2304</td>
<td>2431</td>
<td>0900</td>
<td>097F</td>
<td>128</td>
<td>天城文书</td>
<td>Devanagari</td>
</tr>
<tr>
<td>2432</td>
<td>2559</td>
<td>0980</td>
<td>09FF</td>
<td>128</td>
<td>孟加拉语</td>
<td>Bengali</td>
</tr>
<tr>
<td>2560</td>
<td>2687</td>
<td>0A00</td>
<td>0A7F</td>
<td>128</td>
<td>锡克教文</td>
<td>Gurmukhi</td>
</tr>
<tr>
<td>2688</td>
<td>2815</td>
<td>0A80</td>
<td>0AFF</td>
<td>128</td>
<td>古吉拉特文</td>
<td>Gujarati</td>
</tr>
<tr>
<td>2816</td>
<td>2943</td>
<td>0B00</td>
<td>0B7F</td>
<td>128</td>
<td>奥里亚文</td>
<td>Oriya</td>
</tr>
<tr>
<td>2944</td>
<td>3071</td>
<td>0B80</td>
<td>0BFF</td>
<td>128</td>
<td>泰米尔文</td>
<td>Tamil</td>
</tr>
<tr>
<td>3072</td>
<td>3199</td>
<td>0C00</td>
<td>0C7F</td>
<td>128</td>
<td>泰卢固文</td>
<td>Telugu</td>
</tr>
<tr>
<td>3200</td>
<td>3327</td>
<td>0C80</td>
<td>0CFF</td>
<td>128</td>
<td>卡纳达文</td>
<td>Kannada</td>
</tr>
<tr>
<td>3328</td>
<td>3455</td>
<td>0D00</td>
<td>0D7F</td>
<td>128</td>
<td>德拉维族语</td>
<td>Malayalam</td>
</tr>
<tr>
<td>3456</td>
<td>3583</td>
<td>0D80</td>
<td>0DFF</td>
<td>128</td>
<td>僧伽罗语</td>
<td>Sinhala</td>
</tr>
<tr>
<td>3584</td>
<td>3711</td>
<td>0E00</td>
<td>0E7F</td>
<td>128</td>
<td>泰文</td>
<td>Thai</td>
</tr>
<tr>
<td>3712</td>
<td>3839</td>
<td>0E80</td>
<td>0EFF</td>
<td>128</td>
<td>老挝文</td>
<td>Lao</td>
</tr>
<tr>
<td>3840</td>
<td>4095</td>
<td>0F00</td>
<td>0FFF</td>
<td>256</td>
<td>藏文</td>
<td>Tibetan</td>
</tr>
<tr>
<td>4096</td>
<td>4255</td>
<td>1000</td>
<td>109F</td>
<td>160</td>
<td>缅甸语</td>
<td>Myanmar</td>
</tr>
<tr>
<td>4256</td>
<td>4351</td>
<td>10A0</td>
<td>10FF</td>
<td>96</td>
<td>格鲁吉亚语</td>
<td>Georgian</td>
</tr>
<tr>
<td>4352</td>
<td>4607</td>
<td>1100</td>
<td>11FF</td>
<td>256</td>
<td>朝鲜文</td>
<td>Hangul Jamo</td>
</tr>
<tr>
<td>4608</td>
<td>4991</td>
<td>1200</td>
<td>137F</td>
<td>384</td>
<td>埃塞俄比亚语</td>
<td>Ethiopic</td>
</tr>
<tr>
<td>4992</td>
<td>5023</td>
<td>1380</td>
<td>139F</td>
<td>32</td>
<td>埃塞俄比亚语补充</td>
<td>Ethiopic Supplement</td>
</tr>
<tr>
<td>5024</td>
<td>5119</td>
<td>13A0</td>
<td>13FF</td>
<td>96</td>
<td>切罗基语</td>
<td>Cherokee</td>
</tr>
<tr>
<td>5120</td>
<td>5759</td>
<td>1400</td>
<td>167F</td>
<td>640</td>
<td>统一加拿大土著语音节</td>
<td>Unified Canadian Aboriginal Syllabics</td>
</tr>
<tr>
<td>5760</td>
<td>5791</td>
<td>1680</td>
<td>169F</td>
<td>32</td>
<td>欧甘字母</td>
<td>Ogham</td>
</tr>
<tr>
<td>5792</td>
<td>5887</td>
<td>16A0</td>
<td>16FF</td>
<td>96</td>
<td>如尼文</td>
<td>Runic</td>
</tr>
<tr>
<td>5888</td>
<td>5919</td>
<td>1700</td>
<td>171F</td>
<td>32</td>
<td>塔加拉语</td>
<td>Tagalog</td>
</tr>
<tr>
<td>5920</td>
<td>5951</td>
<td>1720</td>
<td>173F</td>
<td>32</td>
<td>Hanunóo</td>
<td>Hanunóo</td>
</tr>
<tr>
<td>5952</td>
<td>5983</td>
<td>1740</td>
<td>175F</td>
<td>32</td>
<td>Buhid</td>
<td>Buhid</td>
</tr>
<tr>
<td>5984</td>
<td>6015</td>
<td>1760</td>
<td>177F</td>
<td>32</td>
<td>Tagbanwa</td>
<td>Tagbanwa</td>
</tr>
<tr>
<td>6016</td>
<td>6143</td>
<td>1780</td>
<td>17FF</td>
<td>128</td>
<td>高棉语</td>
<td>Khmer</td>
</tr>
<tr>
<td>6144</td>
<td>6319</td>
<td>1800</td>
<td>18AF</td>
<td>176</td>
<td>蒙古文</td>
<td>Mongolian</td>
</tr>
<tr>
<td>6320</td>
<td>6399</td>
<td>18B0</td>
<td>18FF</td>
<td>80</td>
<td>Cham</td>
<td>Cham</td>
</tr>
<tr>
<td>6400</td>
<td>6479</td>
<td>1900</td>
<td>194F</td>
<td>80</td>
<td>Limbu</td>
<td>Limbu</td>
</tr>
<tr>
<td>6480</td>
<td>6527</td>
<td>1950</td>
<td>197F</td>
<td>48</td>
<td>德宏泰语</td>
<td>Tai Le</td>
</tr>
<tr>
<td>6528</td>
<td>6623</td>
<td>1980</td>
<td>19DF</td>
<td>96</td>
<td>新傣仂语</td>
<td>New Tai Lue</td>
</tr>
<tr>
<td>6624</td>
<td>6655</td>
<td>19E0</td>
<td>19FF</td>
<td>32</td>
<td>高棉语记号</td>
<td>Kmer Symbols</td>
</tr>
<tr>
<td>6656</td>
<td>6687</td>
<td>1A00</td>
<td>1A1F</td>
<td>32</td>
<td>Buginese</td>
<td>Buginese</td>
</tr>
<tr>
<td>6688</td>
<td>6751</td>
<td>1A20</td>
<td>1A5F</td>
<td>64</td>
<td>Batak</td>
<td>Batak</td>
</tr>
<tr>
<td>6784</td>
<td>6895</td>
<td>1A80</td>
<td>1AEF</td>
<td>112</td>
<td>Lanna</td>
<td>Lanna</td>
</tr>
<tr>
<td>6912</td>
<td>7039</td>
<td>1B00</td>
<td>1B7F</td>
<td>128</td>
<td>巴厘语</td>
<td>Balinese</td>
</tr>
<tr>
<td>7040</td>
<td>7088</td>
<td>1B80</td>
<td>1BB0</td>
<td>49</td>
<td>巽他语</td>
<td>Sundanese</td>
</tr>
<tr>
<td>7104</td>
<td>7167</td>
<td>1BC0</td>
<td>1BFF</td>
<td>64</td>
<td>Pahawh Hmong</td>
<td>Pahawh Hmong</td>
</tr>
<tr>
<td>7168</td>
<td>7247</td>
<td>1C00</td>
<td>1C4F</td>
<td>80</td>
<td>雷布查语</td>
<td>Lepcha</td>
</tr>
<tr>
<td>7248</td>
<td>7295</td>
<td>1C50</td>
<td>1C7F</td>
<td>48</td>
<td>Ol Chiki</td>
<td>Ol Chiki</td>
</tr>
<tr>
<td>7296</td>
<td>7391</td>
<td>1C80</td>
<td>1CDF</td>
<td>96</td>
<td>曼尼普尔语</td>
<td>Meithei/Manipuri</td>
</tr>
<tr>
<td>7424</td>
<td>7551</td>
<td>1D00</td>
<td>1D7F</td>
<td>128</td>
<td>语音学扩展</td>
<td>Phonetic Extensions</td>
</tr>
<tr>
<td>7552</td>
<td>7615</td>
<td>1D80</td>
<td>1DBF</td>
<td>64</td>
<td>语音学扩展补充</td>
<td>Phonetic Extensions Supplement</td>
</tr>
<tr>
<td>7616</td>
<td>7679</td>
<td>1DC0</td>
<td>1DFF</td>
<td>64</td>
<td>结合用读音符号补充</td>
<td>Combining Diacritics Marks Supplement</td>
</tr>
<tr>
<td>7680</td>
<td>7935</td>
<td>1E00</td>
<td>1EFF</td>
<td>256</td>
<td>拉丁文扩充附加</td>
<td>Latin Extended Additional</td>
</tr>
<tr>
<td>7936</td>
<td>8191</td>
<td>1F00</td>
<td>1FFF</td>
<td>256</td>
<td>希腊语扩充</td>
<td>Greek Extended</td>
</tr>
<tr>
<td>8192</td>
<td>8303</td>
<td>2000</td>
<td>206F</td>
<td>112</td>
<td>常用标点</td>
<td>General Punctuation</td>
</tr>
<tr>
<td>8304</td>
<td>8351</td>
<td>2070</td>
<td>209F</td>
<td>48</td>
<td>上标及下标</td>
<td>Superscripts and Subscripts</td>
</tr>
<tr>
<td>8352</td>
<td>8399</td>
<td>20A0</td>
<td>20CF</td>
<td>48</td>
<td>货币符号</td>
<td>Currency Symbols</td>
</tr>
<tr>
<td>8400</td>
<td>8447</td>
<td>20D0</td>
<td>20FF</td>
<td>48</td>
<td>组合用记号</td>
<td>Combining Diacritics Marks for Symbols</td>
</tr>
<tr>
<td>8448</td>
<td>8527</td>
<td>2100</td>
<td>214F</td>
<td>80</td>
<td>字母式符号</td>
<td>Letterlike Symbols</td>
</tr>
<tr>
<td>8528</td>
<td>8591</td>
<td>2150</td>
<td>218F</td>
<td>64</td>
<td>数字形式</td>
<td>Number Form</td>
</tr>
<tr>
<td>8592</td>
<td>8703</td>
<td>2190</td>
<td>21FF</td>
<td>112</td>
<td>箭头</td>
<td>Arrows</td>
</tr>
<tr>
<td>8704</td>
<td>8959</td>
<td>2200</td>
<td>22FF</td>
<td>256</td>
<td>数学运算符</td>
<td>Mathematical Operator</td>
</tr>
<tr>
<td>8960</td>
<td>9215</td>
<td>2300</td>
<td>23FF</td>
<td>256</td>
<td>杂项工业符号</td>
<td>Miscellaneous Technical</td>
</tr>
<tr>
<td>9216</td>
<td>9279</td>
<td>2400</td>
<td>243F</td>
<td>64</td>
<td>控制图片</td>
<td>Control Pictures</td>
</tr>
<tr>
<td>9280</td>
<td>9311</td>
<td>2440</td>
<td>245F</td>
<td>32</td>
<td>光学识别符</td>
<td>Optical Character Recognition</td>
</tr>
<tr>
<td>9312</td>
<td>9471</td>
<td>2460</td>
<td>24FF</td>
<td>160</td>
<td>封闭式字母数字</td>
<td>Enclosed Alphanumerics</td>
</tr>
<tr>
<td>9472</td>
<td>9599</td>
<td>2500</td>
<td>257F</td>
<td>128</td>
<td>制表符</td>
<td>Box Drawing</td>
</tr>
<tr>
<td>9600</td>
<td>9631</td>
<td>2580</td>
<td>259F</td>
<td>32</td>
<td>方块元素</td>
<td>Block Element</td>
</tr>
<tr>
<td>9632</td>
<td>9727</td>
<td>25A0</td>
<td>25FF</td>
<td>96</td>
<td>几何图形</td>
<td>Geometric Shapes</td>
</tr>
<tr>
<td>9728</td>
<td>9983</td>
<td>2600</td>
<td>26FF</td>
<td>256</td>
<td>杂项符号</td>
<td>Miscellaneous Symbols</td>
</tr>
<tr>
<td>9984</td>
<td>10175</td>
<td>2700</td>
<td>27BF</td>
<td>192</td>
<td>印刷符号</td>
<td>Dingbats</td>
</tr>
<tr>
<td>10176</td>
<td>10223</td>
<td>27C0</td>
<td>27EF</td>
<td>48</td>
<td>杂项数学符号-A</td>
<td>Miscellaneous Mathematical Symbols-A</td>
</tr>
<tr>
<td>10224</td>
<td>10239</td>
<td>27F0</td>
<td>27FF</td>
<td>16</td>
<td>追加箭头-A</td>
<td>Supplemental Arrows-A</td>
</tr>
<tr>
<td>10240</td>
<td>10495</td>
<td>2800</td>
<td>28FF</td>
<td>256</td>
<td>盲文点字模型</td>
<td>Braille Patterns</td>
</tr>
<tr>
<td>10496</td>
<td>10623</td>
<td>2900</td>
<td>297F</td>
<td>128</td>
<td>追加箭头-B</td>
<td>Supplemental Arrows-B</td>
</tr>
<tr>
<td>10624</td>
<td>10751</td>
<td>2980</td>
<td>29FF</td>
<td>128</td>
<td>杂项数学符号-B</td>
<td>Miscellaneous Mathematical Symbols-B</td>
</tr>
<tr>
<td>10752</td>
<td>11007</td>
<td>2A00</td>
<td>2AFF</td>
<td>256</td>
<td>追加数学运算符</td>
<td>Supplemental Mathematical Operator</td>
</tr>
<tr>
<td>11008</td>
<td>11263</td>
<td>2B00</td>
<td>2BFF</td>
<td>256</td>
<td>杂项符号和箭头</td>
<td>Miscellaneous Symbols and Arrows</td>
</tr>
<tr>
<td>11264</td>
<td>11359</td>
<td>2C00</td>
<td>2C5F</td>
<td>96</td>
<td>格拉哥里字母</td>
<td>Glagolitic</td>
</tr>
<tr>
<td>11360</td>
<td>11391</td>
<td>2C60</td>
<td>2C7F</td>
<td>32</td>
<td>拉丁文扩展-C</td>
<td>Latin Extended-C</td>
</tr>
<tr>
<td>11392</td>
<td>11519</td>
<td>2C80</td>
<td>2CFF</td>
<td>128</td>
<td>古埃及语</td>
<td>Coptic</td>
</tr>
<tr>
<td>11520</td>
<td>11567</td>
<td>2D00</td>
<td>2D2F</td>
<td>48</td>
<td>格鲁吉亚语补充</td>
<td>Georgian Supplement</td>
</tr>
<tr>
<td>11568</td>
<td>11647</td>
<td>2D30</td>
<td>2D7F</td>
<td>80</td>
<td>提非纳文</td>
<td>Tifinagh</td>
</tr>
<tr>
<td>11648</td>
<td>11743</td>
<td>2D80</td>
<td>2DDF</td>
<td>96</td>
<td>埃塞俄比亚语扩展</td>
<td>Ethiopic Extended</td>
</tr>
<tr>
<td>11776</td>
<td>11903</td>
<td>2E00</td>
<td>2E7F</td>
<td>128</td>
<td>追加标点</td>
<td>Supplemental Punctuation</td>
</tr>
<tr>
<td>11904</td>
<td>12031</td>
<td>2E80</td>
<td>2EFF</td>
<td>128</td>
<td>CJK 部首补充</td>
<td>CJK Radicals Supplement</td>
</tr>
<tr>
<td>12032</td>
<td>12255</td>
<td>2F00</td>
<td>2FDF</td>
<td>224</td>
<td>康熙字典部首</td>
<td>Kangxi Radicals</td>
</tr>
<tr>
<td>12272</td>
<td>12287</td>
<td>2FF0</td>
<td>2FFF</td>
<td>16</td>
<td>表意文字描述符</td>
<td>Ideographic Description Characters</td>
</tr>
<tr>
<td>12288</td>
<td>12351</td>
<td>3000</td>
<td>303F</td>
<td>64</td>
<td>CJK 符号和标点</td>
<td>CJK Symbols and Punctuation</td>
</tr>
<tr>
<td>12352</td>
<td>12447</td>
<td>3040</td>
<td>309F</td>
<td>96</td>
<td>日文平假名</td>
<td>Hiragana</td>
</tr>
<tr>
<td>12448</td>
<td>12543</td>
<td>30A0</td>
<td>30FF</td>
<td>96</td>
<td>日文片假名</td>
<td>Katakana</td>
</tr>
<tr>
<td>12544</td>
<td>12591</td>
<td>3100</td>
<td>312F</td>
<td>48</td>
<td>注音字母</td>
<td>Bopomofo</td>
</tr>
<tr>
<td>12592</td>
<td>12687</td>
<td>3130</td>
<td>318F</td>
<td>96</td>
<td>朝鲜文兼容字母</td>
<td>Hangul Compatibility Jamo</td>
</tr>
<tr>
<td>12688</td>
<td>12703</td>
<td>3190</td>
<td>319F</td>
<td>16</td>
<td>象形字注释标志</td>
<td>Kanbun</td>
</tr>
<tr>
<td>12704</td>
<td>12735</td>
<td>31A0</td>
<td>31BF</td>
<td>32</td>
<td>注音字母扩展</td>
<td>Bopomofo Extended</td>
</tr>
<tr>
<td>12736</td>
<td>12783</td>
<td>31C0</td>
<td>31EF</td>
<td>48</td>
<td>CJK 笔画</td>
<td>CJK Strokes</td>
</tr>
<tr>
<td>12784</td>
<td>12799</td>
<td>31F0</td>
<td>31FF</td>
<td>16</td>
<td>日文片假名语音扩展</td>
<td>Katakana Phonetic Extensions</td>
</tr>
<tr>
<td>12800</td>
<td>13055</td>
<td>3200</td>
<td>32FF</td>
<td>256</td>
<td>封闭式 CJK 文字和月份</td>
<td>Enclosed CJK Letters and Months</td>
</tr>
<tr>
<td>13056</td>
<td>13311</td>
<td>3300</td>
<td>33FF</td>
<td>256</td>
<td>CJK 兼容</td>
<td>CJK Compatibility</td>
</tr>
<tr>
<td>13312</td>
<td>19903</td>
<td>3400</td>
<td>4DBF</td>
<td>6592</td>
<td>CJK 统一表意符号扩展 A</td>
<td>CJK Unified Ideographs Extension A</td>
</tr>
<tr>
<td>19904</td>
<td>19967</td>
<td>4DC0</td>
<td>4DFF</td>
<td>64</td>
<td>易经六十四卦符号</td>
<td>Yijing Hexagrams Symbols</td>
</tr>
<tr>
<td>19968</td>
<td>40895</td>
<td>4E00</td>
<td>9FBF</td>
<td>20928</td>
<td>CJK 统一表意符号</td>
<td>CJK Unified Ideographs</td>
</tr>
<tr>
<td>40960</td>
<td>42127</td>
<td>A000</td>
<td>A48F</td>
<td>1168</td>
<td>彝文音节</td>
<td>Yi Syllables</td>
</tr>
<tr>
<td>42128</td>
<td>42191</td>
<td>A490</td>
<td>A4CF</td>
<td>64</td>
<td>彝文字根</td>
<td>Yi Radicals</td>
</tr>
<tr>
<td>42240</td>
<td>42527</td>
<td>A500</td>
<td>A61F</td>
<td>288</td>
<td>Vai</td>
<td>Vai</td>
</tr>
<tr>
<td>42592</td>
<td>42751</td>
<td>A660</td>
<td>A6FF</td>
<td>160</td>
<td>统一加拿大土著语音节补充</td>
<td>Unified Canadian Aboriginal Syllabics Supplement</td>
</tr>
<tr>
<td>42752</td>
<td>42783</td>
<td>A700</td>
<td>A71F</td>
<td>32</td>
<td>声调修饰字母</td>
<td>Modifier Tone Letters</td>
</tr>
<tr>
<td>42784</td>
<td>43007</td>
<td>A720</td>
<td>A7FF</td>
<td>224</td>
<td>拉丁文扩展-D</td>
<td>Latin Extended-D</td>
</tr>
<tr>
<td>43008</td>
<td>43055</td>
<td>A800</td>
<td>A82F</td>
<td>48</td>
<td>Syloti Nagri</td>
<td>Syloti Nagri</td>
</tr>
<tr>
<td>43072</td>
<td>43135</td>
<td>A840</td>
<td>A87F</td>
<td>64</td>
<td>八思巴字</td>
<td>Phags-pa</td>
</tr>
<tr>
<td>43136</td>
<td>43231</td>
<td>A880</td>
<td>A8DF</td>
<td>96</td>
<td>Saurashtra</td>
<td>Saurashtra</td>
</tr>
<tr>
<td>43264</td>
<td>43391</td>
<td>A900</td>
<td>A97F</td>
<td>128</td>
<td>爪哇语</td>
<td>Javanese</td>
</tr>
<tr>
<td>43392</td>
<td>43487</td>
<td>A980</td>
<td>A9DF</td>
<td>96</td>
<td>Chakma</td>
<td>Chakma</td>
</tr>
<tr>
<td>43520</td>
<td>43583</td>
<td>AA00</td>
<td>AA3F</td>
<td>64</td>
<td>Varang Kshiti</td>
<td>Varang Kshiti</td>
</tr>
<tr>
<td>43584</td>
<td>43631</td>
<td>AA40</td>
<td>AA6F</td>
<td>48</td>
<td>Sorang Sompeng</td>
<td>Sorang Sompeng</td>
</tr>
<tr>
<td>43648</td>
<td>43743</td>
<td>AA80</td>
<td>AADF</td>
<td>96</td>
<td>Newari</td>
<td>Newari</td>
</tr>
<tr>
<td>43776</td>
<td>43871</td>
<td>AB00</td>
<td>AB5F</td>
<td>96</td>
<td>越南傣语</td>
<td>Vi?t Thái</td>
</tr>
<tr>
<td>43904</td>
<td>43936</td>
<td>AB80</td>
<td>ABA0</td>
<td>33</td>
<td>Kayah Li</td>
<td>Kayah Li</td>
</tr>
<tr>
<td>44032</td>
<td>55215</td>
<td>AC00</td>
<td>D7AF</td>
<td>11184</td>
<td>朝鲜文音节</td>
<td>Hangul Syllables</td>
</tr>
<tr>
<td>55296</td>
<td>56319</td>
<td>D800</td>
<td>DBFF</td>
<td>1024</td>
<td>High-half zone of UTF-16</td>
<td>High-half zone of UTF-16</td>
</tr>
<tr>
<td>56320</td>
<td>57343</td>
<td>DC00</td>
<td>DFFF</td>
<td>1024</td>
<td>Low-half zone of UTF-16</td>
<td>Low-half zone of UTF-16</td>
</tr>
<tr>
<td>57344</td>
<td>63743</td>
<td>E000</td>
<td>F8FF</td>
<td>6400</td>
<td>自行使用區域</td>
<td>Private Use Zone</td>
</tr>
<tr>
<td>63744</td>
<td>64255</td>
<td>F900</td>
<td>FAFF</td>
<td>512</td>
<td>CJK 兼容象形文字</td>
<td>CJK Compatibility Ideographs</td>
</tr>
<tr>
<td>64256</td>
<td>64335</td>
<td>FB00</td>
<td>FB4F</td>
<td>80</td>
<td>字母表達形式</td>
<td>Alphabetic Presentation Form</td>
</tr>
<tr>
<td>64336</td>
<td>65023</td>
<td>FB50</td>
<td>FDFF</td>
<td>688</td>
<td>阿拉伯表達形式A</td>
<td>Arabic Presentation Form-A</td>
</tr>
<tr>
<td>65024</td>
<td>65039</td>
<td>FE00</td>
<td>FE0F</td>
<td>16</td>
<td>变量选择符</td>
<td>Variation Selector</td>
</tr>
<tr>
<td>65040</td>
<td>65055</td>
<td>FE10</td>
<td>FE1F</td>
<td>16</td>
<td>竖排形式</td>
<td>Vertical Forms</td>
</tr>
<tr>
<td>65056</td>
<td>65071</td>
<td>FE20</td>
<td>FE2F</td>
<td>16</td>
<td>组合用半符号</td>
<td>Combining Half Marks</td>
</tr>
<tr>
<td>65072</td>
<td>65103</td>
<td>FE30</td>
<td>FE4F</td>
<td>32</td>
<td>CJK 兼容形式</td>
<td>CJK Compatibility Forms</td>
</tr>
<tr>
<td>65104</td>
<td>65135</td>
<td>FE50</td>
<td>FE6F</td>
<td>32</td>
<td>小型变体形式</td>
<td>Small Form Variants</td>
</tr>
<tr>
<td>65136</td>
<td>65279</td>
<td>FE70</td>
<td>FEFF</td>
<td>144</td>
<td>阿拉伯表達形式B</td>
<td>Arabic Presentation Form-B</td>
</tr>
<tr>
<td>65280</td>
<td>65519</td>
<td>FF00</td>
<td>FFEF</td>
<td>240</td>
<td>半型及全型形式</td>
<td>Halfwidth and Fullwidth Form</td>
</tr>
<tr>
<td>65520</td>
<td>65535</td>
<td>FFF0</td>
<td>FFFF</td>
<td>16</td>
<td>特殊</td>
<td>Specials</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Unicode</tag>
      </tags>
  </entry>
  <entry>
    <title>windows快速添加文件夹</title>
    <url>/2020/06/27/windows-kuai-su-tian-jia-wen-jian-jia/</url>
    <content><![CDATA[<pre class=" language-shell"><code class="language-shell">for /l %i in (1,1,1000) do mkdir %i</code></pre>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows激活</title>
    <url>/2020/06/27/windows-ji-huo/</url>
    <content><![CDATA[<pre class=" language-shell"><code class="language-shell">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX  //安装win10专业版密钥
slmgr /skms zh.us.to //设置kms服务器
slmgr /ato //激活win10专业版系统
slmgr /xpr //查看专业版激活状态</code></pre>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下u</title>
    <url>/2020/06/27/linux-xia-du-ming-ling/</url>
    <content><![CDATA[<pre class=" language-shell"><code class="language-shell">du:
#    查看各目录或文件所占空间
    -s #只显示总和大小
    -a #/ all 显示所有大小（包括文件）
    -h #友好格式显示，比如用K/M/G表示大小。
    --max-depth=N #统计的目录深度。当N=0时等同于-s，所以和--s参数不能同时出现。
    -b #显示为字节数。
    -k #显示为K字节数。
    -m #显示为兆字节数。

du
#只显示当前目录子目录的大小和当前目录的总的大小，最下面的. 为当前目录的总大小

du log2012.log 
#显示指定文件所占空间

du scf
#查看指定目录的所占空间

du -s
//du -s mulu
#只显示总和的大小

du -ah mulu
#文件和目录都显示

du -h --max-depth=1
#输出当前目录下各个子目录所使用的空间</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>du</tag>
      </tags>
  </entry>
  <entry>
    <title>md转化为微信公众号格式</title>
    <url>/2020/06/27/md-zhuan-hua-wei-wei-xin-gong-zhong-hao-ge-shi/</url>
    <content><![CDATA[<h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p>平时写的技术文档都是markdown的形式。所以签到公众号上急需一个转化工具，所幸在github上找到了。</p>
<h2 id="地址0"><a href="#地址0" class="headerlink" title="地址0"></a>地址0</h2><p>在线使用地址： <a href="http://blog.didispace.com/tools/online-markdown/" target="_blank" rel="noopener">http://blog.didispace.com/tools/online-markdown/</a><br>github地址：<a href="https://github.com/dyc87112/online-markdown" target="_blank" rel="noopener">https://github.com/dyc87112/online-markdown</a></p>
<h2 id="地址1"><a href="#地址1" class="headerlink" title="地址1"></a>地址1</h2><p>在线使用地址：<a href="https://lab.lyric.im/wxformat/" target="_blank" rel="noopener">https://lab.lyric.im/wxformat/</a><br>github地址：<a href="https://github.com/CryFeiFei/wechat-format" target="_blank" rel="noopener">https://github.com/CryFeiFei/wechat-format</a></p>
<h2 id="我常用的"><a href="#我常用的" class="headerlink" title="我常用的"></a>我常用的</h2><p><a href="https://mdnice.com/" target="_blank" rel="noopener">https://mdnice.com/</a></p>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh  read: Connection reset by peer error</title>
    <url>/2020/06/27/ssh-read-connection-reset-by-peer-error/</url>
    <content><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#error</span>
sshfs xxx 192.168.39.70
read: Connection reset by peer</code></pre>
<p>slove</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -R 192.168.39.70</code></pre>
<p>umout</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">umount</span> -l /home/zhangpf/workspace</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>error</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>中文Unicode码字符范围</title>
    <url>/2020/06/27/zhong-wen-unicode-ma-zi-fu-fan-wei/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>字符集</th>
<th>字数</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody><tr>
<td>基本汉字</td>
<td>20902字</td>
<td>4E00-9FA5</td>
</tr>
<tr>
<td>基本汉字补充</td>
<td>74字</td>
<td>9FA6-9FEF</td>
</tr>
<tr>
<td>扩展A</td>
<td>6582字</td>
<td>3400-4DB5</td>
</tr>
<tr>
<td>扩展B</td>
<td>42711字</td>
<td>20000-2A6D6</td>
</tr>
<tr>
<td>扩展C</td>
<td>4149字</td>
<td>2A700-2B734</td>
</tr>
<tr>
<td>扩展D</td>
<td>222字</td>
<td>2B740-2B81D</td>
</tr>
<tr>
<td>扩展E</td>
<td>5762字</td>
<td>2B820-2CEA1</td>
</tr>
<tr>
<td>扩展F</td>
<td>7473字</td>
<td>2CEB0-2EBE0</td>
</tr>
<tr>
<td>康熙部首</td>
<td>214字</td>
<td>2F00-2FD5</td>
</tr>
<tr>
<td>部首扩展</td>
<td>115字</td>
<td>2E80-2EF3</td>
</tr>
<tr>
<td>兼容汉字</td>
<td>477字</td>
<td>F900-FAD9</td>
</tr>
<tr>
<td>兼容扩展</td>
<td>542字</td>
<td>2F800-2FA1D</td>
</tr>
<tr>
<td>PUA(GBK)部件</td>
<td>81字</td>
<td>E815-E86F</td>
</tr>
<tr>
<td>部件扩展</td>
<td>452字</td>
<td>E400-E5E8</td>
</tr>
<tr>
<td>PUA增补</td>
<td>207字</td>
<td>E600-E6CF</td>
</tr>
<tr>
<td>汉字笔画</td>
<td>36字</td>
<td>31C0-31E3</td>
</tr>
<tr>
<td>汉字结构</td>
<td>12字</td>
<td>2FF0-2FFB</td>
</tr>
<tr>
<td>汉语注音</td>
<td>43字</td>
<td>3105-312F</td>
</tr>
<tr>
<td>注音扩展</td>
<td>22字</td>
<td>31A0-31BA</td>
</tr>
<tr>
<td>〇</td>
<td>1字</td>
<td>3007</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Unicode</tag>
        <tag>中文</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下使用WPS做office的二次开发</title>
    <url>/2020/06/27/linux-xia-shi-yong-wps-zuo-office-de-er-ci-kai-fa/</url>
    <content><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>上个版本WPS在Linux上就已经支持二次开发了，可以直接去看官网相关的介绍。<a href="https://open.wps.cn/" target="_blank" rel="noopener">https://open.wps.cn/</a></p>
<p>我们选择WPS的客户端进行二次开发</p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ul>
<li>Ubuntu18.04</li>
<li>wps-office_11.1.0.9126_amd64.deb</li>
<li>Qt的开发环境（我本地5.14）</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="下载WPS的二次开发demo"><a href="#下载WPS的二次开发demo" class="headerlink" title="下载WPS的二次开发demo"></a>下载WPS的二次开发demo</h2><p>我们写了一些WPS的二次开发demo来给大家学习</p>
<p>C++跟Qt代码风格跟我们内部编码风格保持一致。可以看看。</p>
<pre class=" language-shell"><code class="language-shell">// 这个链接是一个版本，已经失效
git clone https://git.dev.tencent.com/zouyingfeng/wps.git</code></pre>
<p>这是现在的路径。 <a href="https://zouyingfeng.coding.net/p/wps/d/wps/git/tree/master" target="_blank" rel="noopener" title="https://zouyingfeng.coding.net/p/wps/d/wps/git/tree/master">https://zouyingfeng.coding.net/p/wps/d/wps/git/tree/master</a></p>
<p>然后进入cpp的demo的文件夹</p>
<p>tips</p>
<p>我这是Ubuntu18.04，这里cpp的pro文件还是要稍微改一下</p>
<pre class=" language-cpp"><code class="language-cpp">LIBS <span class="token operator">+</span><span class="token operator">=</span> libc<span class="token operator">++</span>abi<span class="token punctuation">.</span>so<span class="token number">.1</span></code></pre>
<p>//改成</p>
<pre class=" language-cpp"><code class="language-cpp">LIBS <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">/</span>opt<span class="token operator">/</span>kingsoft<span class="token operator">/</span>wps<span class="token operator">-</span>office<span class="token operator">/</span>office6<span class="token operator">/</span>libc<span class="token operator">++</span>abi<span class="token punctuation">.</span>so<span class="token number">.1</span></code></pre>
<p>需要制定下这个路径。然后就可以编译过了，否则可能会找不到libc++abi.so.1的库。</p>
<p>接下来使用</p>
<pre class=" language-cpp"><code class="language-cpp">qmake
make</code></pre>
<p>然后执行<br>wpsDemo可执行文件就可以了。</p>
<p>然后点击</p>
<p>初始化<br>新建文档<br>就可以新建文档了</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我这是个官方的demo，社区用户可以自己用这个demo把界面隐藏，然后可以自己做一个命令行批量转化pdf的小工具</p>
<h2 id="PS-关于python的接口"><a href="#PS-关于python的接口" class="headerlink" title="PS 关于python的接口"></a>PS 关于python的接口</h2><p>我的一个同事用python的swig封装了这个c++接口，然后搞成了python库，有兴趣可以github看一下</p>
<p>上地址<br><a href="https://github.com/timxx/pywpsrpc" target="_blank" rel="noopener" title="https://github.com/timxx/pywpsrpc">https://github.com/timxx/pywpsrpc</a></p>
<p>作者是我们团队的一个大佬，热心人，WPS的插入公式的功能就是他门几个做的，也可以欢迎骚扰他。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>WPS</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux清空回收站</title>
    <url>/2020/06/27/linux-qing-kong-hui-shou-zhan/</url>
    <content><![CDATA[<pre class=" language-shell"><code class="language-shell">rm -rf $HOME/.local/share/Trash/files/*</code></pre>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建wordpress</title>
    <url>/2020/06/27/shu-mei-pai-da-jian-wordpress/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>跟Ubuntu是差不多的。<br>把mysql换成了mariadb</p>
<pre class=" language-shell"><code class="language-shell">sudo apt update
sudo apt-get install apache2 -y
sudo apt-get install php7.0 -y
sudo apt-get install libapache2-mod-php7.3
sudo apt install php7.3-mysql 
sudo apt install phpmyadmin -y
sudo apt install mariadb-server

// 重启服务
sudo systemctl restart mariadb
sudo systemctl restart apache2.service</code></pre>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><pre class=" language-shell"><code class="language-shell">sudo mysql -u root -p
CREATE DATABASE wordpress;
CREATE USER wordpressuser;
SET PASSWORD FOR wordpressuser= PASSWORD("password123");
GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser IDENTIFIED BY"password123";
FLUSH PRIVILEGES;
exit;</code></pre>
]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg录屏</title>
    <url>/2020/06/27/ffmpeg-lu-ping/</url>
    <content><![CDATA[<p>Linux</p>
<pre class=" language-shell"><code class="language-shell">ffmpeg -video_size 1820x900 -framerate 25 -f x11grab -i :0.0 -t 5 output1.mp4</code></pre>
<p><a href="https://trac.ffmpeg.org/wiki/Capture/Desktop" target="_blank" rel="noopener" title="https://trac.ffmpeg.org/wiki/Capture/Desktop">https://trac.ffmpeg.org/wiki/Capture/Desktop</a></p>
]]></content>
      <tags>
        <tag>ffmpeg</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Qt实现无边框可缩放的窗口</title>
    <url>/2020/06/27/linux-xia-qt-shi-xian-wu-bian-kuang-ke-suo-fang-de-chuang-kou/</url>
    <content><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>在Linux平台上做desktop应用的还是非常少的。所以基本上网上这部分资料是没有的。Linux平台又不像Win那么多API。这次的实现，本来自己想写xlib的函数的，然后机智的我从deepin的代码里把他们封装好的抠出来了，然后补充了一些x11的封装函数。来完成最终的效果。</p>
<p>本篇文章纯粹抛砖引玉，毕竟只是个demo。简单的说一下遇到的坑。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>实现上很简单，重写qt的三个函数就可以。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> FLWidget_Linux<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_LINUX</span>
     <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">const</span> <span class="token keyword">int</span> y <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">if</span> <span class="token punctuation">(</span>resizingCornerEdge <span class="token operator">==</span> XUtils<span class="token operator">::</span>CornerEdge<span class="token operator">::</span>kInvalid<span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
      XUtils<span class="token operator">::</span><span class="token function">UpdateCursorShape</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">contentsMargins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResizeHandleWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

 <span class="token keyword">return</span> QWidget<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> FLWidget_Linux<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_LINUX</span>
 <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> <span class="token keyword">int</span> y <span class="token operator">=</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-</span><span class="token operator">></span><span class="token function">button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>LeftButton<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
      <span class="token keyword">const</span> XUtils<span class="token operator">::</span>CornerEdge ce <span class="token operator">=</span> XUtils<span class="token operator">::</span><span class="token function">GetCornerEdge</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">contentsMargins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResizeHandleWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ce <span class="token operator">!=</span> XUtils<span class="token operator">::</span>CornerEdge<span class="token operator">::</span>kInvalid<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
           resizingCornerEdge <span class="token operator">=</span> ce<span class="token punctuation">;</span>
           <span class="token comment" spellcheck="true">//send x11 move event dont send mouserrelease event</span>
           XUtils<span class="token operator">::</span><span class="token function">SendButtonRelease</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">globalPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           XUtils<span class="token operator">::</span><span class="token function">StartResizing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> QCursor<span class="token operator">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ce<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
 <span class="token keyword">return</span> QWidget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> FLWidget_Linux<span class="token operator">::</span><span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_LINUX</span>
     resizingCornerEdge <span class="token operator">=</span> XUtils<span class="token operator">::</span>CornerEdge<span class="token operator">::</span>kInvalid<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
     <span class="token keyword">return</span> QWidget<span class="token operator">::</span><span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>只重写这三个函数就可以完成对应的功能，当然还得有XUtils。<br>XUtils是deepin封装的一个功能namespace。封装了常用的xlib操作qt的widget的一些函数。<br>然后我补充了一个他们的函数</p>
<p>主要是调用的xlib的mousemove之后，Qt接受不到release事件，需要手动再发一个</p>
<pre class=" language-cpp"><code class="language-cpp">XUtils<span class="token operator">::</span><span class="token function">SendButtonRelease</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token operator">-</span><span class="token operator">></span><span class="token function">globalPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">SendButtonRelease</span><span class="token punctuation">(</span><span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">,</span>
          <span class="token keyword">const</span> QPoint <span class="token operator">&amp;</span>pos<span class="token punctuation">,</span> <span class="token keyword">const</span> QPoint <span class="token operator">&amp;</span>globalPos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 <span class="token keyword">const</span> <span class="token keyword">auto</span> display <span class="token operator">=</span> QX11Info<span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> <span class="token keyword">auto</span> screen <span class="token operator">=</span> QX11Info<span class="token operator">::</span><span class="token function">appScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 XEvent xevent<span class="token punctuation">;</span>
 <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xevent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 xevent<span class="token punctuation">.</span>type <span class="token operator">=</span> ButtonRelease<span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>button <span class="token operator">=</span> Button1<span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>window <span class="token operator">=</span> widget<span class="token operator">-</span><span class="token operator">></span><span class="token function">effectiveWinId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>x <span class="token operator">=</span> pos<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>y <span class="token operator">=</span> pos<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>x_root <span class="token operator">=</span> globalPos<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>y_root <span class="token operator">=</span> globalPos<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 xevent<span class="token punctuation">.</span>xbutton<span class="token punctuation">.</span>display <span class="token operator">=</span> display<span class="token punctuation">;</span>

 <span class="token function">XSendEvent</span><span class="token punctuation">(</span>display<span class="token punctuation">,</span> widget<span class="token operator">-</span><span class="token operator">></span><span class="token function">effectiveWinId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> False<span class="token punctuation">,</span> ButtonReleaseMask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>xevent<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">XFlush</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>昨天整理了下文档，发到github上了，欢迎star跟fork</p>
<p><a href="https://github.com/CryFeiFei/FLWidget" target="_blank" rel="noopener" title="https://github.com/CryFeiFei/FLWidget">https://github.com/CryFeiFei/FLWidget</a></p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Linux</tag>
        <tag>无边框</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下Qt无边框可变化的实现</title>
    <url>/2020/06/27/windows-xia-qt-wu-bian-kuang-ke-bian-hua-de-shi-xian/</url>
    <content><![CDATA[<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> FLWIDGET_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> FLWIDGET_H</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMouseEvent></span></span>

<span class="token keyword">class</span> <span class="token class-name">FLWidget</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget
<span class="token punctuation">{</span>
 Q_OBJECT
<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">explicit</span> <span class="token function">FLWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">~</span><span class="token function">FLWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
 <span class="token keyword">bool</span> <span class="token function">nativeEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> QByteArray <span class="token operator">&amp;</span>eventType<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>message<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> override<span class="token punctuation">;</span>
 <span class="token keyword">void</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent<span class="token operator">*</span> e<span class="token punctuation">)</span> override<span class="token punctuation">;</span>
 <span class="token keyword">void</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent<span class="token operator">*</span> e<span class="token punctuation">)</span> override<span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
 <span class="token keyword">int</span> m_bouderWidth<span class="token punctuation">;</span>
 QPoint m_curPos<span class="token punctuation">;</span>

signals<span class="token operator">:</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// FLWIDGET_H</span>


<span class="token comment" spellcheck="true">// cpp</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"flwidget.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_WIN</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token comment" spellcheck="true">//注意头文件</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windowsx.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QMouseEvent></span></span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token keyword">namespace</span>
<span class="token punctuation">{</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">int</span> BOUDERWIDTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

FLWidget<span class="token operator">::</span><span class="token function">FLWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_bouderWidth</span><span class="token punctuation">(</span>BOUDERWIDTH<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">setMouseTracking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setWindowFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>FramelessWindowHint <span class="token operator">|</span> Qt<span class="token operator">::</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setStyleSheet</span><span class="token punctuation">(</span><span class="token string">"background:red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

FLWidget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">FLWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> FLWidget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_WIN</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>LeftButton<span class="token punctuation">)</span>
        m_curPos <span class="token operator">=</span> e<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    <span class="token keyword">return</span> QWidget<span class="token operator">::</span><span class="token function">mousePressEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> FLWidget<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>QMouseEvent <span class="token operator">*</span>e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_WIN</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">buttons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Qt<span class="token operator">::</span>LeftButton<span class="token punctuation">)</span>
        <span class="token function">move</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> m_curPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    <span class="token keyword">return</span> QWidget<span class="token operator">::</span><span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> FLWidget<span class="token operator">::</span><span class="token function">nativeEvent</span><span class="token punctuation">(</span><span class="token keyword">const</span> QByteArray <span class="token operator">&amp;</span>eventType<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>message<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span>result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> Q_OS_WIN</span>
    MSG<span class="token operator">*</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span>MSG<span class="token operator">*</span><span class="token punctuation">)</span>message<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token operator">-</span><span class="token operator">></span>message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> WM_NCHITTEST<span class="token operator">:</span>
            <span class="token keyword">int</span> xPos <span class="token operator">=</span> <span class="token function">GET_X_LPARAM</span><span class="token punctuation">(</span>msg<span class="token operator">-</span><span class="token operator">></span>lParam<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">frameGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> yPos <span class="token operator">=</span> <span class="token function">GET_Y_LPARAM</span><span class="token punctuation">(</span>msg<span class="token operator">-</span><span class="token operator">></span>lParam<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">frameGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> nUseFulWidth <span class="token operator">=</span> <span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> m_bouderWidth<span class="token punctuation">;</span>
            <span class="token keyword">int</span> nUseFulHeight <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> m_bouderWidth<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xPos <span class="token operator">&lt;</span> m_bouderWidth <span class="token operator">&amp;&amp;</span> yPos <span class="token operator">&lt;</span> m_bouderWidth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//左上角</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTTOPLEFT<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xPos<span class="token operator">>=</span> nUseFulWidth <span class="token operator">&amp;&amp;</span> yPos <span class="token operator">&lt;</span> m_bouderWidth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//右上角</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTTOPRIGHT<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xPos <span class="token operator">&lt;</span> m_bouderWidth <span class="token operator">&amp;&amp;</span> yPos <span class="token operator">>=</span> nUseFulHeight<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//左下角</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTBOTTOMLEFT<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xPos <span class="token operator">>=</span> nUseFulWidth <span class="token operator">&amp;&amp;</span> yPos <span class="token operator">>=</span> nUseFulHeight<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//右下角</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTBOTTOMRIGHT<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xPos <span class="token operator">&lt;</span> m_bouderWidth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//左边</span>
                <span class="token operator">*</span>result <span class="token operator">=</span>  HTLEFT<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xPos <span class="token operator">>=</span> nUseFulWidth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//右边</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTRIGHT<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>yPos <span class="token operator">&lt;</span> m_bouderWidth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//上边</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTTOP<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>yPos <span class="token operator">>=</span> nUseFulHeight<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//下边</span>
                <span class="token operator">*</span>result <span class="token operator">=</span> HTBOTTOM<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    <span class="token keyword">return</span> QWidget<span class="token operator">::</span><span class="token function">nativeEvent</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> message<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处返回false，留给其他事件处理器处理</span>

<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Warning: File &#39;tests/checkasm/Makefile&#39; has modification time 56376655 s in</title>
    <url>/2020/06/27/warning-file-tests-checkasm-makefile-has-modification-time-56376655-s-in/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f | xargs -n 5 touch</span><br><span class="line">make clean</span><br><span class="line">make</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>深入了解QT消息循环及线程相关性</title>
    <url>/2020/06/27/shen-ru-liao-jie-qt-xiao-xi-xun-huan-ji-xian-cheng-xiang-guan-xing/</url>
    <content><![CDATA[<h1 id="一、什么是Qt消息循环"><a href="#一、什么是Qt消息循环" class="headerlink" title="一、什么是Qt消息循环"></a>一、什么是Qt消息循环</h1><p>  Qt消息循环，就是从一个队列中不断取出消息，并响应消息的过程。窗体的鼠标、键盘、输入法、绘制，各种消息，都来自于Qt的消息循环。以Windows操作系统为例，Qt接管Windows原生窗口消息，并翻译成Qt的消息，派发给程序下的各个子对象、子QWidget等，通过接管层，可以很好屏蔽不同平台之间的差异性，开发人员不需要关心Windows或者X11的消息的差异性，只需要搞清楚各个QEvent之间是什么含义。</p>
<p>  最开始的Qt消息循环开始于QCoreApplication::exec()。用户创建出一个QCoreApplication，或者说更多情况下是QApplication，执行QCoreApplication::exec()，一个应用程序便开始了。QCoreApplication会不断从操作系统获取消息，并且分发给QObject。</p>
<p>  如果没有消息循环，那么Qt的信号和槽无法完全使用，有些函数也无法正确执行。举个例子，通过QueuedConnection连接的信号，其实是将一个事件压入了消息循环，如果没有QCoreApplication::exec()，那么这个消息循环将永远无法派发到指定的对象。</p>
<h1 id="二、什么是线程相关性"><a href="#二、什么是线程相关性" class="headerlink" title="二、什么是线程相关性"></a>二、什么是线程相关性</h1><p>准确点来说，应该是指QObject的线程相关性。以Qt文档中的示意图来作说明：</p>
<p><img src="/2020/06/27/shen-ru-liao-jie-qt-xiao-xi-xun-huan-ji-xian-cheng-xiang-guan-xing/1584530091352-tst.jpg" alt></p>
<p>当我们创建一个QObject时，它会与创建自己所在的线程绑定。它参与的消息循环，其实是它所在线程的消息循环，如上图所示。假如某个线程没有默认的QThread::exec()，那么该线程上的QObject则无法接收到事件。另外，如果两个不同线程的QObject需要相互通信，那么只能通过QueuedConnection的方式，异步通知对方线程，在下一轮消息循环处理QObject的消息。</p>
<p>QObject的线程相关性默认会和它的parent保持一致。如果一个QObject没有parent，那么可以通过moveToThread，将它的线程相关性切换到指定线程。</p>
<p>了解QObject的线程相关性非常重要，很多初学者常常分不清一个多线程中哪些QObject应该由主线程创建，哪些应该由工作线程创建，我的观点是，它参与哪个消息循环，就由哪个来创建。</p>
<p>正因为这样的特性，我们才可以理解什么叫做AutoConnection。通过AutoConnect连接的两个QObject，如果是在同一个线程，那么可以直接调用(DirectConnection)，如果不是在同一个线程，那么就通过事件通知的方式(QueuedConnection）来调用。通过信号和槽、事件或者QueuedConnection方式来进行线程间的通讯，尤其是与UI线程通讯，永远是最优雅的方式之一。</p>
<p>希望大家看了这篇文章后能有所帮助。</p>
<p>全文完。</p>
<hr>
<p>等等，这就完了？这算哪门子深入？？？？</p>
<p>好吧！以下才是正文！</p>
<p>真·深入了解QT消息循环及线程相关性</p>
<h1 id="一、什么是消息循环"><a href="#一、什么是消息循环" class="headerlink" title="一、什么是消息循环"></a>一、什么是消息循环</h1><p>以Windows为例，在我们编写GUI程序，创建一个原生窗体时，总会要经历两个步骤：</p>
<h2 id="1、注册一个窗体类-RegisterClassEx"><a href="#1、注册一个窗体类-RegisterClassEx" class="headerlink" title="1、注册一个窗体类(RegisterClassEx):"></a>1、注册一个窗体类(RegisterClassEx):</h2><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexa" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexa</a></p>
<p>窗体类中，最重要的就是指定了一个窗口处理函数WNDPROC。所有此类型的窗口，收到事件后，都会回调到此处理函数中来执行。</p>
<h2 id="2、创建一个窗体-CreateWindow"><a href="#2、创建一个窗体-CreateWindow" class="headerlink" title="2、创建一个窗体(CreateWindow)"></a>2、创建一个窗体(CreateWindow)</h2><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw</a></p>
<p>一般地，我们可以创建很多个窗口，然后使用同一个窗体处理函数，通过创建时的参数来决定上下文，也就是到底是处理的是哪个Window，以及获取一些自定义结构等。这个函数大致定义了窗体的颜值，并且需要与第一步中的窗体类关联起来。这样一来，窗体就真正创建好了，并且也可以接收到系统发来的消息。</p>
<p>接下来很重要的一点，就是关于消息循环的过程。<br>首先，用户通过GetMessage、PeekMessage等函数，从消息队列中取出事件，接下来，通过DispatchMessage来分发事件。系统将这个事件分发到对应的窗口处理函数WNDPROC中进行处理。<br>在绝大部分GUI程序中，GetMessage, DispatchMessage是写在一个死循环中的，除非程序退出，否则会一直处理各种事件。</p>
<h1 id="二、消息队列的线程相关性"><a href="#二、消息队列的线程相关性" class="headerlink" title="二、消息队列的线程相关性"></a>二、消息队列的线程相关性</h1><p>依照MSDN的说法：</p>
<p><a href="https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues</a></p>
<p>系统将用创建某Window的线程来分发消息。例如窗体1在线程A创建，窗体2在线程B创建，那么它们的WNDPROC则是由不同线程来回调的。一般地我们也只会在主线程中创建窗体，不过系统还是允许在各个线程中处理窗口的。</p>
<h1 id="三、Qt消息循环的基础：窗体事件"><a href="#三、Qt消息循环的基础：窗体事件" class="headerlink" title="三、Qt消息循环的基础：窗体事件"></a>三、Qt消息循环的基础：窗体事件</h1><p>在Windows中，要处理事件一定要有一个窗体。在Qt中，事件一共有两类，一类是和窗体无关的实践，例如QTimerEvent，另外一类就是常见的窗体事件，如鼠标、键盘、绘制等事件。因此，qt至少有两个WNDPROC，一个处理Timer等事件，一个处理QWidget中的事件。</p>
<p>刚刚也提到，Windows事件其实是和线程相关的，那么也就是说，对于每一个QObject的对象，它必须要有自己所在线程的信息。不同线程的对象是无法直接通信的，要通过事件才可以。</p>
<p>在Qt中，消息循环在QEventLoop类中实现。通过QEventLoop::exec()可以进入一个消息循环的阻塞状态中，也就是不断地PeekMessage-DispatchMessage。其实，QEventLoop里面几乎没有实现任何细节，这可能有点令人迷惑，不过仔细想想，任何系统都可以通过QEventLoop来调用消息循环，说明里面一定有一层和系统相关的抽象，这个稍后会说到。</p>
<p>不难想到，QEventLoop通过内部的一层抽象，来不断从系统获取和处理消息，而这一层抽象，是和线程相关的。所有相同的线程，完全可以共用这层抽象。接下来就开始解析Qt4.8中对此的实现。</p>
<h1 id="四、实现"><a href="#四、实现" class="headerlink" title="四、实现"></a>四、实现</h1><h2 id="1-QAbstractEventDispatcher"><a href="#1-QAbstractEventDispatcher" class="headerlink" title="1. QAbstractEventDispatcher"></a>1. QAbstractEventDispatcher</h2><p>QAbstractEventDispatcher是一个处理PeekMessage-DispatchMessage的抽象接口。Windows上实现的派生类是QEventDispatcherWin32。QEventLoop从某个地方取到这个类的实例，来完成消息的获取和分发。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QEventDispatcherWin32::processEvents</span><span class="params">(QEventLoop::ProcessEventsFlags flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q_D(QEventDispatcherWin32);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!d-&gt;internalHwnd)</span><br><span class="line">        createInternalHwnd();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">while</span> (!d-&gt;interrupt) &#123;</span><br><span class="line">             ...</span><br><span class="line">            MSG msg;</span><br><span class="line">            <span class="keyword">bool</span> haveMessage;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!(flags &amp; QEventLoop::ExcludeUserInputEvents) &amp;&amp; !d-&gt;queuedUserInputEvents.isEmpty()) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                haveMessage = PeekMessage(&amp;msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, PM_REMOVE);</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!haveMessage) &#123;</span><br><span class="line">                .....</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haveMessage) &#123;</span><br><span class="line">                .....</span><br><span class="line">                <span class="keyword">if</span> (!filterEvent(&amp;msg)) &#123;</span><br><span class="line">                    TranslateMessage(&amp;msg);</span><br><span class="line">                    DispatchMessage(&amp;msg);</span><br><span class="line">                &#125;</span><br><span class="line">                .....</span><br><span class="line">            &#125;</span><br><span class="line">            retVal = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (canWait);</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是QEventDispatcherWin32的具体实现。我省略掉了大部分代码，只留下几个关键部分。<br>首先是看循环部分，其实就像原生的Windows程序那样，PeekMessage, TranslateMessage, DispatchMessage。我们调用QEventLoop::exec()后，便马上调进了这里。<br>第二个值得注意的是，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!d-&gt;internalHwnd)</span><br><span class="line">    createInternalHwnd();</span><br></pre></td></tr></table></figure>

<p>createInternalHwnd()，QT用它创建了一个不可见的窗口，并且为它注册了一个叫做qt_internal_proc的WNDPROC函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">LRESULT QT_WIN_CALLBACK <span class="title">qt_internal_proc</span><span class="params">(HWND hwnd, UINT message, WPARAM wp, LPARAM lp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message == WM_NCCREATE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line">    msg.hwnd = hwnd;</span><br><span class="line">    msg.message = message;</span><br><span class="line">    msg.wParam = wp;</span><br><span class="line">    msg.lParam = lp;</span><br><span class="line">    QCoreApplication *app = QCoreApplication::instance();</span><br><span class="line">    <span class="keyword">long</span> result;</span><br><span class="line">    <span class="keyword">if</span> (!app) &#123;</span><br><span class="line">        <span class="keyword">if</span> (message == WM_TIMER)</span><br><span class="line">            KillTimer(hwnd, wp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app-&gt;filterEvent(&amp;msg, &amp;result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> GWLP_USERDATA</span></span><br><span class="line">    QEventDispatcherWin32 *q = (QEventDispatcherWin32 *) GetWindowLongPtr(hwnd, GWLP_USERDATA);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    QEventDispatcherWin32 *q = (QEventDispatcherWin32 *) GetWindowLong(hwnd, GWL_USERDATA);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    QEventDispatcherWin32Private *d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="number">0</span>)</span><br><span class="line">        d = q-&gt;d_func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (message == WM_QT_SOCKETNOTIFIER) &#123;</span><br><span class="line">        <span class="comment">// socket notifier message</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message == WM_QT_SENDPOSTEDEVENTS</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message == WM_TIMER) &#123;</span><br><span class="line">        Q_ASSERT(d != <span class="number">0</span>);</span><br><span class="line">        d-&gt;sendTimerEvent(wp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, message, wp, lp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，这个隐藏的窗口处理了几个事件。其中最常用的事件，肯定就是WM_TIMER了。通过QTimer::singleShot进来的事件，最终通过registerTimer()设置了计时器。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QEventDispatcherWin32Private::registerTimer</span><span class="params">(WinTimerInfo *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q_ASSERT(internalHwnd);</span><br><span class="line"></span><br><span class="line">    Q_Q(QEventDispatcherWin32);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;interval &gt; <span class="number">20</span> || !t-&gt;interval || !qtimeSetEvent) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!t-&gt;interval)  <span class="comment">// optimization for single-shot-zero-timer</span></span><br><span class="line">            QCoreApplication::postEvent(q, <span class="keyword">new</span> QZeroTimerEvent(t-&gt;timerId));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ok = SetTimer(internalHwnd, t-&gt;timerId, (uint) t-&gt;interval, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ok = t-&gt;fastTimerId = qtimeSetEvent(t-&gt;interval, <span class="number">1</span>, qt_fast_timer_proc, (DWORD_PTR)t,</span><br><span class="line">                                            TIME_CALLBACK_FUNCTION | TIME_PERIODIC | TIME_KILL_SYNCHRONOUS);</span><br><span class="line">        <span class="keyword">if</span> (ok == <span class="number">0</span>) &#123; <span class="comment">// fall back to normal timer if no more multimedia timers available</span></span><br><span class="line">            ok = SetTimer(internalHwnd, t-&gt;timerId, (uint) t-&gt;interval, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ok == <span class="number">0</span>)</span><br><span class="line">        qErrnoWarning(<span class="string">"QEventDispatcherWin32::registerTimer: Failed to create a timer"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当SetTimer超时后，WM_TIMER将发送给internalHwnd，接下来它调用sendTimerEvent，通知接收的QObject，达到计时器的效果。</p>
<p>通过创建一个隐藏的窗口，来处理一些特定的事件，这便是Qt消息循环的一个小小的套路。</p>
<h2 id="2-QThreadData"><a href="#2-QThreadData" class="headerlink" title="2. QThreadData"></a>2. QThreadData</h2><p>你可能会问，QEventDispatcherWin32的实例存放在哪里。前文也说过，QEventDispatcherWin32是跟着线程走的，所以没有必要每个QEventLoop都存一个。事实上，它存放在一个叫做QThreadData的结构中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QThreadData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QAtomicInt _ref;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QThreadData(<span class="keyword">int</span> initialRefCount = <span class="number">1</span>);</span><br><span class="line">    ~QThreadData();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> QThreadData *<span class="title">current</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> QThreadData *<span class="title">get2</span><span class="params">(QThread *thread)</span></span></span><br><span class="line"><span class="function">    </span>&#123; Q_ASSERT_X(thread != <span class="number">0</span>, <span class="string">"QThread"</span>, <span class="string">"internal error"</span>); <span class="keyword">return</span> thread-&gt;d_func()-&gt;data; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ref</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deref</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    QThread *thread;</span><br><span class="line">    <span class="keyword">bool</span> quitNow;</span><br><span class="line">    <span class="keyword">int</span> loopLevel;</span><br><span class="line">    QAbstractEventDispatcher *eventDispatcher;</span><br><span class="line">    QStack&lt;QEventLoop *&gt; eventLoops;</span><br><span class="line">    QPostEventList postEventList;</span><br><span class="line">    <span class="keyword">bool</span> canWait;</span><br><span class="line">    QVector&lt;<span class="keyword">void</span> *&gt; tls;</span><br><span class="line"></span><br><span class="line">    QMutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> Q_OS_SYMBIAN</span></span><br><span class="line">    RThread symbian_thread_handle;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>仔细看看这个结构，它几个主要的成员，eventDispatcher，就是我们刚刚说的QEventDispatcherWin32实例。eventLoops，这个是嵌套的消息循环，以及loopLevel，是它嵌套的层数（如QEventLoop::exec里面调用QEventLoop:exec）。里面还有个postEventList，表示当前的Qt事件队列，thread表示它当前所在的线程，以及一个_ref引用计数。</p>
<p>QThreadData奇妙在，它是跟着线程走的。在QThreadData::current中我们可以看到：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QThreadData *<span class="title">QThreadData::current</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qt_create_tls();</span><br><span class="line">    QThreadData *threadData = <span class="keyword">reinterpret_cast</span>&lt;QThreadData *&gt;(TlsGetValue(qt_current_thread_data_tls_index));</span><br><span class="line">    <span class="keyword">if</span> (!threadData) &#123;</span><br><span class="line">       ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            threadData = <span class="keyword">new</span> QThreadData;</span><br><span class="line">            <span class="comment">// This needs to be called prior to new AdoptedThread() to</span></span><br><span class="line">            <span class="comment">// avoid recursion.</span></span><br><span class="line">            TlsSetValue(qt_current_thread_data_tls_index, threadData);</span><br><span class="line">            QT_TRY &#123;</span><br><span class="line">                threadData-&gt;thread = <span class="keyword">new</span> QAdoptedThread(threadData);</span><br><span class="line">            &#125; QT_CATCH(...) &#123;</span><br><span class="line">                TlsSetValue(qt_current_thread_data_tls_index, <span class="number">0</span>);</span><br><span class="line">                threadData-&gt;deref();</span><br><span class="line">                threadData = <span class="number">0</span>;</span><br><span class="line">                QT_RETHROW;</span><br><span class="line">            &#125;</span><br><span class="line">            threadData-&gt;deref();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> threadData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现，调用此方法后，如果线程栈的局部存储区中没有QThreadData，一个新的QThreadData就会被创建，并且设置到当前线程的局部存储区，并且将当前线程绑定在一个假的QAdoptedThread中。</p>
<p>接下来是最重要的一点：所有的QObject中都有QThreadData的成员，并且有下列初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QObject::QObject(QObjectPrivate &amp;dd, QObject *parent)</span><br><span class="line">    : d_ptr(&amp;dd)</span><br><span class="line">&#123;</span><br><span class="line">    Q_D(QObject);</span><br><span class="line">    d_ptr-&gt;q_ptr = <span class="keyword">this</span>;</span><br><span class="line">    d-&gt;threadData = (parent &amp;&amp; !parent-&gt;thread()) ? parent-&gt;d_func()-&gt;threadData : QThreadData::current();</span><br><span class="line">    d-&gt;threadData-&gt;ref();</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就非常清晰明了了，我创建一个QObject对象，它的threadData，将和parent一致。若parent没有threadData，或者是没有parent，将调用QThreadData::current获取一个新的、当前线程的QThreadData，并且将当前线程设置为一个QAdoptedThread的实例。</p>
<p>下面看一下QEventLoop::processEvents的实现，QEventLoop::exec()最终调入此处：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QEventLoop::processEvents</span><span class="params">(ProcessEventsFlags flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q_D(QEventLoop);</span><br><span class="line">    <span class="keyword">if</span> (!d-&gt;threadData-&gt;eventDispatcher)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (flags &amp; DeferredDeletion)</span><br><span class="line">        QCoreApplication::sendPostedEvents(<span class="number">0</span>, QEvent::DeferredDelete);</span><br><span class="line">    <span class="keyword">return</span> d-&gt;threadData-&gt;eventDispatcher-&gt;processEvents(flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来QEventLoop作为一个QObject，它也有threadData。同一个线程threadData只创建一次，所以它们取出来的eventDispatcher也都是相同的。这意味着所有的相同线程的QObject，共享一份threadData，也就是同一份eventDispatcher, postEventList等。这也就说明了，我们下图是如何实现的：</p>
<p>事件保存在QThreadData::postEventList中，不同线程有不同的QThreadData实例</p>
<h2 id="3-QThread"><a href="#3-QThread" class="headerlink" title="3. QThread"></a>3. QThread</h2><p>接下来看看当我们创建一个线程时，会发生什么：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QThreadPrivate::QThreadPrivate(QThreadData *d)</span><br><span class="line">    : QObjectPrivate(), running(<span class="literal">false</span>), finished(<span class="literal">false</span>), terminated(<span class="literal">false</span>), exited(<span class="literal">false</span>), returnCode(<span class="number">-1</span>),</span><br><span class="line">      stackSize(<span class="number">0</span>), priority(QThread::InheritPriority), data(d)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!data)</span><br><span class="line">        data = <span class="keyword">new</span> QThreadData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QThread::QThread(QObject *parent)</span><br><span class="line">    : QObject(*(<span class="keyword">new</span> QThreadPrivate), parent)</span><br><span class="line">&#123;</span><br><span class="line">    Q_D(QThread);</span><br><span class="line">    <span class="comment">// fprintf(stderr, "QThreadData %p created for thread %p\n", d-&gt;data, this);</span></span><br><span class="line">    d-&gt;data-&gt;thread = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，当新建一个QThread时，二话不说它先是建立了一个新的QThreadData，并设置thread为自己。和QThreadData::current不同的是，QThreadData::current是被动生成一个QThreadData，因为它并没有指定某个QThread。而创建QThread则可以“名正言顺”创建QThreadData，然后将它的thread设置为自己。由于它还没有执行，因此并没有设置TLS。</p>
<p>当一个QThread要开始执行后：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QThread::start</span><span class="params">(Priority priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    d-&gt;handle = (Qt::HANDLE) _beginthreadex(<span class="literal">NULL</span>, d-&gt;stackSize, QThreadPrivate::start,</span><br><span class="line">                                            <span class="keyword">this</span>, CREATE_SUSPENDED, &amp;(d-&gt;id));</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __stdcall <span class="title">QThreadPrivate::start</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QThread *thr = <span class="keyword">reinterpret_cast</span>&lt;QThread *&gt;(arg);</span><br><span class="line">    QThreadData *data = QThreadData::get2(thr);</span><br><span class="line"></span><br><span class="line">    qt_create_tls();</span><br><span class="line">    TlsSetValue(qt_current_thread_data_tls_index, data);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    data-&gt;quitNow = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// ### <span class="doctag">TODO:</span> allow the user to create a custom event dispatcher</span></span><br><span class="line">    createEventDispatcher(data);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，TLS被设置成了刚刚QThread创建的QThreadData实例，那么之后在这个线程中，QThreadData::current就可以取到对应的信息了。它紧接着创建了event dispatcher，也就是QEventDispatcherWin32，并且塞给了QThreadData，保证这个线程中的消息循环都是通过此QEventDispatcherWin32。</p>
<p>需要注意的是，如果不是通过QThread创建的QThreadData（即通过QThreadData::current来创建的）默认是没有event dispatcher的，所以你无法对一个孤立的QObject分发事件。QCoreApplication并没有继承QThread，它通过QThreadData::current获取了实例后自己设置了event dispatcher来实现消息的分发。</p>
<p>这样一来一切都说得通了，为什么事件是跟着线程走的，为什么每个线程都有独立的消息循环，为什么需要moveToThread，一切原因，都在QThreadData里。</p>
<h2 id="4-QWidget消息循环"><a href="#4-QWidget消息循环" class="headerlink" title="4. QWidget消息循环"></a>4. QWidget消息循环</h2><p>刚刚看到每一个QEventDispatcherWin32都会创建一个隐藏的窗口来处理WM_TIMER等事件，对于普通的QWidget来说，它们的消息处理函数叫做QtWndProc，定义在了qapplication_win.cpp中。它里面无非就是将拿到的HWND映射到正确的QWidget中，然后翻译成Qt事件。Qt很巧妙地将QWidget<em>强行转换为了QETWidget</em>，实现了私有成员的封装，不过这个就已经超过我们讨论的范畴了。</p>
<p>以上便是Qt消息循环和线程相关的秘密，虽然Qt5的代码还没有仔细研究过，但是大体上变化应该不大，希望大家看完后，能对Qt有一个【卧槽好屌啊】这样的感受。</p>
]]></content>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下使用inotify监控文件动作</title>
    <url>/2020/06/27/linux-inotify/</url>
    <content><![CDATA[<h2 id="Linux下使用inotify监控文件动作"><a href="#Linux下使用inotify监控文件动作" class="headerlink" title="Linux下使用inotify监控文件动作"></a>Linux下使用inotify监控文件动作</h2><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>在日常应用中，常常会遇到以下场景，监控文件夹A，若文件夹中的B文件发生变化，则执行C命令。Linux下可以通过inotify完成该功能。<br>自从Linux kernel 2.6.13起，inotify以作为内核的一部份，同时需要glibc 2.4以上版本。</p>
<h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ul>
<li><p>inotify_init() – 创建一个inotify实例</p>
</li>
<li><p>inotify_add_watch(int fd, const char *pathname, uint32_t mask) – 加入文件或目录到inotify进行监测</p>
</li>
<li><p>inotify_rm_watch(int fd, int wd) – 移除一个watcher</p>
</li>
</ul>
<h4 id="相关结构"><a href="#相关结构" class="headerlink" title="相关结构"></a>相关结构</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> inotify_event <span class="token punctuation">{</span>
    <span class="token keyword">int</span>      wd<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Watch descriptor */</span>
    uint32_t mask<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* Mask of events */</span>
    uint32_t cookie<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Unique cookie associating related
                                     events (for rename(2)) */</span>
    uint32_t len<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* Size of name field */</span>
    <span class="token keyword">char</span>     name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Optional null-terminated name */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-Mask"><a href="#3-Mask" class="headerlink" title="3 Mask"></a>3 Mask</h4><p>适用于 inotify_add_watch mask 与 read 返回的inotify_event中mask</p>
<table>
<thead>
<tr>
<th>mask</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>IN_ACCESS</td>
<td>文件被访问</td>
</tr>
<tr>
<td>IN_ATTRIB</td>
<td>文件属性发生变化</td>
</tr>
<tr>
<td>IN_CLOSE_WRITE</td>
<td>以write方式打开文件并关闭</td>
</tr>
<tr>
<td>IN_CLOSE_NOWRITE</td>
<td>以非write方式打开文件并关闭</td>
</tr>
<tr>
<td>IN_CREATE</td>
<td>文件或目录被创建</td>
</tr>
<tr>
<td>IN_DELETE</td>
<td>文件或目录被删除（被监测的文件夹A中B文件被删除）</td>
</tr>
<tr>
<td>IN_DELETE_SELF</td>
<td>被监测的文件或目录被删除（被监测的文件夹A被删除）</td>
</tr>
<tr>
<td>IN_MODIFY</td>
<td>文件被修改</td>
</tr>
<tr>
<td>IN_MOVE_SELF</td>
<td>被监测的文件或目录移动</td>
</tr>
<tr>
<td>IN_MOVED_FROM</td>
<td>文件移出被监测的目录</td>
</tr>
<tr>
<td>IN_MOVED_TO</td>
<td>文件移入被监测的目录</td>
</tr>
<tr>
<td>IN_OPEN</td>
<td>文件被打开</td>
</tr>
<tr>
<td>上述flag的集合</td>
<td></td>
</tr>
<tr>
<td>IN_ALL_EVENTS</td>
<td>以上所有flag的集合</td>
</tr>
<tr>
<td>IN_MOVE</td>
<td>IN_MOVED_TO</td>
</tr>
<tr>
<td>IN_CLOSE</td>
<td>IN_CLOSE_WRITE</td>
</tr>
<tr>
<td>不常用的flag</td>
<td></td>
</tr>
<tr>
<td>IN_DONT_FOLLOW</td>
<td>不follow符号链接 (since 2.6.15)</td>
</tr>
<tr>
<td>IN_EXCL_UNLINK</td>
<td>当文件从监测目中unlink后，则不再报告该文件的相关event，比如监控/tmp使用 (since 2.6.36)</td>
</tr>
<tr>
<td>IN_MASK_ADD</td>
<td>追打MASK到被监测的pathname</td>
</tr>
<tr>
<td>IN_ONESHOT</td>
<td>只监测一次</td>
</tr>
<tr>
<td>IN_ONLYDIR</td>
<td>只监测目录</td>
</tr>
</tbody></table>
<p>仅由read返回</p>
<table>
<thead>
<tr>
<th>mask</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>IN_IGNORED</td>
<td>inotify_rm_watch，文件被删除或者文件系统被umount</td>
</tr>
<tr>
<td>IN_ISDIR</td>
<td>发生事件的是一个目录</td>
</tr>
<tr>
<td>IN_Q_OVERFLOW</td>
<td>Event队列溢出</td>
</tr>
<tr>
<td>IN_UNMOUNT</td>
<td>文件系统unmount</td>
</tr>
</tbody></table>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>用途：监测指定文件或目录（或不指定则为当前目录）的一切动作。<br>使用：inotify </p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>  </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/inotify.h></span>  </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;error.h></span>  </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span>  </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span>

<span class="token macro property">#<span class="token directive keyword">define</span> ERROR(text) error(1, errno, "%s", text)  </span>

<span class="token keyword">struct</span> EventMask <span class="token punctuation">{</span>  
    <span class="token keyword">int</span>        flag<span class="token punctuation">;</span>  
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  

<span class="token punctuation">}</span><span class="token punctuation">;</span>  

<span class="token keyword">int</span> <span class="token function">freadsome</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> size_t remain<span class="token punctuation">,</span> FILE <span class="token operator">*</span>file<span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">char</span> <span class="token operator">*</span>offset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">;</span>  
    <span class="token keyword">while</span> <span class="token punctuation">(</span>remain<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> remain<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  

        remain <span class="token operator">-</span><span class="token operator">=</span> n<span class="token punctuation">;</span>  
        offset <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>target<span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        target <span class="token operator">=</span> <span class="token string">"."</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        target <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    EventMask event_masks<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  
           <span class="token punctuation">{</span>IN_ACCESS        <span class="token punctuation">,</span> <span class="token string">"IN_ACCESS"</span><span class="token punctuation">}</span>        <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_ATTRIB        <span class="token punctuation">,</span> <span class="token string">"IN_ATTRIB"</span><span class="token punctuation">}</span>        <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_CLOSE_WRITE   <span class="token punctuation">,</span> <span class="token string">"IN_CLOSE_WRITE"</span><span class="token punctuation">}</span>   <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_CLOSE_NOWRITE <span class="token punctuation">,</span> <span class="token string">"IN_CLOSE_NOWRITE"</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_CREATE        <span class="token punctuation">,</span> <span class="token string">"IN_CREATE"</span><span class="token punctuation">}</span>        <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_DELETE        <span class="token punctuation">,</span> <span class="token string">"IN_DELETE"</span><span class="token punctuation">}</span>        <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_DELETE_SELF   <span class="token punctuation">,</span> <span class="token string">"IN_DELETE_SELF"</span><span class="token punctuation">}</span>   <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_MODIFY        <span class="token punctuation">,</span> <span class="token string">"IN_MODIFY"</span><span class="token punctuation">}</span>        <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_MOVE_SELF     <span class="token punctuation">,</span> <span class="token string">"IN_MOVE_SELF"</span><span class="token punctuation">}</span>     <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_MOVED_FROM    <span class="token punctuation">,</span> <span class="token string">"IN_MOVED_FROM"</span><span class="token punctuation">}</span>    <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_MOVED_TO      <span class="token punctuation">,</span> <span class="token string">"IN_MOVED_TO"</span><span class="token punctuation">}</span>      <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_OPEN          <span class="token punctuation">,</span> <span class="token string">"IN_OPEN"</span><span class="token punctuation">}</span>          <span class="token punctuation">,</span>    

           <span class="token punctuation">{</span>IN_DONT_FOLLOW   <span class="token punctuation">,</span> <span class="token string">"IN_DONT_FOLLOW"</span><span class="token punctuation">}</span>   <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_EXCL_UNLINK   <span class="token punctuation">,</span> <span class="token string">"IN_EXCL_UNLINK"</span><span class="token punctuation">}</span>   <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_MASK_ADD      <span class="token punctuation">,</span> <span class="token string">"IN_MASK_ADD"</span><span class="token punctuation">}</span>      <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_ONESHOT       <span class="token punctuation">,</span> <span class="token string">"IN_ONESHOT"</span><span class="token punctuation">}</span>       <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_ONLYDIR       <span class="token punctuation">,</span> <span class="token string">"IN_ONLYDIR"</span><span class="token punctuation">}</span>       <span class="token punctuation">,</span>    

           <span class="token punctuation">{</span>IN_IGNORED       <span class="token punctuation">,</span> <span class="token string">"IN_IGNORED"</span><span class="token punctuation">}</span>       <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_ISDIR         <span class="token punctuation">,</span> <span class="token string">"IN_ISDIR"</span><span class="token punctuation">}</span>         <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_Q_OVERFLOW    <span class="token punctuation">,</span> <span class="token string">"IN_Q_OVERFLOW"</span><span class="token punctuation">}</span>    <span class="token punctuation">,</span>    
           <span class="token punctuation">{</span>IN_UNMOUNT       <span class="token punctuation">,</span> <span class="token string">"IN_UNMOUNT"</span><span class="token punctuation">}</span>       <span class="token punctuation">,</span>    
    <span class="token punctuation">}</span><span class="token punctuation">;</span>  

    <span class="token keyword">int</span> monitor <span class="token operator">=</span> <span class="token function">inotify_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> monitor <span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"monitor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">int</span> watcher <span class="token operator">=</span> <span class="token function">inotify_add_watch</span><span class="token punctuation">(</span>monitor<span class="token punctuation">,</span> target<span class="token punctuation">,</span> IN_ALL_EVENTS<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> watcher  <span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"inotify_add_watch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    FILE <span class="token operator">*</span>monitor_file <span class="token operator">=</span> <span class="token function">fdopen</span><span class="token punctuation">(</span>monitor<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">char</span> last_name<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">/* event:inotify_event -> name:char[event.len] */</span>  
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        inotify_event event<span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">freadsome</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">,</span> monitor_file<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"freadsome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">freadsome</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> event<span class="token punctuation">.</span>len<span class="token punctuation">,</span> monitor_file<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"FD: %d\n"</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">puts</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token function">strcpy</span><span class="token punctuation">(</span>last_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  

        <span class="token comment" spellcheck="true">/* 显示event的mask的含义 */</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>event_masks<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EventMask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>mask <span class="token operator">&amp;</span> event_masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%s\n"</span><span class="token punctuation">,</span> event_masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  </code></pre>
<p>运行结果： vim 中 对监测目录中的 inotify.cc 进行保存</p>
<pre class=" language-c"><code class="language-c"><span class="token number">4913</span>
    IN_CREATE
    IN_OPEN
    IN_ATTRIB
    IN_CLOSE_WRITE
    IN_DELETE
inotify<span class="token punctuation">.</span>cc
    IN_MOVED_FROM
inotify<span class="token punctuation">.</span>cc<span class="token operator">~</span>
    IN_MOVED_TO
inotify<span class="token punctuation">.</span>cc
    IN_CREATE
    IN_OPEN
    IN_MODIFY
    IN_CLOSE_WRITE
    IN_ATTRIB
inotify<span class="token punctuation">.</span>cc<span class="token operator">~</span>
    IN_DELETE</code></pre>
<p>可以看到，vim保存文件的流程为<br>创建一个4913文件用于检测vim对目录的控制权限<br>把inotify.cc更名为inotify.cc~<br>新建inotify.cc，并写入buffer<br>删除inotify.cc</p>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://man7.org/linux/man-pages/man7/inotify.7.html" target="_blank" rel="noopener" title="http://man7.org/linux/man-pages/man7/inotify.7.html">http://man7.org/linux/man-pages/man7/inotify.7.html</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>inotify</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下VS2019编译Qt5.13.2源码</title>
    <url>/2020/06/28/qt-compile-windows/</url>
    <content><![CDATA[<h1 id="编译条件"><a href="#编译条件" class="headerlink" title="编译条件"></a>编译条件</h1><ul>
<li>Python2.7.5 or later；</li>
<li>VS2019；</li>
<li>Qt5.13.2源码；</li>
<li>pure</li>
<li>ruby</li>
</ul>
<h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><blockquote>
<p><a href="http://mirror.bit.edu.cn/qtproject/official_releases/qt/5.14/5.14.2/" target="_blank" rel="noopener" title="http://mirror.bit.edu.cn/qtproject/official_releases/qt/5.14/5.14.2/">http://mirror.bit.edu.cn/qtproject/official_releases/qt/5.14/5.14.2/</a></p>
</blockquote>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.13/5.13.2/single/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.13/5.13.2/single/</a></p>
<p><img src="/2020/06/28/qt-compile-windows/windows_build_qt_source_debug2.jpg" alt> </p>
<h1 id="解压到文件夹"><a href="#解压到文件夹" class="headerlink" title="解压到文件夹"></a>解压到文件夹</h1><p>创建文件夹 qt5.13_build_mt</p>
<p>现在目录是这样</p>
<p><img src="/2020/06/28/qt-compile-windows/windows_build_qt_source_debug1.jpg" alt> </p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="打开VS2019的命令行工具"><a href="#打开VS2019的命令行工具" class="headerlink" title="打开VS2019的命令行工具"></a>打开VS2019的命令行工具</h2><ul>
<li>tips，这样configure不用指定编译器了</li>
</ul>
<p><img src="/2020/06/28/qt-compile-windows/windows_build_qt_source_debug4.jpg" alt> </p>
<h3 id="进入解压的Qt源码目录"><a href="#进入解压的Qt源码目录" class="headerlink" title="进入解压的Qt源码目录"></a>进入解压的Qt源码目录</h3><p>tips</p>
<ul>
<li>直接终端 <code>D:</code> 就是进入D盘。</li>
<li>进入文件夹命令是<code>cd</code></li>
<li>返回上一级目录是<code>cd ..</code></li>
<li>列出当前目录所有文件是 <code>dir</code></li>
</ul>
<p><img src="/2020/06/28/qt-compile-windows/windows_build_qt_source_debug3.jpg" alt> </p>
<h3 id="输入编译脚本"><a href="#输入编译脚本" class="headerlink" title="输入编译脚本"></a>输入编译脚本</h3><p>在当前终端输入脚本 configure Qt</p>
<pre class=" language-shell"><code class="language-shell">configure -confirm-license -opensource -debug -prefix "D:\QtVersion\Qt5.13_Build_MT_X64\qt5.13_build_mt" -qt-sqlite -qt-zlib -qt-libpng -qt-libjpeg -nomake tests -no-compile-examples -nomake examples </code></pre>
<p>别忘记自己改下 prefix的位置</p>
<p>configure完成之后直接</p>
<pre class=" language-shell"><code class="language-shell">nmake
nmake install</code></pre>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>进入prefix的目录<br><img src="/2020/06/28/qt-compile-windows/windows_build_qt_source_debug5.jpg" alt> </p>
<p>编译成功，不管是configure还是nmake都没有啥错。</p>
<p>PS。我看还有jom编译Qt的方法，原谅我对windows的编译不熟悉。有大佬可以补充下，或者给个完成的链接，我补充上。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>QImage转QByteArray</title>
    <url>/2020/06/28/qimage-zhuan-qbytearray/</url>
    <content><![CDATA[<pre class=" language-cpp"><code class="language-cpp">
QImage img_enrll<span class="token punctuation">;</span>
QByteArray arr<span class="token punctuation">;</span>
QBuffer <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>
img_enrll<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token string">"yourformat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>或者</p>
<pre class=" language-cpp"><code class="language-cpp">QByteArray arr <span class="token operator">=</span> QByteArray<span class="token operator">::</span><span class="token function">fromRawData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token function">byteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QImage</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下编译Qt5.14源码</title>
    <url>/2020/06/28/qt-compile-linux/</url>
    <content><![CDATA[<h1 id="0"><a href="#0" class="headerlink" title="0"></a>0</h1><p>如果你英文够好，可以直接去官方wiki看教程<br><a href="https://wiki.qt.io/Building_Qt_5_from_Git" target="_blank" rel="noopener">https://wiki.qt.io/Building_Qt_5_from_Git</a></p>
<p>懒得话，还是看我的吧（逃</p>
<h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><p>首先下载这个文件<br><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.14/5.14.0/single/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.14/5.14.0/single/</a></p>
<p>下载这个，这个是所有的源码。打包成的一个文件</p>
<p><img src="/2020/06/28/qt-compile-linux/linux_build_qt_source1.jpg" alt> </p>
<p>然后解压</p>
<pre class=" language-shell"><code class="language-shell">tar xvf qt-everywhere-src-5.14.0.tar.xz </code></pre>
<p>在当前目录创建文件夹</p>
<pre class=" language-shell"><code class="language-shell">mkdir build_qt5.14</code></pre>
<p>现在目录有这几个文件夹</p>
<p><img src="/2020/06/28/qt-compile-linux/linux_build_qt_source2.jpg" alt> </p>
<p>一个个解释：</p>
<ul>
<li>build_qt5.14 是一会儿Qt要安装的位置</li>
<li>qt-everywhere-src-5.14.0 是解压好的文件夹</li>
<li>qt-everywhere-src-5.14.0.tar.xz 是下载的Qt源码</li>
</ul>
<h1 id="安装环境搭建"><a href="#安装环境搭建" class="headerlink" title="安装环境搭建"></a>安装环境搭建</h1><pre class=" language-shell"><code class="language-shell">sudo apt-get build-dep qt5-default
sudo apt-get install libxcb-xinerama0-dev
sudo apt-get install build-essential perl python git
sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev</code></pre>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>这次我们不编译web相关的模块。<br>进入解压好的文件夹</p>
<pre><code>cd qt-everywhere-src-5.14.0</code></pre><h3 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h3><p>编译脚本。本次编译debug版本的Qt方便以后学习用。（主要是比Release的快</p>
<pre class=" language-shell"><code class="language-shell">./configure -prefix /home/zhangpf/QtVersion/build_qt5.14 -debug -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</code></pre>
<p>稍微解释下</p>
<ul>
<li>prefix 是一会儿install的路径，如果不制定，就会安装到默认的/usr/local/ 下</li>
<li>debug 是编译debug版本的Qt</li>
<li>opensource 是选定开源版本</li>
<li>confirm-license 是确定下协议<br>其它的参数可以忽略掉</li>
</ul>
<p>结束会提示，可以make了。</p>
<p><img src="/2020/06/28/qt-compile-linux/linux_build_qt_source3.jpg" alt> </p>
<h2 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h2><p>现在电脑默认是gcc编译器，也可以指定clang作为编译器。<br>我本地gcc版本<br>gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12) </p>
<p>先按照默认的来吧,假定你机器4核。</p>
<pre class=" language-shell"><code class="language-shell">make -j4 //编译
make install //安装到prefix的目录</code></pre>
<h1 id="验证我们自己编译的Qt"><a href="#验证我们自己编译的Qt" class="headerlink" title="验证我们自己编译的Qt"></a>验证我们自己编译的Qt</h1><p>进入目录<br>/home/zhangpf/QtVersion/build_qt5.14</p>
<p><img src="/2020/06/28/qt-compile-linux/linux_build_qt_source4.jpg" alt> </p>
<p>bin里就有我们编译的二进制的Qt;<br>进入bin目录</p>
<pre class=" language-shell"><code class="language-shell">./qmake -v</code></pre>
<p>看图，已经编译成功</p>
<p><img src="/2020/06/28/qt-compile-linux/linux_build_qt_source5.jpg" alt></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt简介</title>
    <url>/2020/06/28/qt-jian-jie/</url>
    <content><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>本文章遵循协议 原文链接 <a href="https://www.devbean.net/2012/08/qt-study-road-2-qt-intro/" target="_blank" rel="noopener">豆子</a></p>
<p><a href="https://creativecommons.org/licenses/by-nd/3.0/deed.zh" target="_blank" rel="noopener">知识共享署名-禁止演绎 3.0 未本地化版本许可协议</a></p>
<h1 id="Qt简介"><a href="#Qt简介" class="headerlink" title="Qt简介"></a>Qt简介</h1><p>Qt 是一个著名的 C++ 应用程序框架。你并不能说它只是一个 GUI 库，因为 Qt 十分庞大，并不仅仅是 GUI 组件。使用 Qt，在一定程度上你获得的是一个“一站式”的解决方案：不再需要研究 STL，不再需要 C++ 的<string>，不再需要到处去找解析 XML、连接数据库、访问网络的各种第三方库，因为 Qt 自己内置了这些技术。 </string></p>
<p>Qt 是一个跨平台的框架。跨平台 GUI 通常有三种实现策略：</p>
<p>API 映射：API 映射是说，界面库使用同一套 API，将其映射到不同的底层平台上面。大体相当于将不同平台的 API 提取公共部分。比如说，将 Windows 平台上的按钮控件和 Mac OS 上的按钮组件都取名为 Button。当你使用 Button 时，如果在 Windows 平台上，则编译成按钮控件；如果在 Mac OS 上，则编译成按钮组件。这么做的好处是，所有组件都是原始平台自有的，外观和原生平台一致；缺点是，编写库代码的时候需要大量工作用于适配不同平台，并且，只能提取相同部分的 API。比如 Mac OS 的文本框自带拼写检测，但是 Windows 上面没有，则不能提供该功能。这种策略的典型代表是 wxWidgets。这也是一个标准的 C++ 库，和 Qt 一样庞大。它的语法看上去和 MFC 类似，有大量的宏。据说，一个 MFC 程序员可以很容易的转换到 wxWidgets 上面来。</p>
<p>API 模拟：前面提到，API 映射会“缺失”不同平台的特定功能，而 API 模拟则是解决这一问题。不同平台的有差异 API，将使用工具库自己的代码用于模拟出来。按照前面的例子，Mac OS 上的文本框有拼写检测，但是 Windows 的没有。那么，工具库自己提供一个拼写检测算法，让 Windows 的文本框也有相同的功能。API 模拟的典型代表是 wine —— 一个 Linux 上面的 Windows 模拟器。它将大部分 Win32 API 在 Linux 上面模拟了出来，让 Linux 可以通过 wine 运行 Windows 程序。由此可以看出，API 模拟最大优点是，应用程序无需重新编译，即可运行到特定平台上。另外一个例子是微软提供的 DirectX，这个开发库将屏蔽掉不同显卡硬件所提供的具体功能。使用这个库，你无需担心硬件之间的差异，如果有的显卡没有提供该种功能，SDK 会使用软件的方式加以实现。（关于举例，可以参考文末一段精彩的讨论。）</p>
<p>GUI 模拟：任何平台都提供了图形绘制函数，例如画点、画线、画面等。有些工具库利用这些基本函数，在不同绘制出自己的组件，这就是 GUI 模拟。GUI 模拟的工作量无疑是很大的，因为需要使用最基本的绘图函数将所有组件画出来；并且这种绘制很难保证和原生组件一模一样。但是，这一代价带来的优势是，可以很方便的修改组件的外观——只要修改组件绘制函数即可。很多跨平台的 GUI 库都是使用的这种策略，例如 gtk+（这是一个 C 语言的图形界面库。使用 C 语言很优雅地实现了面向对象程序设计。不过，这也同样带来了一个问题——使用大量的类型转换的宏来模拟多态，并且它的函数名一般都比较长，使用下划线分割单词，看上去和 Linux 如出一辙。gtk+ 并不是模拟的原生界面，而有它自己的风格，所以有时候就会和操作系统的界面格格不入。），Swing 以及我们的 Qt。</p>
<p>Qt 和 wxWidgets 一样，也是一个标准的 C++ 库。但是它的语法类似于 Java 的 Swing，十分清晰，而且使用信号槽（signal/slot）机制，让程序看起来很明白——这也是很多人优先选择 Qt 的一个很重要的原因。不过，所谓“成也萧何，败也萧何”。这种机制虽然很清楚，但是它所带来的后果是你需要使用 Qt 的 moc 对程序进行预处理，才能够再使用标准的 make 或者 nmake 进行正常的编译，并且信号槽的调用要比普通的函数调用慢大约一个数量级（Qt 4 文档中说明该数据，但 Qt 5 尚未有官方说明）。Qt 的界面也不是原生风格的，尽管 Qt 使用 style 机制十分巧妙地模拟了原生界面。另外值得一提的是，Qt 不仅仅能够运行在桌面环境中，还可以运行在嵌入式平台以及手机平台。</p>
<p>Qt 第一版于 1991 年由 Trolltech （奇趣科技）发布。后来在 2008 年，Nokia 斥资 1.5 亿美元收购 TrollTech，将 Qt 应用于 Symbian 程序开发。2012 年 8 月 9 日，Nokia 将 Qt 以 400 万欧元的价格出售给 Digia。</p>
<p>伴随着 Qt，一直有两种授权协议：商业授权以及开源授权。在 Qt 的早期版本，商业授权包含一些开源授权不提供的组件，但是在近期版本则不存在这个问题。以往人们对 Qt 的开源授权多有诟病。早期版本的 Qt 使用与 GPL 不兼容的协议授权，这直接导致了 KDE 与 GNOME 的战争（由于 Linux 使用 GPL 协议发布，GPL 协议具有传染性，作为 Linux 桌面环境的 KDE 却是基于与 GPL 不兼容的 Qt 开发，这就不遵守 GPL 协议）。不过，现在 Qt 的开源版本使用的是 GPLv3 以及 LGPL 协议。这意味着，你可以将 Qt 作为一个库连接到一个闭源软件里面。可以说，Qt 协议的争议已经不存在了。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Qt的历史</title>
    <url>/2020/06/28/guan-yu-qt-de-li-shi/</url>
    <content><![CDATA[<h1 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h1><p>版权声明：本文为博主原创文章，本文章遵循协议<a href="https://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener">CC 4.0 BY-SA</a>，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://blog.csdn.net/u011012932/article/details/49826231" target="_blank" rel="noopener">https://blog.csdn.net/u011012932/article/details/49826231</a></p>
<h1 id="什么是Qt"><a href="#什么是Qt" class="headerlink" title="什么是Qt"></a>什么是Qt</h1><p>Qt是一个针对桌面、嵌入式、移动设备的一个跨平台的应用程序开发框架，支持的平台包括Linux、OS X、Windows、VxWorks、QNX、Android、iOS、BlackBerry(黑莓)、Sailfish OS（旗鱼操作系统）等。<br>Qt 1991年由Trolltech-奇趣科技（成立于1994年）开发，2008年，Trolltech被Nokia收购，2012年，Qt被Digia收购。<br>Qt是基于C++编写的框架，它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。预处理器，MOC（全称：Meta-Object Compiler-元对象编译器）用于扩展C++，如：信号和槽的特性。在编译之前，先使用MOC分析Qt扩展的C++源文件（检测是否包含Q_OBJECT宏），然后生成符合C++标准的源文件（新文件名将会由moc_加上原文件名构成）。因此框架本身和应用程序/库使用它能被任何符合标准C++的编译器（像Clang、GCC、 ICC、MinGW 和MSVC）所编译。</p>
<h1 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h1><p>Qt的第一个商业版本于1995年推出，随后Qt的发展就很快了，下面是Qt发展史上的一 些里程碑，从之前的Qt1.x开始到现在的Qt5.x。</p>
<h2 id="Qt1-3"><a href="#Qt1-3" class="headerlink" title="Qt1-3"></a>Qt1-3</h2><table>
<thead>
<tr>
<th align="center">版本</th>
<th>发布日期</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1.40</td>
<td>10 July 1998</td>
</tr>
<tr>
<td align="center">1.41</td>
<td>2 October 1998</td>
</tr>
<tr>
<td align="center">1.42</td>
<td>19 December 1998</td>
</tr>
<tr>
<td align="center">1.44</td>
<td>13 March 1999</td>
</tr>
<tr>
<td align="center">2.0</td>
<td>26 June 1999</td>
</tr>
<tr>
<td align="center">2.1</td>
<td>13 April 2000</td>
</tr>
<tr>
<td align="center">2.2</td>
<td>7 December 2000</td>
</tr>
<tr>
<td align="center">2.3</td>
<td>8 March 2001</td>
</tr>
<tr>
<td align="center">3.0</td>
<td>16 October 2001</td>
</tr>
<tr>
<td align="center">3.1</td>
<td>14 November 2001</td>
</tr>
<tr>
<td align="center">3.2</td>
<td>24 July 2003</td>
</tr>
<tr>
<td align="center">3.3</td>
<td>5 February 2004</td>
</tr>
</tbody></table>
<h2 id="Qt4"><a href="#Qt4" class="headerlink" title="Qt4"></a>Qt4</h2><p>Trolltech在2005年6月28发布了Qt4.0，介绍了框架的五个新技术：</p>
<ul>
<li>一套模板容器类</li>
<li>为item views提供了一套模型 - 视图 - 控制器体系结构</li>
<li>二维绘图框架<ul>
<li>为低级文本布局提供了Unicode文本渲染器的公共API</li>
</ul>
</li>
<li>基于Action的MainWindow，包括：工具栏，菜单和停靠体系</li>
</ul>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th>发布日期</th>
<th align="center">新特性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">4.1</td>
<td>20 December 2005</td>
<td align="center">推出集成SVG微小的支持，一个PDF的后端Qt打印系统，以及其他一些功能。</td>
</tr>
<tr>
<td align="center">4.2</td>
<td>4 October 2006</td>
<td align="center">介绍了Windows Vista的支持，部件的CSS样式支持，以及QGraphicsView框架-在屏幕上高效渲染成千上万个2D对象，以取代Qt3.x中的QCanvas类。</td>
</tr>
<tr>
<td align="center">4.3</td>
<td>30 May 2007</td>
<td align="center">改进了Windows Vista支持，改进了OpenGL引擎、SVG文件的生成，增加了QtScript（基于QSA的ECMAScript脚本引擎）。</td>
</tr>
<tr>
<td align="center">4.4</td>
<td>6 May 2008</td>
<td align="center">特性包含了改进multimedia的支持（使用Phonon），增强XML支持，集中共享内存的IPC框架，以及WebKit集成。</td>
</tr>
<tr>
<td align="center">4.5</td>
<td>3 March 2009</td>
<td align="center">主要包括功能有QtCreator，改进图形引擎，WebKit的集成，OpenDocument格式写入支持和新的许可选项，以及OS X Cocoa框架的支持。</td>
</tr>
<tr>
<td align="center">4.6</td>
<td>1 December 2009</td>
<td align="center">新的API框架-动画、手势、多点触控。支持Symbian、Windows 7和Mac OS X 10.6，支持扩展一些Unix系统。也取得了整体性能的改进。</td>
</tr>
<tr>
<td align="center">4.7</td>
<td>21 September 2010</td>
<td align="center">QML 和 Qt Quick</td>
</tr>
<tr>
<td align="center">4.8</td>
<td>15 December 2011</td>
<td align="center">Qt的平台抽象化，支持单线程OpenGL，多线程HTTP，优化了文件系统访问。</td>
</tr>
</tbody></table>
<h2 id="Qt5"><a href="#Qt5" class="headerlink" title="Qt5"></a>Qt5</h2><p>Qt5于2012年12月19正式发布，这个新版本标志着平台的重大变化，硬件加速的显卡，QML和JavaScript发挥了重要作用。传统的C++ - 仅QWidgets继续得到支持，但没有从新体系结构的性能改进中受益，Qt5带来了速度及用户界面上的显著改进，Qt5开发框架移动至qt-project.org。外部开发者可以为Digia公司提交补丁，并让他们审查。</p>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th align="left">发布日期</th>
<th>新特性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5.0</td>
<td align="left">19 December 2012</td>
<td>对Qt4.x进行一系列重大改革。完成Wayland的支持。</td>
</tr>
<tr>
<td align="center">5.1</td>
<td align="left">3 July 2013</td>
<td>新模块以及Android和iOS实验性的支持技术预览。</td>
</tr>
<tr>
<td align="center">5.2</td>
<td align="left">12 December 2013</td>
<td>第一个官方支持Android和iOS的版本。</td>
</tr>
<tr>
<td align="center">5.3</td>
<td align="left">20 May 2014</td>
<td>集中于稳定性和可用性</td>
</tr>
<tr>
<td align="center">5.4</td>
<td align="left">10 December 2014</td>
<td>完整的WinRT和Windows Phone支持。介绍基于Chromium的Qt WebEngine内部组件，将在未来的版本中取代QtWebKit。动态的GL图形切换在Windows（ANGLE或OpenGL）后台，本地化的“外观和感觉”在QtQuick的控制在Android平台的后端，引入Qt WebChannels提供QObject到WebSockets的桥梁。最初仅使用Qt WebKit的集成，但还正在5.5下进行Qt WebEngine集成</td>
</tr>
<tr>
<td align="center">5.5</td>
<td align="left">1 July 2015</td>
<td>Qt5.5根据官方网站提供的功能：新模块： Qt 3D、Qt Canvas 3D、Qt Location。过时的模块的：Qt WebKit、Qt Declarative (Qt Quick 1)、Qt Script。蓝牙API的最终版本，新的视频过滤框架，Camera和QML MediaPlayer改善iOS，适用于Linux的NFC，SSL/TLS改进Qt Network</td>
</tr>
<tr>
<td align="center">5.6</td>
<td align="left">Alpha release: 8 September 2015 Final release plan: 8 December 2015</td>
<td>值得注意的改进：Qt Core：一些性能改进，包括减少动态性能的内存使用情况和性能最佳化的QString Qt Network：支持HTTP重定向 Qt GUI：改进了跨平台的OpenGL ES3.0和3.1 Qt Multimedia：添加QML类型播放列表 Qt WebEngine：基于Chromium 45，自定义URL方案的API，拦截和阻止网络请求，并跟踪或阻止Cookie QtQML：减少内存消耗 嵌入式平台：支持Intel Atom-based NUCs 过时的模块：Qt Script、Qt Enginio 已删除模块：Qt WebKit, Qt Declarative (Qt Quick 1)</td>
</tr>
</tbody></table>
<h1 id="平台支持"><a href="#平台支持" class="headerlink" title="平台支持"></a>平台支持</h1><p>Qt支持下述平台：</p>
<ul>
<li>MS/Windows - 95、98、NT4.0、ME、2000、XP 、Vista、Win7、win8、win2008、win10<ul>
<li>Unix/X11-Linux、SunSolaris、HP-UX、CompaqTru64 UNIX、IBMAIX、SGI IRIX、FreeBSD、BSD/OS和其它很多X11平台</li>
<li>Macintosh -Mac OS X</li>
<li>Embedded - 有帧缓冲(framebuffer)支持的嵌入式Linux平台，Windows CE</li>
<li>Symbian、Symbian^3、Symbian Anna、Symbian Belle、MeeGo<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2>Qt同X Window上的 Motif、Openwin、GTK 等图形界面库和 Windows平台上的 MFC、OWL、VCL、ATL是同类型的东西，但是 Qt 具有下列优点：</li>
</ul>
</li>
</ul>
<h3 id="优良的跨平台特性"><a href="#优良的跨平台特性" class="headerlink" title="优良的跨平台特性"></a>优良的跨平台特性</h3><ul>
<li>Qt支持下列操作系统: Microsoft Windows 95/98， Microsoft Windows NT， Linux， Solaris， SunOS， HP-UX， Digital UNIX (OSF/1， Tru64)， Irix， FreeBSD， BSD/OS， SCO， AIX， OS390，QNX 等等。</li>
</ul>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>Qt 的良好封装机制使得 Qt 的模块化程度非常高，可重用性较好，对于用户开发来说是非常 方便的。 Qt 提供了一种称为 signals/slots 的安全类型来替代 callback，这使得各个元件 之间的协同工作变得十分简单。<h3 id="丰富的-API"><a href="#丰富的-API" class="headerlink" title="丰富的 API"></a>丰富的 API</h3></li>
<li>Qt包括多达250个以上的C++类，还替供基于模板的collections、serialization、 file、I/O device、 directory management、date/time 类。甚至还包括正则表达式的处理功能。<h3 id="支持-2D-3D-图形渲染，支持-OpenGL"><a href="#支持-2D-3D-图形渲染，支持-OpenGL" class="headerlink" title="支持 2D/3D 图形渲染，支持 OpenGL"></a>支持 2D/3D 图形渲染，支持 OpenGL</h3><h3 id="大量的开发文档"><a href="#大量的开发文档" class="headerlink" title="大量的开发文档"></a>大量的开发文档</h3><h3 id="XML-支持"><a href="#XML-支持" class="headerlink" title="XML 支持"></a>XML 支持</h3></li>
</ul>
<h1 id="Qt-Creator"><a href="#Qt-Creator" class="headerlink" title="Qt Creator"></a>Qt Creator</h1><p>简介<br>在发布 Qt 4.6 的同时，作为 Qt 开发跨平台 IDE 的Qt Creator也发布了更新版本。Qt Creator 1.3 和 Qt 4.6共同构成的 Qt SDK，包含了开发跨平台应用程序所需的全部功能。</p>
<p>Qt Creator是一个用于Qt开发的轻量级跨平台集成开发环境。Qt Creator可带来两大关键益处：提供首个专为支持跨平台开发而设计的集成开发环境 (IDE)，并确保首次接触Qt框架的开发人员能迅速上手和操作。即使不开发Qt应用程序，Qt Creator也是一个简单易用且功能强大的IDE。</p>
<p>Qt Creator 包括项目生成向导、高级的 C++ 代码编辑器、浏览文件及类的工具、集成了 Qt Designer、Qt Assistant、Qt Linguist、图形化的 GDB 调试前端，集成 qmake 构建工具等。<br>功能和优势</p>
<p>QtCreator 主要是为了帮助新 Qt 用户更快速入门并运行项目，还可提高有经验的 Qt 开发人员的工作效率。</p>
<p>使用强大的 C++ 代码编辑器可快速编写代码</p>
<p>语法标识和代码完成功能输入时进行静态代码检验以及提示样式上下文相关的帮助代码折叠括号匹配和括号选择模式高级编辑功能</p>
<p> 使用浏览工具管理源代码</p>
<p>集成了领先的版本控制软件，包括 Git、Perforce 和 Subversion开放式文件，无须知晓确切的名称或位置搜索类和文件跨不同位置或文件沿用符号在头文件和源文件，或在声明和定义之间切换为Qt跨平台开发人员的需求而量身定制</p>
<p>集成了特定于 Qt 的功能，如信号与槽 (Signals &amp; Slots)图示调试器， 对 Qt 类结构可一目了然集成了 Qt Designer 可视化布局和格式构建器只需单击一下就可生成和运行 Qt 项目</p>
<h1 id="Qt-Designer"><a href="#Qt-Designer" class="headerlink" title="Qt Designer"></a>Qt Designer</h1><p>Qt Designer被称为Qt设计师，用于设计和构建图形用户界面（Qt Widgets）。你可以组合和自定义窗口或对话框（所见即所得），并使用不同的风格和分辨率进行测试。用Qt Designer创建的窗口部件和表格无缝集成编程代码，采用Qt信号和槽机制，这样就可以轻松地分配图形元素的行为。在Qt设计师中设置的所有属性可以动态地在代码中进行更改。此外，类似插件推广和自定义插件功能，可以使用自己的组件来使用Qt Designer。<br>注意：你也可以选择使用Qt Quick来设计用户界面，而不是Qt Widgets。这样更容易写各种各样的应用。它可以完全定制外观，触摸反应的元素，流畅的动画过渡，支持OpenGL图形加速功能。如果刚接触Qt Designer，可以看看Qt设计师文档。有关如何使用Qt设计师，请参阅Qt设计师快速入门。</p>
<h1 id="Qt-Linguist"><a href="#Qt-Linguist" class="headerlink" title="Qt Linguist"></a>Qt Linguist</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Qt Linguist被称为Qt语言家。主要任务是读取翻译文件、为翻译人员提供友好的翻译界面，是用于界面国际化的重要工具。它能帮助你很容易读懂C++语言。<br>使用方式<br>lupdate可以把.h、.cpp、.ui中需要翻译的字符串提取出来形成.ts文件，然后用linguist翻译。用lerealse生成.qm。<br>翻译一个含有tr()调用的Qt应用程序需要以下三步：</p>
<ol>
<li>运行ludate，从应用程序的源代码中提取所有用户可见的字符串。</li>
<li>使用Qt Linguist翻译该应用程序。</li>
<li>运行lrelease，生成二进制.qm文件，应用程序可以使用QTranslator加载这个文件。<br>如果开发工程中出现翻译改动，可以多次执行此过程！</li>
</ol>
<h1 id="Qt-Assistant"><a href="#Qt-Assistant" class="headerlink" title="Qt Assistant"></a>Qt Assistant</h1><p>Qt Assistant被称为Qt助手，是Qt自带的一款可定制、可重新发行的帮助文件浏览器。它支持HTML文件，用户可以利用其定制自己的功能强大的帮助文档浏览器。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>MFC、WTL、WPF、wxWidgets、Qt、GTK 各有什么特点</title>
    <url>/2020/06/28/mfc-wtl-wpf-wxwidgets-qt-gtk-ge-you-shi-me-te-dian/</url>
    <content><![CDATA[<p>作者：姚冬<br>链接：<a href="https://www.zhihu.com/question/23480014/answer/24809080" target="_blank" rel="noopener">https://www.zhihu.com/question/23480014/answer/24809080</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>谢邀（终于用上这个高大上的词汇了，真的有点小激动呢）</p>
<h1 id="WTL"><a href="#WTL" class="headerlink" title="WTL"></a>WTL</h1><p>WTL都算不上什么Framework，就是利用泛型特性对Win API做了层封装，设计思路也没摆脱MFC的影响，实际上用泛型做UI Framework也只能算是一次行为艺术，这个思路下继续发展就会变得没法用了，比如 代码过于复杂，编译太慢，出错不好调试等问题难以解决。<br>而且封装得也不完全，还是随处可见 HWND HDC之类的东西。<br>用途主要是写一些很小的程序，或者作为其他UI框架的后端实现部分，比如我写过一个小框架用来做安装卸载程序，非常小，其中创建管理窗口部分是用WTL的。</p>
<h1 id="MFC"><a href="#MFC" class="headerlink" title="MFC"></a>MFC</h1><p>MFC是更高级点的Win API封装，比WTL封装彻底，很难见到HWND HDC了，也提供了不少实用工具类，比如高级控件，泛型容器，IO访问，网络协议等。除此之外，还提供了一些基本框架，比如 Document/View，这就是个MVC的简化版本，只有MV，但是对于数据的管理，消息的传递等又没有什么约束，导致Doc/View被用得乱七八糟。尤其是对事件处理的模型，消息映射是功能简陋，而且容易出错的方式，唯一优点是性能好。 从VC++ 1.X就有MFC了，那时整个UI界的设计思想都比较落后（除了Apple），MFC又背负了沉重的兼容性包袱，比如vc++ 1.52的MFC程序到了vc2003稍加修改都可以编译，导致MFC后期没有什么发展，就是沿着老的思路完善了些细节，添加了些组件，但是根本性的设计问题没有改进。</p>
<h1 id="GTK"><a href="#GTK" class="headerlink" title="GTK"></a>GTK</h1><p>GTK，这个吃了语言的亏，用C写面向对象实在是痛苦，虽然在思想上比MFC要先进了些，但是写出来的代码比MFC要罗嗦很多了。相比MFC，多了Layout的概念，事件处理上有了Signal/slot，虽然用起来很麻烦。</p>
<h1 id="wxWidget"><a href="#wxWidget" class="headerlink" title="wxWidget"></a>wxWidget</h1><p>wxWidgets，这个基本就是个跨平台的MFC，对各个平台的差异做了抽象，实际上后端大多还是用平台原生的API实现，好多控件都是直接用系统原生的。有wxWidgets for GTK+的版本，后端就是GTK+，wxWidgets就是一层壳。这也是wxWidgets的优点，它编译出来的程序发行包比较小，性能也不错。<br>以上这些就是上世纪90年代的UI Framework技术水平了，至今它们也依然没有太多进步。<br>下面来谈谈21世纪的技术。</p>
<h1 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h1><p>Qt，虽然它也是上世纪90年代出现的，但是它在21世纪有了长足的进步。应该说它的起点就比较高，一开始就定位跨平台，而且不满足于简单封装系统API，而是要自己创造出一套完整的API和框架，甚至要代替系统API，所以不仅仅是做UI，而是涉及到了APP开发所用到的所有东西，包括网络，数据库，多媒体，脚本引擎等。signal/slot是Qt发明的，这是事件通知模型里C++语言的最佳实现了，甚至我都觉得这该写进C++标准，估计C++委员会的老顽固们是从不写GUI的。<br>早期的QT也是没有DirectUI的概念的，每一个QWidget都对应一个原生窗口，从Qt4.4开始，只有顶层QWidget才是原生窗口，而Child Widget是Alien Widget，只是个抽象的图层不对应原生窗口，这就实现了DirectUI的概念，很多图形效果也就变得可能了，比如窗口层叠透明效果。<br>在4.8后实现了QPA(Qt Platform Abstraction)，这就使移植Qt变得很容易，目前Qt是支持平台最多的框架没有之一。<br>由于早期授权的问题，Qt对于开源社区不是很友好，导致推广不太顺利，直到它改成了LGPL方式，如果Qt能早点想开了，恐怕就没有wxWidgets的生存空间了。<br>Qt的缺点也是有的，就是太大，不过可以自己剪裁，我可以把QT库剪裁到发行包压缩后2.5MB。<br>WPF，微软在Win Form的思路上走到死胡同后，终于痛下决心用正确的方法开发UI库了。21世纪的UI一定是定义出来的，绝对不能是代码写出来的，所以有了XAML这个强大的定义工具，不但可以定义UI布局，还包括图形动画效果，消息响应方式等。配合C#这种优秀的语言，更是如虎添翼。但是问题也很明显，就是过于庞大，不仅开发时要用到庞大的IDE和设计工具，发行的安装包也十分巨大，所以目前还是很少有人拿他写通用软件客户端的，大多是做企业项目时写专用客户端。<br>大概4-5年前吧疼讯曾经用WPF写了个QQ，但是只实现了基本功能就已经比C++客户端大好多了，而且运行缓慢，主要是太吃内存，而且那时WPF的优化还不充分。<br>最后我想补充下真正的UI库之王，cocoa。</p>
<h1 id="cocoa"><a href="#cocoa" class="headerlink" title="cocoa"></a>cocoa</h1><p>Apple的成功有很多原因，其中之一就是cocoa，cocoa理念十分先进，而且出来得早，我都怀疑Qt和WPF有不少思想都是借鉴cocoa的。<br>定义式的UI，用xib就可以定义UI的绝大部分细节，而且提供所见即所得的可视化设计工具。<br>严格的MVC，而且定义非常清晰，分工明确。<br>signal/slot，虽然不叫这个名字，但思想就是，而且真的是拖动鼠标就能connect。<br>提供了ARC，闭包和反射，给UI开发带来巨大的便利性，当然这得益于Objective-C这个语言。<br>再补充下 Borland的OWL和VCL。<br>我是从Borland C++3.0和Delphi 1.0开始用的，那时的Borland看来很有前途的，可惜后来一系列决策失误导致现在这个公司几乎消失了，同学们不要再往这个坑里跳了。<br>OWL曾经和MFC是竞争对手，设计思想也差不多，个人感觉OWL的API设计更优雅一点，但是在市场上OWL被MFC彻底击败。</p>
<h1 id="Delphi"><a href="#Delphi" class="headerlink" title="Delphi"></a>Delphi</h1><p>Delphi是神作，它在RAD（快速应用开发）领域长时间没有对手，直到BS架构取代CS架构。Delphi的特点就是简单、开发快，单纯就写个基本可用的应用来说，可能至今都没有比他更快的，但是缺点就是丑，基本大多数Delphi应用都是一大堆控件堆积在一起，很不美观，另外由于Pascal语言的限制无法和现有大量的C/C++代码融合。虽然后来有C++ Builder，但是Builder里简单和快的优点也消失了。Borland的C++编译器越做越差，导致后来开源项目都不太愿意兼容这个编译器了。</p>
<h1 id="VLC"><a href="#VLC" class="headerlink" title="VLC"></a>VLC</h1><p>VCL准确地说不是UI库，而是一套组件接口规范，类似COM ActiveX。delphi和C++builder都是基于这个规范构建了基础库。<br>UI库是个很大的话题，够写好几本书来探讨的，我这里就是随便写点自己的感受。<br>单纯讨论每个库的优劣是没有意义的，而是要放到具体的应用场景里来看，每个库都有自己擅长的场景。</p>
<h1 id="总计"><a href="#总计" class="headerlink" title="总计"></a>总计</h1><p>如果仅在Windows下，追求程序小巧，用WTL，不足的地方自己实现去吧，但是视觉效果就呵呵了。<br>如果可以大一点，还要好看点，那就Qt。<br>如果完全不在乎大小，只要视觉效果华丽，就用WPF，如果把开发工具价格也考虑进来，那么土豪才会选WPF呢。<br>MFC就是个鸡肋了，除非你现有的工程师不会用别的，或者有历史遗留代码要保持兼容。<br>如果要求跨平台，那么就用Qt，wxWidgets和GTK+跟现在的Qt比起来没有什么优势了。<br>如果是iOS Android，那么最好用原生UI库，除非你写游戏。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux搭建Qt5.14开发环境-傻瓜式</title>
    <url>/2020/06/29/qt-linux-lazy/</url>
    <content><![CDATA[<h1 id="0-安装c-开发环境"><a href="#0-安装c-开发环境" class="headerlink" title="0 安装c++开发环境"></a>0 安装c++开发环境</h1><p>一般的系统应该都默认装了=。=</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get update
sudo apt-get install gcc g++ </code></pre>
<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>输入网址 <a href="http://download.qt.io/archive/qt/5.14/5.14.0/" target="_blank" rel="noopener">http://download.qt.io/archive/qt/5.14/5.14.0/</a> </p>
<blockquote>
<p>上面的网站，估计下载很慢，这里贴上一个清华源的。<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.14/5.14.0/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.14/5.14.0/</a></p>
</blockquote>
<p>下载run文件，这是Linux上的一个可执行文件的格式</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt1.jpg" alt></p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>下载完成，进入下载目录，右键-终端。执行命令，给可执行权限</p>
<pre class=" language-shell"><code class="language-shell">chmod a+x ./qt-opensource-linux-x64-5.14.0.run</code></pre>
<p>然后终端运行，开始安装</p>
<pre class=" language-shell"><code class="language-shell">./qt-opensource-linux-x64-5.14.0.run</code></pre>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt2.jpg" alt> </p>
<p>一直下一步 or next，自己选择安装目录（这个不讲究，随便一个就行，我这里选择默认的</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt3.jpg" alt> </p>
<p>next</p>
<hr>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt4.jpg" alt> </p>
<p>红框中的两个是必选的，然后我一个个解释</p>
<ul>
<li>Desktop gcc 64-bit 这是Qt预编译好的64位的Qt库。</li>
<li>Developer and Designer Tools 这就是我们的主角QtCreator</li>
<li>Qt WebEngine 这是Qt替代Webkit的库，这个装不装都行。</li>
</ul>
<hr>
<p>接下来就同意人家协议呗，不同意不给用。选LGPL（这个动态链接不花钱</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt5.jpg" alt> </p>
<hr>
<p>安装呗</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt6.jpg" alt> </p>
<hr>
<p>挺快的</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt7.jpg" alt> </p>
<hr>
<p>点击完成，打开QtCreator </p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt8.jpg" alt> </p>
<p>点击工具菜单下的选项，打开</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt9.jpg" alt> </p>
<p>观察Kit的选择，发现Qt的版本已经安装好了，对应的路径也在上面（装上就是配置好的</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt10.jpg" alt> </p>
<p>点开编译器 发现系统自带的GCC也已经识别出来了。（我这里也是什么都没动</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt11.jpg" alt> </p>
<p>然后点开Kit，发现编译器已经选好了，QtVersion也已经好了。（这里也什么都没动<br>这说明环境已经搭建好了。然后点击确定</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt12.jpg" alt> </p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>点击New按钮，然后跟着图一步步来</p>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt13.jpg" alt> </p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt14.jpg" alt> </p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt15.jpg" alt> </p>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt16.jpg" alt> </p>
<h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt17.jpg" alt> </p>
<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt18.jpg" alt> </p>
<h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>然后选咱们刚才配好的Kit（实际上啥都没干。<br><img src="/2020/06/29/qt-linux-lazy/linux_qt19.jpg" alt> </p>
<h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p><img src="/2020/06/29/qt-linux-lazy/linux_qt20.jpg" alt> </p>
<p>点击完成<br>项目就建立好了。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p>右键项目先 执行qmake -&gt; 构建</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt21.jpg" alt> </p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p>发现报错</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt22.jpg" alt> </p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>缺少库而已。装上就行</p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev</code></pre>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt23.jpg" alt> </p>
<h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><p>然后再构建<br>发现通过。</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt24.jpg" alt> </p>
<h3 id="5-succeed"><a href="#5-succeed" class="headerlink" title="5 succeed"></a>5 succeed</h3><p>点击运行，发现运行成功！</p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt25.jpg" alt> </p>
<p><img src="/2020/06/29/qt-linux-lazy/linux_qt26.jpg" alt> </p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，Linux上的Qt环境的搭建已经完成，这个是方式是相当简单的，基本上一直下一步就可以了。</p>
]]></content>
      <categories>
        <category>Qt</category>
        <category>Qt基础教程</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt的基本概念-WIKI</title>
    <url>/2020/06/29/qt-de-ji-ben-gai-nian-wiki/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><h2 id="wiki"><a href="#wiki" class="headerlink" title="wiki"></a>wiki</h2><p>Qt（/ˈkjuːt/，发音同“cute”[4][5][6]）是一个跨平台的C++应用程序开发框架。广泛用于开发GUI程序，这种情况下又被称为部件工具箱。也可用于开发非GUI程序，比如控制台工具和服务器。Qt使用于OPIE、Skype、VLC media player、Adobe Photoshop Elements、VirtualBox与Mathematica[7]以及被Autodesk [8][9]、欧洲空间局[10]、梦工厂[11][12]、Google、HP[13]、KDE、卢卡斯影业[14]、西门子公司[15]、沃尔沃集团[16], 华特迪士尼动画制作公司[17]、三星集团[18]、飞利浦[19]、Panasonic [20]所使用。</p>
<p>它是Digia公司的产品。Qt使用标准的C++和特殊的代码生成扩展（称为元对象编译器（Meta Object Compiler, moc））以及一些宏。通过语言绑定，其他的编程语言也可以使用Qt。</p>
<p>Qt是自由且开放源代码的软件，在GNU宽通用公共许可证（LGPL）条款下发布。所有版本都支持广泛的编译器，包括GCC的C++编译器和Visual Studio。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>Haavard Nord和Eirik Chambe-Eng于1991年开始开发“Qt”，1994年3月4日创立公司，最早名为Quasar Technologies，然后更名为Troll Tech，然后再改为Trolltech，中文名是“奇趣科技”，2008年6月17日被NOKIA公司收购，以增强该公司在跨平台软件研发方面的实力，更名Qt Software。</p>
<p>该工具包名为Qt是因为字母Q在Haavard的Emacs字体特别漂亮，而“t”代表“toolkit”，灵感来自Xt，X toolkit[21]。</p>
<p>2009年5月11日，诺基亚Qt Software宣布Qt源代码管理系统面向公众开放，Qt开发人员可通过为Qt以及与Qt相关的项目贡献代码、翻译、示例以及其他内容，协助引导和塑造Qt未来的发展。为了便于这些内容的管理，Qt Software启用了基于Git和Gitorious开源项目的Web源代码管理系统。</p>
<p>在推出开放式Qt代码库的同时，Qt Software在其网站发布了其产品规划（Roadmap）。其中概述了研发项目中的最新功能，展现了现阶段对Qt未来发展方向的观点，以期鼓励社区提供反馈和贡献代码，共同引导和塑造Qt的未来。2012年8月9日，Digia宣布已完成对诺基亚Qt业务及软件技术的全面收购，并计划将Qt应用到Android、iOS及Windows 8平台上。[22]</p>
<h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><p>使用Qt开发的软件，相同的代码可以在任何支持的平台上编译与运行，而不需要修改源代码。会自动依平台的不同，表现平台特有的图形界面风格。</p>
<ul>
<li>Linux/X11：用于X Window System（如Solaris、AIX、HP-UX、Linux、BSD）。支持KDevelop和Eclipse IDE集成</li>
<li>Mac：用于Apple Mac OS X。基于Cocoa框架。支持Universal Binary。支持以Xcode编辑、编译和测试。</li>
<li>Windows：用于Microsoft Windows。支持Visual Studio集成，也可以使用MinGW编译</li>
<li>Embedded Linux：用于嵌入式Linux。可以透过编译移除不常使用的组件与功能。透过自己的视窗系统QWS，不需依赖X Window System，直接写入Linux帧缓冲。可以减少存储器消耗。并提供虚拟帧缓冲QVFb，方便在桌面系统上进行嵌入式测试。</li>
<li>Windows CE / Mobile ：用于Windows CE</li>
<li>Symbian：用于Symbian platform</li>
<li>Maemo/MeeGo：用于Maemo</li>
<li>Wayland –用于Wayland显示服务器，Qt应用程序可以在运行时切换图形后端，如X与Wayland。[23][24]</li>
</ul>
<h2 id="授权模式"><a href="#授权模式" class="headerlink" title="授权模式"></a>授权模式</h2><p>Qt开放源代码，并且提供自由软件的用户协议。使得它可以被广泛地应用在各平台上的开放源代码软件开发中。</p>
<p>Qt提供三种授权方式。三种授权方式的功能、性能都没有区别，仅在于授权协议的不同。LGPL和GPL是免费发布，商业版则需收取授权费。[33]：</p>
<ul>
<li><p>Qt商业版 - Qt商业授权适用于开发专属和/或商业软件。此版本适用于不希望与他人共享源代码，或者遵循GNU宽通用公共许可证（LGPL）2.1版或GNU GPL 3.0版条款的开发人员。提供了技术支持服务。可以任意的修改Qt的源代码，而不需要公开。</p>
</li>
<li><p>GNU LGPL v. 2.1- Qt 4.5.0及以后的版本开始遵循GNU LGPL。LGPL允许链接到它的软件使用任意的许可证，可以被专属软件作为类库引用、发布和销售。可以购买支持服务。</p>
</li>
<li><p>GNU GPL v. 3.0 - 如果您希望将Qt应用程序与受GNU通用公共许可证（GPL）3.0版本条款限制的软件一同使用，或者您希望Qt应用程序遵循该GNU许可证版本的条款，则此版本Qt适用于开发此类Qt应用程序。可以购买支持服务。</p>
</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Qt经过多年发展，Qt不但拥有了完善的C++图形库，而且近年来的版本逐渐集成了数据库、OpenGL库、多媒体库、网络、脚本库、XML库、WebKit库等等，其核心库也加入了进程间通信、多线程等模块，极大的丰富了Qt开发大规模复杂跨平台应用程序的能力，真正意义上实现了其研发宗旨“Code Less; Create More; Deploy Anywhere.”。</p>
<p>由于各家编译器规格不同，Qt本身为了跨平台兼容性，只能以“最低兼容规格”来设计。因此Qt必须具备RTTI、动态创建、Persistence/Serialization的基础建设，以及建构出自己的容器组件。</p>
<p>下列模块提供一般的软件开发</p>
<ul>
<li>QtCore—QtCore模块是所有基于Qt的应用程序的基础，提供信号与槽的对象间通信机制、IO、事件和对象处理、多线程</li>
<li>QtGui—包含了开发图形用户界面应用程序所需的功能。使用其支持的各个平台的原生图形API。支持反锯齿、向量形变。支持ARGB顶层widget</li>
<li>QtMultimedia—提供了用于多媒体内容处理的QML类型集和C++类集。同时提供访问摄像头及音频功能的API。包含的Qt音频引擎支持三维音频回放及管理。</li>
<li>QtNetwork—提供了网络程序设计功能。支持通用协议，如HTTP、FTP和DNS，包括对异步HTTP 1.1的支持。与较低层的TCP/IP和UDP协议，如QTcpSocket、QTcpServer和QUdpSocket</li>
<li>QtOpenGL—提供在应用程序中使用OpenGL和OpenGL ES加入3D图形。在Windows平台上亦支持Direct3D</li>
<li>QtOpenVG-提供OpenVG绘图支持的一个插件</li>
<li>QtScript—包含完全集成的ECMA标准脚本引擎。提供信号与槽机制简化对象间通信和QtScript调试器。</li>
<li>QtScriptTools—额外的Qt Script组件</li>
<li>QtSql—将数据库集成至应用程序。支持所有主要的数据库驱动包括ODBC、MySQL、PSQL、SQLite、ibase、Oracle、Sybase、DB2。</li>
<li>QtSvg—支持SVG格式</li>
<li>QtWebKit—集成WebKit，提供了HTML浏览器引擎，便于在原生应用程序中嵌入网络内容和服务。</li>
<li>QtXml—提供了XML文档的阅读器和编写器、支持SAX和DOM。</li>
<li>QtXmlPatternsl—提供了XQuery和XPath引擎支持。</li>
<li>Phonon—集成Phonon，支持跨平台应用程序播放音频和视频内容。Qt5开始不支持Phonon。</li>
<li>Qt3Support—模块提供兼容Qt 3.х.х版本的程序库</li>
<li>QtDeclarative [34] - engine for declaratively building fluid user interfaces in QML</li>
</ul>
<p>作业于Qt附带工具的模块</p>
<ul>
<li>QtDesigner—提供扩展Qt Designer的类别。</li>
<li>QtUiTools</li>
<li>QtHelp—协助集成在线文件到应用程序中。</li>
<li>QtTest—提供单元测试框架和鼠标和键盘模拟功能。集成Visual Studio和KDevelop。</li>
</ul>
<p>下列模块用于Unix开发</p>
<ul>
<li>QtDBus</li>
</ul>
<p>下列模块用于Windows开发</p>
<ul>
<li>QAxContainer</li>
<li>QAxServer</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上内容全部摘自wiki，原文链接地址<a href="https://zh.wikipedia.org/zh/Qt。" target="_blank" rel="noopener">https://zh.wikipedia.org/zh/Qt。</a></p>
<p>我就是懒得打那么多字介绍了。下面开始正式讲解Qt了</p>
]]></content>
      <categories>
        <category>Qt</category>
        <category>Qt基础教程</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
</search>
